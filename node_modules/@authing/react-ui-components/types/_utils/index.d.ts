import { Rule } from 'antd/lib/form';
import qs from 'qs';
import { User } from 'authing-js-sdk';
import { GuardProps } from '../Guard';
import { ApplicationConfig, ComplateFiledsPlace, LoginMethods, RegisterMethods } from '../Type/application';
import { Lang } from '../Type';
export * from './popupCenter';
export * from './clipboard';
export declare const VALIDATE_PATTERN: {
    readonly email: RegExp;
    readonly phone: RegExp;
    readonly ip: RegExp;
    readonly host: RegExp;
    readonly username: RegExp;
};
export declare const validate: (type: keyof typeof VALIDATE_PATTERN, val: string) => boolean;
export declare const getRequiredRules: (msg: string) => Rule[];
export declare const fieldRequiredRule: (fieldRequiredRule: string, fieldRequiredRuleMessage?: string | undefined) => Rule[];
export declare function getDeviceName(): string | null | undefined;
export declare type STYLE_RECORD_KEY = 'appConfig' | 'userConfig';
export declare const insertStyles: (styles: string | any, recordKey?: "appConfig" | "userConfig" | undefined) => void;
export declare const removeStyles: (recordKey: STYLE_RECORD_KEY) => void;
export declare const getClassnames: (classnames: (string | boolean | undefined)[]) => string;
/**
 * https://www.itranslater.com/qa/details/2115518846294557696
 * Simple object check.
 * @param item
 * @returns {boolean}
 */
export declare function isObject(item: any): any;
/**
 * https://www.itranslater.com/qa/details/2115518846294557696
 * Deep merge two objects.
 * @param target
 * @param ...sources
 */
export declare function deepMerge<T extends any = any>(target: T, ...sources: any[]): T;
/**
 *  在托管页下上传query中指定的用户自定义字段进行补全
 * @param params 指定上传的用户自定义字段
 */
export declare const getUserRegisterParams: (params?: string[] | undefined) => {
    key: string;
    value: string | string[] | qs.ParsedQs | qs.ParsedQs[] | undefined;
}[];
export declare const isWeChatBrowser: () => boolean | null;
export declare const isLarkBrowser: () => boolean | null;
export declare const isQtWebEngine: () => boolean | null;
export declare const isXiaomiBrowser: () => boolean | null;
export declare const isDingtalkBrowser: () => boolean | null;
export declare const isQQBrowser: () => boolean | null;
export declare const isQQBuiltInBrowser: () => boolean | null;
export declare const isWeWorkBuiltInBrowser: () => boolean | null;
export declare const isEdgeBrowser: () => boolean;
export declare const isWeiboBrowser: () => boolean | null;
export declare const isAlipayBrowser: () => boolean | null;
export declare const isBaiduBrowser: () => boolean | null;
export declare const isWeComeBrowser: () => boolean;
export declare const isMobile: () => RegExpMatchArray | null;
export declare const isSpecialBrowser: () => boolean;
export declare const assembledAppHost: (identifier: string, host: string) => string;
export declare const assembledRequestHost: (requestHostname: string, configHost: string) => string;
export declare enum PasswordStrength {
    NoCheck = 0,
    Low = 1,
    Middle = 2,
    High = 3,
    AUTO = 4
}
export declare const PASSWORD_STRENGTH_TEXT_MAP: Record<PasswordStrength, {
    placeholder: () => string;
    validateMessage: () => string;
}>;
export declare const getSymbolTypeLength: (pwd: string) => number;
export declare const getPasswordValidate: (strength?: PasswordStrength, customPasswordStrength?: any, fieldRequiredRuleMessage?: string | undefined) => Rule[];
export declare const sleep: (delay: number) => Promise<unknown>;
export declare const shoudGoToComplete: (user: User, contextType: ComplateFiledsPlace, config: ApplicationConfig | undefined, autoRegister?: boolean | undefined) => boolean;
export declare const tabSort: (defaultValue: any, tabList: RegisterMethods[]) => RegisterMethods[];
export declare const mailDesensitization: (mail: string) => string;
export declare const phoneDesensitization: (phone: string) => string;
export declare const getHundreds: (num: number) => number;
export declare const GuardPropsFilter: (pre: GuardProps, current: GuardProps) => boolean;
export declare const getDocumentNode: (node: Node & ParentNode) => Document;
export declare const getLoginTypePipe: (publicConfig: ApplicationConfig, registerMethod: RegisterMethods) => {
    specifyDefaultLoginMethod: LoginMethods;
    lockMethod: string;
} | {
    specifyDefaultLoginMethod: LoginMethods;
    lockMethod?: undefined;
} | undefined;
export declare const getPasswordIdentify: (identity: string) => string;
export declare const getCurrentLng: () => Lang;
