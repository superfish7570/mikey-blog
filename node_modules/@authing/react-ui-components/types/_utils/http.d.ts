import { CodeAction } from './responseManagement/interface';
import { AxiosRequestConfig } from 'axios';
export declare const requestClient: {
    (input: RequestInfo, init?: RequestInit | undefined): Promise<any>;
    get<T>(path: string, query?: Record<string, any>, init?: AxiosRequestConfig<any> | undefined): Promise<AuthingResponse<T>>;
    post<T_1>(path: string, data: any, config?: {
        headers: any;
    } | undefined): Promise<AuthingResponse<T_1>>;
    postForm<T_2>(path: string, formData: any, config?: {
        headers: any;
    } | undefined): Promise<AuthingResponse<T_2>>;
    baseUrl: string;
    setBaseUrl(base: string): void;
    langHeader: string;
    tenantHeader: string;
    tenantId: string;
    setLangHeader(key: string | undefined): void;
    setTenantHeader(key: string | undefined): void;
    setTenantId(tenantId: string): void;
};
export interface AuthingResponse<T = any> {
    code?: number;
    statusCode?: number;
    apiCode?: number;
    data?: T;
    messages?: string;
    message?: string;
    flowHandle?: string;
}
export interface AuthingGuardResponse<T = any> extends AuthingResponse<T> {
    onGuardHandling?: () => CodeAction;
    isFlowEnd?: boolean;
}
