import React from 'react';
import { GuardEvents, GuardLocalConfig, GuardModuleType, GuardPageConfig } from '..';
import { BackFillMultipleState, StoreInstance } from '../Guard/core/hooks/useMultipleAccounts';
import { ModuleState } from '../Guard/GuardModule/stateMachine';
import { ApplicationConfig } from '../Type/application';
import { GuardHttp } from './guardHttp';
export interface IGuardContext {
    finallyConfig: GuardLocalConfig;
    defaultMergedConfig: GuardLocalConfig;
    publicConfig: ApplicationConfig;
    httpClient: GuardHttp;
    appId: string;
    tenantId?: string;
    initData: any;
    currentModule: ModuleState;
    events: Partial<GuardEvents>;
    changeModule?: (moduleName: GuardModuleType, initData?: any) => Promise<void>;
    backModule?: () => void;
    isAuthFlow: boolean;
    contextLoaded: boolean;
    guardPageConfig: Partial<GuardPageConfig>;
    multipleInstance: {
        /**
         * 多账号相关
         */
        isMultipleAccount: boolean;
        /**
         * when： 多账号页面跳转进入登录页面
         * 携带的回填数据信息
         */
        multipleAccountData?: BackFillMultipleState;
        /**
         * 多账号 store 实例
         */
        instance?: StoreInstance;
        /**
         * 切换多账号 isMultipleAccount 状态
         */
        referMultipleState?: (type: 'login' | 'multiple') => void;
        /**
         * 清空回填数据
         */
        clearBackFillData?: () => void;
    };
}
export declare const createGuardXContext: () => {
    Provider: React.FC<{
        value: Partial<IGuardContext>;
    }>;
    Consumer: React.Consumer<IGuardContext>;
};
export declare const useGuardXContext: () => {
    Provider: React.FC<{
        value: Partial<IGuardContext>;
    }>;
    Consumer: React.Consumer<IGuardContext>;
};
export interface IGuardContextProvider {
    spin: boolean;
    spinChange: (spin: boolean) => void;
}
export declare const useGuardButtonContext: () => {
    GuardButtonProvider: React.FC<{}>;
};
export declare const useGuardButtonState: () => IGuardContextProvider;
export declare const useGuardPublicConfig: () => ApplicationConfig;
export declare const useGuardHttpClient: () => GuardHttp;
export declare const useGuardDefaultMergedConfig: () => GuardLocalConfig;
export declare const useGuardAppId: () => string;
export declare const useGuardTenantId: () => string | undefined;
export declare function useGuardInitData<T>(): T;
export declare const useGuardCurrentModule: () => ModuleState;
export declare const useGuardEvents: () => Partial<GuardEvents>;
export declare const useGuardModule: () => {
    changeModule: ((moduleName: GuardModuleType, initData?: any) => Promise<void>) | undefined;
    backModule: (() => void) | undefined;
};
export declare const useGuardFinallyConfig: () => GuardLocalConfig;
export declare const useGuardContextLoaded: () => boolean;
export declare const useGuardIsAuthFlow: () => boolean;
export declare const useGuardPageConfig: () => Partial<GuardPageConfig>;
/**
 * 多账号登录 store 实例
 */
export declare const useGuardMultipleInstance: () => {
    /**
     * 多账号相关
     */
    isMultipleAccount: boolean;
    /**
     * when： 多账号页面跳转进入登录页面
     * 携带的回填数据信息
     */
    multipleAccountData?: BackFillMultipleState | undefined;
    /**
     * 多账号 store 实例
     */
    instance?: {
        initStore: (appId: string, options: {
            serverSideLoginMethods: import("../Guard/core/hooks/useMultipleAccounts").LoginWay[];
            isInternationSms: boolean;
        }) => void;
        setLoginWay: (tab: "input" | "qrcode", way: import("../Guard/core/hooks/useMultipleAccounts").LoginWay, id?: string | undefined, internation?: {
            phoneCountryCode: string;
            areaCode: string;
        } | undefined) => void;
        setUserInfo: (user: Pick<import("../Guard/core/hooks/useMultipleAccounts").User & {
            id: string;
        }, "email" | "username" | "phone" | "photo" | "id" | "name" | "nickname" | "_updateTime" | "qrCodeId" | "areaCode">) => void;
        setLoginWayByHttpData: (account: string, data: {
            username?: string | undefined;
            phone?: string | undefined;
            email?: string | undefined;
        }) => void;
        setLoginWayByLDAPData: (account: string, data: {
            name?: string | undefined;
            phone?: string | undefined;
            email?: string | undefined;
        }) => void;
        getMemoUser: (excludeWays?: import("../Guard/core/hooks/useMultipleAccounts").LoginWay[]) => import("../Login/multipleAccounts/panel").SelectOptions[];
        getMemoSingleUser: (id: string) => {
            way: import("../Guard/core/hooks/useMultipleAccounts").LoginWay;
            account: string;
        } | undefined;
        delUserById: (id: string) => string;
        getMemberState: () => boolean;
        getFirstBackFillData: () => BackFillMultipleState | undefined;
        getOriginAccount: () => string;
        getOriginWay: () => string;
    } | undefined;
    /**
     * 切换多账号 isMultipleAccount 状态
     */
    referMultipleState?: ((type: 'login' | 'multiple') => void) | undefined;
    /**
     * 清空回填数据
     */
    clearBackFillData?: (() => void) | undefined;
};
