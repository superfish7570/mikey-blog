import { AuthingGuardResponse, AuthingResponse } from './http';
import { CodeAction } from './responseManagement/interface';
export declare class GuardHttp {
    private requestClient;
    private headers;
    private responseInterceptorMap;
    constructor(baseUrl?: string);
    private getRequestClient;
    setUserpoolId(userpoolId: string): this;
    setAppId(appId: string): this;
    setTenantId(tenantId: string): this;
    setBaseUrl(baseUrl: string): this;
    getHeaders: () => Record<string, string>;
    get: <T = any>(path: string, query?: Record<string, any>, config?: any) => Promise<AuthingGuardResponse<T>>;
    post: <T = any>(path: string, data: any, config?: {
        headers: any;
    } | undefined) => Promise<AuthingGuardResponse<T>>;
    postForm: <T = any>(path: string, formData: any, config?: {
        headers: any;
    } | undefined) => Promise<AuthingGuardResponse<T>>;
    authFlow: <T = any>(action: string, data?: any) => Promise<AuthingGuardResponse<T>>;
    initErrorCodeInterceptor: (callBack: (code: CodeAction, res: AuthingResponse) => AuthingGuardResponse) => this | undefined;
    responseIntercept: (res: AuthingResponse) => AuthingGuardResponse;
}
export declare const initGuardHttp: (baseUrl: string) => GuardHttp;
export declare const getGuardHttp: () => GuardHttp;
export declare const useGuardHttp: () => GuardHttp;
