import { Lang } from '..';
import { PasswordStrength } from '../_utils';
export declare enum LoginMethods {
    LDAP = "ldap",
    AppQr = "app-qrcode",
    Password = "password",
    PhoneCode = "phone-code",
    WxMinQr = "wechat-miniprogram-qrcode",
    AD = "ad",
    WechatMpQrcode = "wechatmp-qrcode"
}
export declare enum OIDCConnectionMode {
    FRONT_CHANNEL = "FRONT_CHANNEL",
    BACK_CHANNEL = "BACK_CHANNEL"
}
export declare enum SocialConnectionProvider {
    ALIPAY = "alipay",
    GOOGLE = "google",
    WECHATPC = "wechat:pc",
    WECHATMP = "wechat:webpage-authorization",
    WECHAT_MINIPROGRAM = "wechat:miniprogram:default",
    WECHAT_MINIPROGRAM_QRCODE = "wechat:miniprogram:qrconnect",
    WECHAT_MINIPROGRAM_APPLAUNCH = "wechat:miniprogram:app-launch",
    WECHATMOBILE = "wechat:mobile",
    GITHUB = "github",
    QQ = "qq",
    WECHATWORK_ADDRESS_BOOK = "wechatwork:addressbook",
    WECHATWORK_CORP_QRCONNECT = "wechatwork:corp:qrconnect",
    WECHATWORK_SERVICEPROVIDER_QRCONNECT = "wechatwork:service-provider:qrconnect",
    DINGTALK = "dingtalk",
    WEIBO = "weibo",
    APPLE = "apple",
    APPLE_WEB = "apple:web",
    LARK_PUBLIC = "lark-public",
    LARK_INTERNAL = "lark-internal",
    BAIDU = "baidu",
    LINKEDIN = "linkedin",
    SLACK = "slack",
    YIDUN = "yidun",
    QINGCLOUD = "qingcloud",
    FACEBOOK = "facebook"
}
export declare enum Protocol {
    AD = "ad",
    CAS = "cas",
    LDAP = "ldap",
    OIDC = "oidc",
    SAML = "saml",
    OAUTH = "oauth",
    AZURE_AD = "azure-ad",
    AD_KERBEROS = "ad-kerberos"
}
export interface IOAuthConnectionConfig {
    authEndPoint: string;
    tokenEndPoint: string;
    scope: string;
    clientId: string;
    clientSecret: string;
    authUrlTemplate: string;
    codeToTokenScript: string;
    tokenToUserInfoScript: string;
    tokenToUserInfoScriptFuncId: string;
    codeToTokenScriptFuncId: string;
    authUrl?: string;
}
export interface IAzureAdConnectionConfig {
    microsoftAzureAdDomain: string;
    clientId: string;
    syncUserProfileOnLogin: string;
    emailVerifiedDefault: boolean;
    authorizationUrl: string;
    callbackUrl: string;
}
export interface ISamlConnectionConfig {
    signInEndPoint: string;
    samlRequest?: string;
    samlIdpCert: string;
    samlSpCert: string;
    samlSpKey: string;
    signOutEndPoint: string;
    signSamlRequest: boolean;
    signatureAlgorithm: string;
    digestAlgorithm: string;
    protocolBinding: string;
}
export interface ICasConnectionConfig {
    casConnectionLoginUrl: string;
}
export interface SocialConnectionItem {
    name: string;
    name_en: string;
    displayName: string;
    logo: string;
    description: string;
    identifier: string;
    provider: SocialConnectionProvider;
    authorizationUrl: string;
    tooltip: Record<Lang, string>;
}
export declare enum RegisterMethods {
    Email = "email",
    Phone = "phone",
    EmailCode = "emailCode"
}
export declare type QrcodeTabsSettings = Record<LoginMethods, Array<{
    id: string;
    title: string;
    isDefault?: boolean;
}>>;
export interface OidcClientMetadata {
    grant_types: string[];
    client_id: string;
    redirect_uris: string[];
    scope: string;
    response_types: ResponseType[];
}
export interface OIDCConnectionConfig {
    issuerUrl: string;
    authorizationEdpoint: string;
    responseType: string;
    mode: OIDCConnectionMode;
    clientId: string;
    clientSecret: string;
    scopes: string;
    redirectUri: string;
}
export interface InternalExtendsField {
    type: 'internal';
    name: string;
    label: string;
    inputType: string;
    required: boolean;
    validateRules: any[];
}
export interface UserExtendsField {
    type: 'user';
    id: string;
    name: string;
    label: string;
    inputType: string;
    required: boolean;
    validateRules: any[];
}
export declare type ExtendsField = InternalExtendsField | UserExtendsField;
export interface ApplicationPasswordTabConfig {
    enabledLoginMethods?: PasswordLoginMethods[];
}
export interface ApplicationVerifyCodeTabConfig {
    enabledLoginMethods: VerifyLoginMethods[];
}
export interface Agreement {
    id: number;
    title: string;
    required: boolean;
    lang: Lang;
    availableAt?: number;
}
export declare type PasswordLoginMethods = 'username-password' | 'email-password' | 'phone-password';
export declare type VerifyLoginMethods = 'email-code' | 'phone-code';
export declare type ComplateFiledsPlace = 'register' | 'login';
export interface ApplicationConfig {
    id: string;
    allowedOrigins: string[];
    corsWhitelist: string[];
    cdnBase: string;
    userPoolId: string;
    rootUserPoolId: string;
    publicKey: string;
    internationalSmsConfig?: {
        enabled: boolean;
        defaultISOType: string;
    };
    css: string;
    customLoading?: string;
    name: string;
    logo: string;
    description?: string;
    redirectUris: string[];
    registerDisabled: boolean;
    mergeAdAndAccountPasswordLogin: boolean;
    registerTabs: {
        list: string[];
        default: string;
        title: {
            [x: string]: string;
        };
    };
    registerTabsConfig: {
        list: string[];
        default: string;
        title: {
            [x: string]: string;
        };
        registerTypeConfig: {
            emailRegisterType?: RegisterMethods[];
            phoneRegisterType?: RegisterMethods[];
        };
    };
    qrcodeTabsSettings: QrcodeTabsSettings;
    loginTabs: {
        list: string[];
        default: string;
        defaultV2?: string;
        title: {
            [x: string]: string;
        };
    };
    socialConnections: SocialConnectionItem[];
    complateFiledsPlace: ComplateFiledsPlace[];
    extendsFieldsEnabled: boolean;
    extendsFields: ExtendsField[];
    extendsFieldsI18n?: {
        [key: string]: Record<Lang, {
            enabled: boolean;
            value: string;
        }>;
    };
    identifier: string;
    requestHostname: string;
    identityProviders: {
        identifier: string;
        protocol: Protocol;
        displayName: string;
        logo: string;
        config: ISamlConnectionConfig | OIDCConnectionConfig | ICasConnectionConfig | IAzureAdConnectionConfig | IOAuthConnectionConfig;
    }[];
    ssoPageComponentDisplay: {
        autoRegisterThenLoginHintInfo: boolean;
        forgetPasswordBtn: boolean;
        idpBtns: boolean;
        loginBtn: boolean;
        loginByPhoneCodeTab: boolean;
        loginByUserPasswordTab: boolean;
        loginMethodNav: boolean;
        phoneCodeInput: boolean;
        registerBtn: boolean;
        registerByEmailTab: boolean;
        registerByPhoneTab: boolean;
        registerMethodNav: boolean;
        socialLoginBtns: boolean;
        userPasswordInput: boolean;
        wxMpScanTab: boolean;
    };
    protocol: Protocol;
    oidcConfig: OidcClientMetadata;
    passwordTabConfig: ApplicationPasswordTabConfig;
    verifyCodeTabConfig?: ApplicationVerifyCodeTabConfig;
    agreementEnabled: boolean;
    agreements: Agreement[];
    customPasswordStrength: any;
    passwordStrength: PasswordStrength;
    verifyCodeLength: number;
    websocket: string;
    welcomeMessage: any;
    skipComplateFileds: boolean;
    selfUnlockStrategy: 'captcha' | 'password-captcha';
    defaultLanguageConfig: Lang;
    /**
     * 是否开启账号切换
     */
    enableLoginAccountSwitch: boolean;
    /**
     * 是否开启注册密码补全
     */
    enableCompletePassword: boolean;
}
