import { IG2Config, IG2Events, IG2FCProps, IG2FCViewProps } from '../Type';
import { AuthenticationClient, SocialConnectionProvider, User } from 'authing-js-sdk';
import { QrCodeAuthenticationClient } from 'authing-js-sdk/build/main/lib/authentication/QrCodeAuthenticationClient';
import { Agreement, LoginMethods, PasswordLoginMethods } from '../Type/application';
export interface LoginConfig extends IG2Config {
    autoRegister?: boolean;
    disableResetPwd?: boolean;
    disableRegister?: boolean;
    defaultLoginMethod?: LoginMethods;
    loginMethods?: LoginMethods[];
    passwordLoginMethods?: PasswordLoginMethods[];
    socialConnections?: SocialConnectionProvider[];
    socialConnectionsBtnShape?: 'default' | 'button' | 'icon';
    enterpriseConnections?: string[];
    qrCodeScanOptions?: Parameters<QrCodeAuthenticationClient['startScanning']>[1];
    publicKey?: string;
    agreementEnabled?: boolean;
    agreements?: Agreement[];
}
export interface LoginEvents extends IG2Events {
    onLogin?: (user: User, authClient: AuthenticationClient) => void;
    onLoginError?: (errorMessages: any) => void;
    onLoginTabChange?: (activeTab: LoginMethods) => void;
    onBeforeLogin?: (loginInfo: any, authClient: AuthenticationClient) => boolean | Promise<boolean>;
}
export interface GuardLoginProps extends IG2FCProps, LoginEvents {
    config?: Partial<LoginConfig>;
}
export interface GuardLoginViewProps extends GuardLoginProps, IG2FCViewProps {
    config: LoginConfig;
}
export interface GuardLoginInitData {
    specifyDefaultLoginMethod?: LoginMethods;
    _firstItemInitialValue?: string;
    _lockMethod?: string;
}
export declare const getDefaultLoginConfig: () => LoginConfig;
