import { GuardModuleType } from '.';
import { CompleteInfoEvents } from '../CompleteInfo/interface';
import { ForgetPasswordEvents } from '../ForgetPassword/interface';
import { IdentityBindingEvents } from '../IdentityBinding/interface';
import { IdentityBindingAskEvents } from '../IdentityBindingAsk';
import { LoginEvents } from '../Login/interface';
import { RegisterEvents } from '../Register/interface';
export interface GuardEvents extends LoginEvents, RegisterEvents, CompleteInfoEvents, ForgetPasswordEvents, IdentityBindingEvents, IdentityBindingAskEvents {
    onBeforeChangeModule?: (key: GuardModuleType, initData?: any) => boolean | Promise<boolean>;
}
export declare const guardEventsFilter: (props: any, multipleInstance?: {
    initStore: (appId: string, options: {
        serverSideLoginMethods: import("./core/hooks/useMultipleAccounts").LoginWay[];
        isInternationSms: boolean;
    }) => void;
    setLoginWay: (tab: "input" | "qrcode", way: import("./core/hooks/useMultipleAccounts").LoginWay, id?: string | undefined, internation?: {
        phoneCountryCode: string;
        areaCode: string;
    } | undefined) => void;
    setUserInfo: (user: Pick<import("./core/hooks/useMultipleAccounts").User & {
        id: string;
    }, "email" | "username" | "phone" | "photo" | "id" | "name" | "nickname" | "_updateTime" | "qrCodeId" | "areaCode">) => void;
    setLoginWayByHttpData: (account: string, data: {
        username?: string | undefined;
        phone?: string | undefined;
        email?: string | undefined;
    }) => void;
    setLoginWayByLDAPData: (account: string, data: {
        name?: string | undefined;
        phone?: string | undefined;
        email?: string | undefined;
    }) => void;
    getMemoUser: (excludeWays?: import("./core/hooks/useMultipleAccounts").LoginWay[]) => import("../Login/multipleAccounts/panel").SelectOptions[];
    getMemoSingleUser: (id: string) => {
        way: import("./core/hooks/useMultipleAccounts").LoginWay;
        account: string;
    } | undefined;
    delUserById: (id: string) => string;
    getMemberState: () => boolean;
    getFirstBackFillData: () => import("./core/hooks/useMultipleAccounts").BackFillMultipleState | undefined;
    getOriginAccount: () => string;
    getOriginWay: () => string;
} | undefined, openEventsMapping?: boolean | undefined) => GuardEvents;
export declare const guardEventsHijacking: (events: GuardEvents, openEventsMapping?: boolean | undefined) => GuardEvents;
export declare const GuardEventsCamelToKebabMapping: {
    readonly onLoad: "load";
    readonly onLoadError: "load-error";
    readonly onLogin: "login";
    readonly onBeforeLogin: "before-login";
    readonly onLoginError: "login-error";
    readonly onRegister: "register";
    readonly onBeforeRegister: "before-register";
    readonly onRegisterError: "register-error";
    readonly onPwdEmailSend: "pwd-email-send";
    readonly onPwdEmailSendError: "pwd-email-send-error";
    readonly onPwdPhoneSend: "pwd-phone-send";
    readonly onPwdPhoneSendError: "pwd-phone-send-error";
    readonly onPwdReset: "pwd-reset";
    readonly onPwdResetError: "pwd-reset-error";
    readonly onClose: "close";
    readonly onLoginTabChange: "login-tab-change";
    readonly onRegisterTabChange: "register-tab-change";
    readonly onRegisterInfoCompleted: "register-info-completed";
    readonly onRegisterInfoCompletedError: "register-info-completed-error";
    readonly onLangChange: "lang-change";
};
export interface GuardEventsKebabToCamelType {
    load: GuardEvents['onLoad'];
    'load-error': GuardEvents['onLoadError'];
    'before-login': GuardEvents['onBeforeLogin'];
    login: GuardEvents['onLogin'];
    'login-error': GuardEvents['onLoginError'];
    'before-register': GuardEvents['onBeforeRegister'];
    register: GuardEvents['onRegister'];
    'register-error': GuardEvents['onRegisterError'];
    'pwd-email-send': GuardEvents['onPwdEmailSend'];
    'pwd-email-send-error': GuardEvents['onPwdEmailSendError'];
    'pwd-phone-send': GuardEvents['onPwdPhoneSend'];
    'pwd-phone-send-error': GuardEvents['onPwdPhoneSendError'];
    'pwd-reset': GuardEvents['onPwdReset'];
    'pwd-reset-error': GuardEvents['onPwdResetError'];
    close: GuardEvents['onClose'];
    'login-tab-change': GuardEvents['onLoginTabChange'];
    'register-tab-change': GuardEvents['onRegisterTabChange'];
    'register-info-completed': GuardEvents['onRegisterInfoCompleted'];
    'register-info-completed-error': GuardEvents['onRegisterInfoCompletedError'];
    'lang-change': GuardEvents['onLangChange'];
}
