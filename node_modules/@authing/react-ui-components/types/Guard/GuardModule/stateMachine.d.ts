import { GuardLocalConfig } from '../config';
import { GuardModuleType } from '../module';
export interface ModuleState {
    moduleName: GuardModuleType;
    initData?: any;
}
export declare enum ActionType {
    ChangeModule = "ChangeModule",
    Back = "Back",
    Init = "Init"
}
export interface StateMachineLog {
    action: ActionType;
    date: number;
    dataSource: ModuleState;
}
export declare type ChangeModuleEvent = (nextModule: GuardModuleType, initData?: any) => void;
export declare class GuardStateMachine {
    private order;
    private config;
    private moduleStateHistory;
    private changeModuleEvent;
    private stateMachineLog;
    constructor(changeModuleEvent: ChangeModuleEvent, initData: ModuleState);
    uninstallPopstate: () => void;
    globalWindow: () => Window | undefined;
    next: (nextModule: GuardModuleType, initData: any) => void;
    back: (initData?: any) => void;
    end: () => void;
    historyPush: (data: ModuleState, actionType?: ActionType) => void;
    historyBack: (data: ModuleState) => void;
    setConfig: (config: GuardLocalConfig) => void;
    isUseHistoryHijack: () => boolean;
    onPopstate: () => void;
}
export declare const initGuardStateMachine: (changeMouleEvent: ChangeModuleEvent, initData: ModuleState) => GuardStateMachine;
export declare const getGuardStateMachine: () => GuardStateMachine;
export declare const useGuardStateMachine: () => GuardStateMachine;
