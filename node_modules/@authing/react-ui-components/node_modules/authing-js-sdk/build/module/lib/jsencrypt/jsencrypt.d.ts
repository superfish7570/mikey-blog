export function JSEncrypt(options: any): void;
export class JSEncrypt {
    constructor(options: any);
    default_key_size: number;
    default_public_exponent: any;
    log: any;
    key: JSEncryptRSAKey;
    setKey(key: any): void;
    setPrivateKey(privkey: any): void;
    setPublicKey(pubkey: any): void;
    decrypt(str: any): any;
    encrypt(str: any): string | false;
    sign(str: any, digestMethod: any, digestName: any): string | false;
    verify(str: any, signature: any, digestMethod: any): any;
    getKey(cb: any): JSEncryptRSAKey;
    getPrivateKey(): string;
    getPrivateKeyB64(): string;
    getPublicKey(): string;
    getPublicKeyB64(): string;
}
export namespace JSEncrypt {
    const version: string;
}
declare function JSEncryptRSAKey(key: any): any;
declare class JSEncryptRSAKey {
    constructor(key: any);
    parseKey(pem: any): boolean;
    n: any;
    e: any;
    d: any;
    p: any;
    q: any;
    dmp1: any;
    dmq1: any;
    coeff: any;
    getPrivateBaseKey(): any;
    getPrivateBaseKeyB64(): string;
    getPublicBaseKey(): any;
    getPublicBaseKeyB64(): string;
    getPrivateKey(): string;
    getPublicKey(): string;
    parsePropertiesFrom(obj: any): void;
}
declare namespace JSEncryptRSAKey {
    function wordwrap(str: any, width: any): any;
    function hasPublicKeyProperty(obj: any): any;
    function hasPrivateKeyProperty(obj: any): any;
}
export {};
