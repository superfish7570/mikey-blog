import { GraphqlClient } from './common/GraphqlClient';
import { ManagementTokenProvider } from './management/ManagementTokenProvider';
import { AuthenticationTokenProvider } from './authentication/AuthenticationTokenProvider';
import { CreateUserResponse, CreateUserVariables, SearchUserVariables, SearchUserResponse, UserpoolVariables, UserpoolResponse, UpdateUserpoolVariables, UpdateUserpoolResponse, ResetPasswordVariables, ResetPasswordResponse, UserResponse, CheckPasswordStrengthVariables, CheckPasswordStrengthResponse, RegisterByEmailResponse, RegisterByEmailVariables, RegisterByUsernameResponse, RegisterByUsernameVariables, CreateRoleResponse, AssignRoleResponse, AssignRoleVariables, IsActionAllowedResponse, IsActionAllowedVariables, IsActionDeniedResponse, IsActionDeniedVariables, CreateRoleVariables, LoginByEmailVariables, LoginByEmailResponse, LoginByUsernameVariables, LoginByUsernameResponse, LoginByPhoneCodeVariables, LoginByPhoneCodeResponse, LoginByPhonePasswordVariables, LoginByPhonePasswordResponse, OrgResponse, OrgVariables, AddMemberVariables, AddMemberResponse, SendEmailResponse, SendEmailVariables, UsersResponse, UsersVariables, UserVariables, RolesResponse, RolesVariables, GroupsResponse, GroupsVariables, UpdateUserResponse, UpdateUserVariables, DeleteUserVariables, DeleteUserResponse, DeleteUsersResponse, DeleteUsersVariables, RoleVariables, RoleResponse, RoleWithUsersResponse, RoleWithUsersVariables, UpdateRoleResponse, UpdateRoleVariables, OrgsVariables, OrgsResponse, CreateOrgResponse, CreateOrgVariables, UpdateNodeVariables, UpdateNodeResponse, DeleteNodeVariables, DeleteNodeResponse, MoveNodeVariables, MoveNodeResponse, NodeByIdWithMembersVariables, NodeByIdWithMembersResponse, NodeByCodeWithMembersVariables, NodeByCodeWithMembersResponse, RemoveMemberVariables, RemoveMemberResponse, RevokeRoleVariables, RevokeRoleResponse, ChildrenNodesVariables, ChildrenNodesResponse, RefreshTokenVariables, RefreshTokenResponse, AddUserToGroupResponse, AddUserToGroupVariables, RegisterByPhoneCodeResponse, RegisterByPhoneCodeVariables, UpdatePasswordVariables, UpdatePasswordResponse, UpdatePhoneVariables, UpdatePhoneResponse, UpdateEmailVariables, UpdateEmailResponse, BindPhoneVariables, BindPhoneResponse, UnbindPhoneVariables, UnbindPhoneResponse, UserBatchVariables, UserBatchResponse, GetUserRolesResponse, GetUserRolesVariables, AllowVariables, AllowResponse, WhitelistVariables, WhitelistResponse, RemoveWhitelistVariables, RemoveWhitelistResponse, AddWhitelistVariables, AddWhitelistResponse, UdfVariables, UdfResponse, UdvVariables, UdvResponse, SetUdvVariables, SetUdvResponse, RemoveUdvVariables, RemoveUdvResponse, SetUdfVariables, SetUdfResponse, RemoveUdfVariables, RemoveUdfResponse, DeleteRoleVariables, DeleteRoleResponse, DeleteRolesResponse, DeleteRolesVariables, PoliciesVariables, PoliciesResponse, CreatePolicyVariables, PolicyVariables, CreatePolicyResponse, PolicyResponse, UpdatePolicyVariables, UpdatePolicyResponse, DeletePolicyVariables, DeletePoliciesResponse, DeletePoliciesVariables, DeletePolicyResponse, PolicyAssignmentsVariables, PolicyAssignmentsResponse, AddPolicyAssignmentsVariables, AddPolicyAssignmentsResponse, RemovePolicyAssignmentsVariables, RemovePolicyAssignmentsResponse, DeleteOrgResponse, DeleteOrgVariables, RootNodeResponse, RootNodeVariables, IsRootNodeResponse, IsRootNodeVariables, IsUserExistsVariables, IsUserExistsResponse, CheckLoginStatusResponse, CheckLoginStatusVariables, GroupVariables, GroupResponse, CreateGroupVariables, CreateGroupResponse, UpdateGroupVariables, UpdateGroupResponse, DeleteGroupsVariables, DeleteGroupsResponse, RemoveUserFromGroupVariables, RemoveUserFromGroupResponse, GroupWithUsersVariables, GroupWithUsersResponse, GetUserGroupsVariables, GetUserGroupsResponse, UnbindEmailVariables, UnbindEmailResponse, AccessTokenVariables, RefreshAccessTokenVariables, RefreshAccessTokenResponse, AccessTokenResponse, EnablePolicyAssignmentVariables, EnablePolicyAssignmentResponse, DisbalePolicyAssignmentVariables, DisbalePolicyAssignmentResponse, NodeByIdVariables, NodeByIdResponse, SetUdvBatchVariables, SetUdvBatchResponse, LoginBySubAccountVariables, LoginBySubAccountResponse, ArchivedUsersVariables, ArchivedUsersResponse, AddNodeV2Variables, AddNodeV2Response, FindUserVariables, FindUserResponse, GetUserDepartmentsVariables, GetUserDepartmentsResponse, SetMainDepartmentResponse, SetMainDepartmentVariables, BindEmailVariables, BindEmailResponse, ListUserAuthorizedResourcesVariables, ListUserAuthorizedResourcesResponse, UdfValueBatchVariables, UdfValueBatchResponse, SetUdfValueBatchVariables, SetUdfValueBatchResponse, ListRoleAuthorizedResourcesVariables, ListRoleAuthorizedResourcesResponse, ListGroupAuthorizedResourcesVariables, ListGroupAuthorizedResourcesResponse, ListNodeByIdAuthorizedResourcesVariables, ListNodeByIdAuthorizedResourcesResponse, ListNodeByCodeAuthorizedResourcesVariables, ListNodeByCodeAuthorizedResourcesResponse, AuthorizedResourcesVariables, AuthorizedResourcesResponse, AuthorizeResourceVariables, AuthorizeResourceResponse, AuthorizedTargetsResponse, AuthorizedTargetsVariables, UsersWithCustomDataVariables, UsersWithCustomDataResponse, UserWithCustomDataVariables, UserWithCustomDataResponse, UserBatchWithCustomDataVariables, UserBatchWithCustomDataResponse, FindUserWithCustomDataVariables, FindUserWithCustomDataResponse, SearchUserWithCustomDataResponse, SearchUserWithCustomDataVariables, RoleWithUsersWithCustomDataVariables, RoleWithUsersWithCustomDataResponse, GroupWithUsersWithCustomDataVariables, GroupWithUsersWithCustomDataResponse, MoveMembersVariables, MoveMembersResponse, SearchNodesVariables, SearchNodesResponse, ResetPasswordByFirstLoginTokenVariables, ResetPasswordByFirstLoginTokenResponse, SendFirstLoginVerifyEmailVariables, SendFirstLoginVerifyEmailResponse, ResetPasswordByForceResetTokenVariables, ResetPasswordByForceResetTokenResponse } from '../types/graphql.v2';
export declare const isAllowed: (garpqhlClient: GraphqlClient, tokenProvider: ManagementTokenProvider, variables: IsActionAllowedVariables) => Promise<IsActionAllowedResponse>;
export declare const getChildrenNodes: (garpqhlClient: GraphqlClient, tokenProvider: ManagementTokenProvider, variables: ChildrenNodesVariables) => Promise<ChildrenNodesResponse>;
export declare const org: (garpqhlClient: GraphqlClient, tokenProvider: ManagementTokenProvider, variables: OrgVariables) => Promise<OrgResponse>;
export declare const isRootNode: (garpqhlClient: GraphqlClient, tokenProvider: ManagementTokenProvider, variables: IsRootNodeVariables) => Promise<IsRootNodeResponse>;
export declare const rootNode: (garpqhlClient: GraphqlClient, tokenProvider: ManagementTokenProvider, variables: RootNodeVariables) => Promise<RootNodeResponse>;
export declare const orgs: (garpqhlClient: GraphqlClient, tokenProvider: ManagementTokenProvider, variables: OrgsVariables) => Promise<OrgsResponse>;
export declare const getUserPoolDetail: (garpqhlClient: GraphqlClient, tokenProvider: ManagementTokenProvider | AuthenticationTokenProvider, variables: UserpoolVariables) => Promise<UserpoolResponse>;
export declare const user: (garpqhlClient: GraphqlClient, tokenProvider: ManagementTokenProvider | AuthenticationTokenProvider, variables: UserVariables) => Promise<UserResponse>;
export declare const userWithCustomData: (garpqhlClient: GraphqlClient, tokenProvider: ManagementTokenProvider | AuthenticationTokenProvider, variables: UserWithCustomDataVariables) => Promise<UserWithCustomDataResponse>;
export declare const createOrg: (garpqhlClient: GraphqlClient, tokenProvider: ManagementTokenProvider, variables: CreateOrgVariables) => Promise<CreateOrgResponse>;
export declare const deleteOrg: (garpqhlClient: GraphqlClient, tokenProvider: ManagementTokenProvider, variables: DeleteOrgVariables) => Promise<DeleteOrgResponse>;
export declare const isDenied: (garpqhlClient: GraphqlClient, tokenProvider: ManagementTokenProvider, variables: IsActionDeniedVariables) => Promise<IsActionDeniedResponse>;
export declare const checkPasswordStrength: (garpqhlClient: GraphqlClient, tokenProvider: AuthenticationTokenProvider, variables: CheckPasswordStrengthVariables) => Promise<CheckPasswordStrengthResponse>;
export declare const registerByEmail: (garpqhlClient: GraphqlClient, tokenProvider: AuthenticationTokenProvider, variables: RegisterByEmailVariables) => Promise<RegisterByEmailResponse>;
export declare const loginByEmail: (garpqhlClient: GraphqlClient, tokenProvider: AuthenticationTokenProvider, variables: LoginByEmailVariables) => Promise<LoginByEmailResponse>;
export declare const loginByUsername: (garpqhlClient: GraphqlClient, tokenProvider: AuthenticationTokenProvider, variables: LoginByUsernameVariables) => Promise<LoginByUsernameResponse>;
export declare const loginByPhoneCode: (garpqhlClient: GraphqlClient, tokenProvider: AuthenticationTokenProvider, variables: LoginByPhoneCodeVariables) => Promise<LoginByPhoneCodeResponse>;
export declare const loginByPhonePassword: (garpqhlClient: GraphqlClient, tokenProvider: AuthenticationTokenProvider, variables: LoginByPhonePasswordVariables) => Promise<LoginByPhonePasswordResponse>;
export declare const loginBySubAccount: (garpqhlClient: GraphqlClient, tokenProvider: AuthenticationTokenProvider, variables: LoginBySubAccountVariables) => Promise<LoginBySubAccountResponse>;
export declare const registerByUsername: (garpqhlClient: GraphqlClient, tokenProvider: AuthenticationTokenProvider, variables: RegisterByUsernameVariables) => Promise<RegisterByUsernameResponse>;
export declare const registerByPhoneCode: (garpqhlClient: GraphqlClient, tokenProvider: AuthenticationTokenProvider, variables: RegisterByPhoneCodeVariables) => Promise<RegisterByPhoneCodeResponse>;
export declare const addRole: (garpqhlClient: GraphqlClient, tokenProvider: ManagementTokenProvider, variables: CreateRoleVariables) => Promise<CreateRoleResponse>;
export declare const assignRole: (garpqhlClient: GraphqlClient, tokenProvider: ManagementTokenProvider, variables: AssignRoleVariables) => Promise<AssignRoleResponse>;
export declare const revokeRole: (garpqhlClient: GraphqlClient, tokenProvider: ManagementTokenProvider, variables: RevokeRoleVariables) => Promise<RevokeRoleResponse>;
export declare const addMember: (garpqhlClient: GraphqlClient, tokenProvider: ManagementTokenProvider, variables: AddMemberVariables) => Promise<AddMemberResponse>;
export declare const moveMembers: (garpqhlClient: GraphqlClient, tokenProvider: ManagementTokenProvider, variables: MoveMembersVariables) => Promise<MoveMembersResponse>;
export declare const getMembersById: (garpqhlClient: GraphqlClient, tokenProvider: ManagementTokenProvider, variables: NodeByIdWithMembersVariables) => Promise<NodeByIdWithMembersResponse>;
export declare const getMembersByCode: (garpqhlClient: GraphqlClient, tokenProvider: ManagementTokenProvider, variables: NodeByCodeWithMembersVariables) => Promise<NodeByCodeWithMembersResponse>;
export declare const sendEmail: (garpqhlClient: GraphqlClient, tokenProvider: AuthenticationTokenProvider | ManagementTokenProvider, variables: SendEmailVariables) => Promise<SendEmailResponse>;
export declare const sendFirstLoginVerifyEmail: (garpqhlClient: GraphqlClient, tokenProvider: AuthenticationTokenProvider | ManagementTokenProvider, variables: SendFirstLoginVerifyEmailVariables) => Promise<SendFirstLoginVerifyEmailResponse>;
export declare const resetPassword: (garpqhlClient: GraphqlClient, tokenProvider: ManagementTokenProvider | AuthenticationTokenProvider, variables: ResetPasswordVariables) => Promise<ResetPasswordResponse>;
export declare const resetPasswordByFirstLoginToken: (garpqhlClient: GraphqlClient, tokenProvider: ManagementTokenProvider | AuthenticationTokenProvider, variables: ResetPasswordByFirstLoginTokenVariables) => Promise<ResetPasswordByFirstLoginTokenResponse>;
export declare const resetPasswordByForceResetToken: (garpqhlClient: GraphqlClient, tokenProvider: ManagementTokenProvider | AuthenticationTokenProvider, variables: ResetPasswordByForceResetTokenVariables) => Promise<ResetPasswordByForceResetTokenResponse>;
export declare const users: (garpqhlClient: GraphqlClient, tokenProvider: ManagementTokenProvider | AuthenticationTokenProvider, variables: UsersVariables) => Promise<UsersResponse>;
export declare const usersWithCustomData: (garpqhlClient: GraphqlClient, tokenProvider: ManagementTokenProvider | AuthenticationTokenProvider, variables: UsersWithCustomDataVariables) => Promise<UsersWithCustomDataResponse>;
export declare const archivedUsers: (garpqhlClient: GraphqlClient, tokenProvider: ManagementTokenProvider | AuthenticationTokenProvider, variables: ArchivedUsersVariables) => Promise<ArchivedUsersResponse>;
export declare const updateUserpool: (garpqhlClient: GraphqlClient, tokenProvider: ManagementTokenProvider | AuthenticationTokenProvider, variables: UpdateUserpoolVariables) => Promise<UpdateUserpoolResponse>;
export declare const updateUser: (garpqhlClient: GraphqlClient, tokenProvider: ManagementTokenProvider | AuthenticationTokenProvider, variables: UpdateUserVariables) => Promise<UpdateUserResponse>;
export declare const searchUser: (garpqhlClient: GraphqlClient, tokenProvider: ManagementTokenProvider | AuthenticationTokenProvider, variables: SearchUserVariables) => Promise<SearchUserResponse>;
export declare const searchUserWithCustomData: (garpqhlClient: GraphqlClient, tokenProvider: ManagementTokenProvider | AuthenticationTokenProvider, variables: SearchUserWithCustomDataVariables) => Promise<SearchUserWithCustomDataResponse>;
export declare const findUser: (garpqhlClient: GraphqlClient, tokenProvider: ManagementTokenProvider | AuthenticationTokenProvider, variables: FindUserVariables) => Promise<FindUserResponse>;
export declare const findUserWithCustomData: (garpqhlClient: GraphqlClient, tokenProvider: ManagementTokenProvider | AuthenticationTokenProvider, variables: FindUserWithCustomDataVariables) => Promise<FindUserWithCustomDataResponse>;
export declare const createUser: (garpqhlClient: GraphqlClient, tokenProvider: ManagementTokenProvider | AuthenticationTokenProvider, variables: CreateUserVariables) => Promise<CreateUserResponse>;
export declare const deleteUser: (garpqhlClient: GraphqlClient, tokenProvider: ManagementTokenProvider | AuthenticationTokenProvider, variables: DeleteUserVariables) => Promise<DeleteUserResponse>;
export declare const deleteUsers: (garpqhlClient: GraphqlClient, tokenProvider: ManagementTokenProvider | AuthenticationTokenProvider, variables: DeleteUsersVariables) => Promise<DeleteUsersResponse>;
export declare const roles: (garpqhlClient: GraphqlClient, tokenProvider: ManagementTokenProvider | AuthenticationTokenProvider, variables: RolesVariables) => Promise<RolesResponse>;
export declare const role: (garpqhlClient: GraphqlClient, tokenProvider: ManagementTokenProvider | AuthenticationTokenProvider, variables: RoleVariables) => Promise<RoleResponse>;
export declare const roleWithUsers: (garpqhlClient: GraphqlClient, tokenProvider: ManagementTokenProvider | AuthenticationTokenProvider, variables: RoleWithUsersVariables) => Promise<RoleWithUsersResponse>;
export declare const roleWithUsersWithCustomData: (garpqhlClient: GraphqlClient, tokenProvider: ManagementTokenProvider | AuthenticationTokenProvider, variables: RoleWithUsersWithCustomDataVariables) => Promise<RoleWithUsersWithCustomDataResponse>;
export declare const updateRole: (garpqhlClient: GraphqlClient, tokenProvider: ManagementTokenProvider | AuthenticationTokenProvider, variables: UpdateRoleVariables) => Promise<UpdateRoleResponse>;
export declare const addNode: (garpqhlClient: GraphqlClient, tokenProvider: ManagementTokenProvider | AuthenticationTokenProvider, variables: AddNodeV2Variables) => Promise<AddNodeV2Response>;
export declare const updateNode: (garpqhlClient: GraphqlClient, tokenProvider: ManagementTokenProvider | AuthenticationTokenProvider, variables: UpdateNodeVariables) => Promise<UpdateNodeResponse>;
export declare const deleteNode: (garpqhlClient: GraphqlClient, tokenProvider: ManagementTokenProvider | AuthenticationTokenProvider, variables: DeleteNodeVariables) => Promise<DeleteNodeResponse>;
export declare const nodeById: (garpqhlClient: GraphqlClient, tokenProvider: ManagementTokenProvider | AuthenticationTokenProvider, variables: NodeByIdVariables) => Promise<NodeByIdResponse>;
export declare const moveNode: (garpqhlClient: GraphqlClient, tokenProvider: ManagementTokenProvider | AuthenticationTokenProvider, variables: MoveNodeVariables) => Promise<MoveNodeResponse>;
export declare const removeMembers: (garpqhlClient: GraphqlClient, tokenProvider: ManagementTokenProvider | AuthenticationTokenProvider, variables: RemoveMemberVariables) => Promise<RemoveMemberResponse>;
export declare const refreshToken: (garpqhlClient: GraphqlClient, tokenProvider: ManagementTokenProvider | AuthenticationTokenProvider, variables: RefreshTokenVariables) => Promise<RefreshTokenResponse>;
export declare const isUserExists: (garpqhlClient: GraphqlClient, tokenProvider: ManagementTokenProvider | AuthenticationTokenProvider, variables: IsUserExistsVariables) => Promise<IsUserExistsResponse>;
export declare const updatePassword: (garpqhlClient: GraphqlClient, tokenProvider: ManagementTokenProvider | AuthenticationTokenProvider, variables: UpdatePasswordVariables) => Promise<UpdatePasswordResponse>;
export declare const updatePhone: (garpqhlClient: GraphqlClient, tokenProvider: ManagementTokenProvider | AuthenticationTokenProvider, variables: UpdatePhoneVariables) => Promise<UpdatePhoneResponse>;
export declare const updateEmail: (garpqhlClient: GraphqlClient, tokenProvider: ManagementTokenProvider | AuthenticationTokenProvider, variables: UpdateEmailVariables) => Promise<UpdateEmailResponse>;
export declare const bindPhone: (garpqhlClient: GraphqlClient, tokenProvider: ManagementTokenProvider | AuthenticationTokenProvider, variables: BindPhoneVariables) => Promise<BindPhoneResponse>;
export declare const bindEmail: (garpqhlClient: GraphqlClient, tokenProvider: ManagementTokenProvider | AuthenticationTokenProvider, variables: BindEmailVariables) => Promise<BindEmailResponse>;
export declare const unbindPhone: (garpqhlClient: GraphqlClient, tokenProvider: ManagementTokenProvider | AuthenticationTokenProvider, variables: UnbindPhoneVariables) => Promise<UnbindPhoneResponse>;
export declare const userBatch: (garpqhlClient: GraphqlClient, tokenProvider: ManagementTokenProvider | AuthenticationTokenProvider, variables: UserBatchVariables) => Promise<UserBatchResponse>;
export declare const userBatchWithCustomData: (garpqhlClient: GraphqlClient, tokenProvider: ManagementTokenProvider | AuthenticationTokenProvider, variables: UserBatchWithCustomDataVariables) => Promise<UserBatchWithCustomDataResponse>;
export declare const getUserRoles: (garpqhlClient: GraphqlClient, tokenProvider: ManagementTokenProvider | AuthenticationTokenProvider, variables: GetUserRolesVariables) => Promise<GetUserRolesResponse>;
export declare const getUserDepartments: (garpqhlClient: GraphqlClient, tokenProvider: ManagementTokenProvider | AuthenticationTokenProvider, variables: GetUserDepartmentsVariables) => Promise<GetUserDepartmentsResponse>;
export declare const setMainDepartment: (garpqhlClient: GraphqlClient, tokenProvider: ManagementTokenProvider | AuthenticationTokenProvider, variables: SetMainDepartmentVariables) => Promise<SetMainDepartmentResponse>;
export declare const allow: (garpqhlClient: GraphqlClient, tokenProvider: ManagementTokenProvider | AuthenticationTokenProvider, variables: AllowVariables) => Promise<AllowResponse>;
export declare const getWhiteList: (garpqhlClient: GraphqlClient, tokenProvider: ManagementTokenProvider | AuthenticationTokenProvider, variables: WhitelistVariables) => Promise<WhitelistResponse>;
export declare const removeWhiteList: (garpqhlClient: GraphqlClient, tokenProvider: ManagementTokenProvider | AuthenticationTokenProvider, variables: RemoveWhitelistVariables) => Promise<RemoveWhitelistResponse>;
export declare const addWhiteList: (garpqhlClient: GraphqlClient, tokenProvider: ManagementTokenProvider | AuthenticationTokenProvider, variables: AddWhitelistVariables) => Promise<AddWhitelistResponse>;
export declare const udv: (garpqhlClient: GraphqlClient, tokenProvider: ManagementTokenProvider | AuthenticationTokenProvider, variables: UdvVariables) => Promise<UdvResponse>;
export declare const udfValueBatch: (garpqhlClient: GraphqlClient, tokenProvider: ManagementTokenProvider | AuthenticationTokenProvider, variables: UdfValueBatchVariables) => Promise<UdfValueBatchResponse>;
export declare const setUdv: (garpqhlClient: GraphqlClient, tokenProvider: ManagementTokenProvider | AuthenticationTokenProvider, variables: SetUdvVariables) => Promise<SetUdvResponse>;
export declare const setUdvBatch: (garpqhlClient: GraphqlClient, tokenProvider: ManagementTokenProvider | AuthenticationTokenProvider, variables: SetUdvBatchVariables) => Promise<SetUdvBatchResponse>;
export declare const setUdfValueBatch: (garpqhlClient: GraphqlClient, tokenProvider: ManagementTokenProvider | AuthenticationTokenProvider, variables: SetUdfValueBatchVariables) => Promise<SetUdfValueBatchResponse>;
export declare const removeUdv: (garpqhlClient: GraphqlClient, tokenProvider: ManagementTokenProvider | AuthenticationTokenProvider, variables: RemoveUdvVariables) => Promise<RemoveUdvResponse>;
export declare const setUdf: (garpqhlClient: GraphqlClient, tokenProvider: ManagementTokenProvider | AuthenticationTokenProvider, variables: SetUdfVariables) => Promise<SetUdfResponse>;
export declare const removeUdf: (garpqhlClient: GraphqlClient, tokenProvider: ManagementTokenProvider | AuthenticationTokenProvider, variables: RemoveUdfVariables) => Promise<RemoveUdfResponse>;
export declare const udf: (garpqhlClient: GraphqlClient, tokenProvider: ManagementTokenProvider | AuthenticationTokenProvider, variables: UdfVariables) => Promise<UdfResponse>;
export declare const deleteRole: (garpqhlClient: GraphqlClient, tokenProvider: ManagementTokenProvider | AuthenticationTokenProvider, variables: DeleteRoleVariables) => Promise<DeleteRoleResponse>;
export declare const deleteRoles: (garpqhlClient: GraphqlClient, tokenProvider: ManagementTokenProvider | AuthenticationTokenProvider, variables: DeleteRolesVariables) => Promise<DeleteRolesResponse>;
export declare const policies: (garpqhlClient: GraphqlClient, tokenProvider: ManagementTokenProvider | AuthenticationTokenProvider, variables: PoliciesVariables) => Promise<PoliciesResponse>;
export declare const createPolicy: (garpqhlClient: GraphqlClient, tokenProvider: ManagementTokenProvider | AuthenticationTokenProvider, variables: CreatePolicyVariables) => Promise<CreatePolicyResponse>;
export declare const policy: (garpqhlClient: GraphqlClient, tokenProvider: ManagementTokenProvider | AuthenticationTokenProvider, variables: PolicyVariables) => Promise<PolicyResponse>;
export declare const updatePolicy: (garpqhlClient: GraphqlClient, tokenProvider: ManagementTokenProvider | AuthenticationTokenProvider, variables: UpdatePolicyVariables) => Promise<UpdatePolicyResponse>;
export declare const deletePolicy: (garpqhlClient: GraphqlClient, tokenProvider: ManagementTokenProvider | AuthenticationTokenProvider, variables: DeletePolicyVariables) => Promise<DeletePolicyResponse>;
export declare const deletePolicies: (garpqhlClient: GraphqlClient, tokenProvider: ManagementTokenProvider | AuthenticationTokenProvider, variables: DeletePoliciesVariables) => Promise<DeletePoliciesResponse>;
export declare const policyAssignments: (garpqhlClient: GraphqlClient, tokenProvider: ManagementTokenProvider | AuthenticationTokenProvider, variables: PolicyAssignmentsVariables) => Promise<PolicyAssignmentsResponse>;
export declare const addPolicyAssignments: (garpqhlClient: GraphqlClient, tokenProvider: ManagementTokenProvider | AuthenticationTokenProvider, variables: AddPolicyAssignmentsVariables) => Promise<AddPolicyAssignmentsResponse>;
export declare const removePolicyAssignments: (garpqhlClient: GraphqlClient, tokenProvider: ManagementTokenProvider | AuthenticationTokenProvider, variables: RemovePolicyAssignmentsVariables) => Promise<RemovePolicyAssignmentsResponse>;
export declare const enablePolicyAssignment: (garpqhlClient: GraphqlClient, tokenProvider: ManagementTokenProvider | AuthenticationTokenProvider, variables: EnablePolicyAssignmentVariables) => Promise<EnablePolicyAssignmentResponse>;
export declare const disablePolicyAssignment: (garpqhlClient: GraphqlClient, tokenProvider: ManagementTokenProvider | AuthenticationTokenProvider, variables: DisbalePolicyAssignmentVariables) => Promise<DisbalePolicyAssignmentResponse>;
export declare const checkLoginStatus: (garpqhlClient: GraphqlClient, tokenProvider: ManagementTokenProvider | AuthenticationTokenProvider, variables: CheckLoginStatusVariables) => Promise<CheckLoginStatusResponse>;
export declare const getGroups: (garpqhlClient: GraphqlClient, tokenProvider: ManagementTokenProvider | AuthenticationTokenProvider, variables: GroupsVariables) => Promise<GroupsResponse>;
export declare const group: (garpqhlClient: GraphqlClient, tokenProvider: ManagementTokenProvider | AuthenticationTokenProvider, variables: GroupVariables) => Promise<GroupResponse>;
export declare const groupWithUsers: (garpqhlClient: GraphqlClient, tokenProvider: ManagementTokenProvider | AuthenticationTokenProvider, variables: GroupWithUsersVariables) => Promise<GroupWithUsersResponse>;
export declare const groupWithUsersWithCustomData: (garpqhlClient: GraphqlClient, tokenProvider: ManagementTokenProvider | AuthenticationTokenProvider, variables: GroupWithUsersWithCustomDataVariables) => Promise<GroupWithUsersWithCustomDataResponse>;
export declare const createGroup: (garpqhlClient: GraphqlClient, tokenProvider: ManagementTokenProvider | AuthenticationTokenProvider, variables: CreateGroupVariables) => Promise<CreateGroupResponse>;
export declare const updateGroup: (garpqhlClient: GraphqlClient, tokenProvider: ManagementTokenProvider | AuthenticationTokenProvider, variables: UpdateGroupVariables) => Promise<UpdateGroupResponse>;
export declare const deleteGroups: (garpqhlClient: GraphqlClient, tokenProvider: ManagementTokenProvider | AuthenticationTokenProvider, variables: DeleteGroupsVariables) => Promise<DeleteGroupsResponse>;
export declare const addUserToGroup: (garpqhlClient: GraphqlClient, tokenProvider: ManagementTokenProvider | AuthenticationTokenProvider, variables: AddUserToGroupVariables) => Promise<AddUserToGroupResponse>;
export declare const removeUserFromGroup: (garpqhlClient: GraphqlClient, tokenProvider: ManagementTokenProvider | AuthenticationTokenProvider, variables: RemoveUserFromGroupVariables) => Promise<RemoveUserFromGroupResponse>;
export declare const getUserGroups: (garpqhlClient: GraphqlClient, tokenProvider: ManagementTokenProvider | AuthenticationTokenProvider, variables: GetUserGroupsVariables) => Promise<GetUserGroupsResponse>;
export declare const unbindEmail: (garpqhlClient: GraphqlClient, tokenProvider: ManagementTokenProvider | AuthenticationTokenProvider, variables: UnbindEmailVariables) => Promise<UnbindEmailResponse>;
export declare const getAccessToken: (garpqhlClient: GraphqlClient, variables: AccessTokenVariables) => Promise<AccessTokenResponse>;
export declare const refreshAccessToken: (garpqhlClient: GraphqlClient, variables: RefreshAccessTokenVariables) => Promise<RefreshAccessTokenResponse>;
export declare const listUserAuthorizedResources: (garpqhlClient: GraphqlClient, tokenProvider: ManagementTokenProvider | AuthenticationTokenProvider, variables: ListUserAuthorizedResourcesVariables) => Promise<ListUserAuthorizedResourcesResponse>;
export declare const listRoleAuthorizedResources: (garpqhlClient: GraphqlClient, tokenProvider: ManagementTokenProvider | AuthenticationTokenProvider, variables: ListRoleAuthorizedResourcesVariables) => Promise<ListRoleAuthorizedResourcesResponse>;
export declare const listGroupAuthorizedResources: (garpqhlClient: GraphqlClient, tokenProvider: ManagementTokenProvider | AuthenticationTokenProvider, variables: ListGroupAuthorizedResourcesVariables) => Promise<ListGroupAuthorizedResourcesResponse>;
export declare const listNodeByIdAuthorizedResources: (garpqhlClient: GraphqlClient, tokenProvider: ManagementTokenProvider | AuthenticationTokenProvider, variables: ListNodeByIdAuthorizedResourcesVariables) => Promise<ListNodeByIdAuthorizedResourcesResponse>;
export declare const listNodeByCodeAuthorizedResources: (garpqhlClient: GraphqlClient, tokenProvider: ManagementTokenProvider | AuthenticationTokenProvider, variables: ListNodeByCodeAuthorizedResourcesVariables) => Promise<ListNodeByCodeAuthorizedResourcesResponse>;
export declare const listAuthorizedResources: (garpqhlClient: GraphqlClient, tokenProvider: ManagementTokenProvider | AuthenticationTokenProvider, variables: AuthorizedResourcesVariables) => Promise<AuthorizedResourcesResponse>;
export declare const authorizeResource: (garpqhlClient: GraphqlClient, tokenProvider: ManagementTokenProvider | AuthenticationTokenProvider, variables: AuthorizeResourceVariables) => Promise<AuthorizeResourceResponse>;
export declare const authorizedTargets: (garpqhlClient: GraphqlClient, tokenProvider: ManagementTokenProvider | AuthenticationTokenProvider, variables: AuthorizedTargetsVariables) => Promise<AuthorizedTargetsResponse>;
export declare const searchNodes: (garpqhlClient: GraphqlClient, tokenProvider: ManagementTokenProvider | AuthenticationTokenProvider, variables: SearchNodesVariables) => Promise<SearchNodesResponse>;
