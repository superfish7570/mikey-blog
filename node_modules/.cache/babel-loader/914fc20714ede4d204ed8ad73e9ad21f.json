{"ast":null,"code":"var $8zHUo$sortablejs = require(\"sortablejs\");\n\nvar $8zHUo$classnames = require(\"classnames\");\n\nvar $8zHUo$react = require(\"react\");\n\nvar $8zHUo$tinyinvariant = require(\"tiny-invariant\");\n\nfunction $parcel$interopDefault(a) {\n  return a && a.__esModule ? a.default : a;\n}\n\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {\n    get: v,\n    set: s,\n    enumerable: true,\n    configurable: true\n  });\n}\n\nfunction $parcel$exportWildcard(dest, source) {\n  Object.keys(source).forEach(function (key) {\n    if (key === 'default' || key === '__esModule' || dest.hasOwnProperty(key)) {\n      return;\n    }\n\n    Object.defineProperty(dest, key, {\n      enumerable: true,\n      get: function get() {\n        return source[key];\n      }\n    });\n  });\n  return dest;\n}\n\n$parcel$export(module.exports, \"Sortable\", () => $882b6d93070905b3$re_export$Sortable);\n$parcel$export(module.exports, \"Direction\", () => $882b6d93070905b3$re_export$Direction);\n$parcel$export(module.exports, \"DOMRect\", () => $882b6d93070905b3$re_export$DOMRect);\n$parcel$export(module.exports, \"GroupOptions\", () => $882b6d93070905b3$re_export$GroupOptions);\n$parcel$export(module.exports, \"MoveEvent\", () => $882b6d93070905b3$re_export$MoveEvent);\n$parcel$export(module.exports, \"Options\", () => $882b6d93070905b3$re_export$Options);\n$parcel$export(module.exports, \"PullResult\", () => $882b6d93070905b3$re_export$PullResult);\n$parcel$export(module.exports, \"PutResult\", () => $882b6d93070905b3$re_export$PutResult);\n$parcel$export(module.exports, \"SortableEvent\", () => $882b6d93070905b3$re_export$SortableEvent);\n$parcel$export(module.exports, \"SortableOptions\", () => $882b6d93070905b3$re_export$SortableOptions);\n$parcel$export(module.exports, \"Utils\", () => $882b6d93070905b3$re_export$Utils);\n$parcel$export(module.exports, \"ReactSortable\", () => $7fe8e3ea572bda7a$export$11bbed9ee0012c13);\n\nfunction $eb03e74f8f7db1f3$export$1d0aa160432dfea5(node) {\n  if (node.parentElement !== null) node.parentElement.removeChild(node);\n}\n\nfunction $eb03e74f8f7db1f3$export$6d240faa51aa562f(parent, newChild, index) {\n  const refChild = parent.children[index] || null;\n  parent.insertBefore(newChild, refChild);\n}\n\nfunction $eb03e74f8f7db1f3$export$d7d742816c28cf91(customs) {\n  $eb03e74f8f7db1f3$export$77f49a256021c8de(customs);\n  $eb03e74f8f7db1f3$export$a6177d5829f70ebc(customs);\n}\n\nfunction $eb03e74f8f7db1f3$export$77f49a256021c8de(customs) {\n  customs.forEach(curr => $eb03e74f8f7db1f3$export$1d0aa160432dfea5(curr.element));\n}\n\nfunction $eb03e74f8f7db1f3$export$a6177d5829f70ebc(customs) {\n  customs.forEach(curr => {\n    $eb03e74f8f7db1f3$export$6d240faa51aa562f(curr.parentElement, curr.element, curr.oldIndex);\n  });\n}\n\nfunction $eb03e74f8f7db1f3$export$4655efe700f887a(evt, list) {\n  const mode = $eb03e74f8f7db1f3$export$1fc0f6205829e19c(evt);\n  const parentElement = {\n    parentElement: evt.from\n  };\n  let custom = [];\n\n  switch (mode) {\n    case \"normal\":\n      /* eslint-disable */\n      const item = {\n        element: evt.item,\n        newIndex: evt.newIndex,\n        oldIndex: evt.oldIndex,\n        parentElement: evt.from\n      };\n      custom = [item];\n      break;\n\n    case \"swap\":\n      const drag = {\n        element: evt.item,\n        oldIndex: evt.oldIndex,\n        newIndex: evt.newIndex,\n        ...parentElement\n      };\n      const swap = {\n        element: evt.swapItem,\n        oldIndex: evt.newIndex,\n        newIndex: evt.oldIndex,\n        ...parentElement\n      };\n      custom = [drag, swap];\n      break;\n\n    case \"multidrag\":\n      custom = evt.oldIndicies.map((curr, index) => ({\n        element: curr.multiDragElement,\n        oldIndex: curr.index,\n        newIndex: evt.newIndicies[index].index,\n        ...parentElement\n      }));\n      break;\n  }\n  /* eslint-enable */\n\n\n  const customs = $eb03e74f8f7db1f3$export$bc06a3af7dc65f53(custom, list);\n  return customs;\n}\n\nfunction $eb03e74f8f7db1f3$export$c25cf8080bd305ec(normalized, list) {\n  const a = $eb03e74f8f7db1f3$export$be2da95e6167b0bd(normalized, list);\n  const b = $eb03e74f8f7db1f3$export$eca851ee65ae17e4(normalized, a);\n  return b;\n}\n\nfunction $eb03e74f8f7db1f3$export$be2da95e6167b0bd(normalized, list) {\n  const newList = [...list];\n  normalized.concat().reverse().forEach(curr => newList.splice(curr.oldIndex, 1));\n  return newList;\n}\n\nfunction $eb03e74f8f7db1f3$export$eca851ee65ae17e4(normalized, list, evt, clone) {\n  const newList = [...list];\n  normalized.forEach(curr => {\n    const newItem = clone && evt && clone(curr.item, evt);\n    newList.splice(curr.newIndex, 0, newItem || curr.item);\n  });\n  return newList;\n}\n\nfunction $eb03e74f8f7db1f3$export$1fc0f6205829e19c(evt) {\n  if (evt.oldIndicies && evt.oldIndicies.length > 0) return \"multidrag\";\n  if (evt.swapItem) return \"swap\";\n  return \"normal\";\n}\n\nfunction $eb03e74f8f7db1f3$export$bc06a3af7dc65f53(inputs, list) {\n  const normalized = inputs.map(curr => ({ ...curr,\n    item: list[curr.oldIndex]\n  })).sort((a, b) => a.oldIndex - b.oldIndex);\n  return normalized;\n}\n\nfunction $eb03e74f8f7db1f3$export$7553c81e62e31b7e(props) {\n  /* eslint-disable */\n  const {\n    list: // react sortable props\n    list,\n    setList: setList,\n    children: children,\n    tag: tag,\n    style: style,\n    className: className,\n    clone: clone,\n    onAdd: // sortable options that have methods we want to overwrite\n    onAdd,\n    onChange: onChange,\n    onChoose: onChoose,\n    onClone: onClone,\n    onEnd: onEnd,\n    onFilter: onFilter,\n    onRemove: onRemove,\n    onSort: onSort,\n    onStart: onStart,\n    onUnchoose: onUnchoose,\n    onUpdate: onUpdate,\n    onMove: onMove,\n    onSpill: onSpill,\n    onSelect: onSelect,\n    onDeselect: onDeselect,\n    ...options\n  } = props;\n  /* eslint-enable */\n\n  return options;\n}\n/** Holds a global reference for which react element is being dragged */\n// @todo - use context to manage this. How does one use 2 different providers?\n\n\nconst $7fe8e3ea572bda7a$var$store = {\n  dragging: null\n};\n\nclass $7fe8e3ea572bda7a$export$11bbed9ee0012c13 extends (0, $8zHUo$react.Component) {\n  /* eslint-disable-next-line */\n  static defaultProps = {\n    clone: item => item\n  };\n\n  constructor(props) {\n    super(props); // @todo forward ref this component\n\n    this.ref = /*#__PURE__*/(0, $8zHUo$react.createRef)(); // make all state false because we can't change sortable unless a mouse gesture is made.\n\n    const newList = [...props.list].map(item => Object.assign(item, {\n      chosen: false,\n      selected: false\n    }));\n    props.setList(newList, this.sortable, $7fe8e3ea572bda7a$var$store);\n    (0, $parcel$interopDefault($8zHUo$tinyinvariant))( //@ts-expect-error: Doesn't exist. Will deprecate soon.\n    !props.plugins, `\nPlugins prop is no longer supported.\nInstead, mount it with \"Sortable.mount(new MultiDrag())\"\nPlease read the updated README.md at https://github.com/SortableJS/react-sortablejs.\n      `);\n  }\n\n  componentDidMount() {\n    if (this.ref.current === null) return;\n    const newOptions = this.makeOptions();\n    (0, $parcel$interopDefault($8zHUo$sortablejs)).create(this.ref.current, newOptions);\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.disabled !== this.props.disabled && this.sortable) this.sortable.option(\"disabled\", this.props.disabled);\n  }\n\n  render() {\n    const {\n      tag: tag,\n      style: style,\n      className: className,\n      id: id\n    } = this.props;\n    const classicProps = {\n      style: style,\n      className: className,\n      id: id\n    }; // if no tag, default to a `div` element.\n\n    const newTag = !tag || tag === null ? \"div\" : tag;\n    return /*#__PURE__*/(0, $8zHUo$react.createElement)(newTag, {\n      // @todo - find a way (perhaps with the callback) to allow AntD components to work\n      ref: this.ref,\n      ...classicProps\n    }, this.getChildren());\n  }\n\n  getChildren() {\n    const {\n      children: children,\n      dataIdAttr: dataIdAttr,\n      selectedClass = \"sortable-selected\",\n      chosenClass = \"sortable-chosen\",\n\n      /* eslint-disable */\n      dragClass = \"sortable-drag\",\n      fallbackClass = \"sortable-falback\",\n      ghostClass = \"sortable-ghost\",\n      swapClass = \"sortable-swap-highlight\",\n\n      /* eslint-enable */\n      filter = \"sortable-filter\",\n      list: list\n    } = this.props; // if no children, don't do anything.\n\n    if (!children || children == null) return null;\n    const dataid = dataIdAttr || \"data-id\";\n    /* eslint-disable-next-line */\n\n    return (0, $8zHUo$react.Children).map(children, (child, index) => {\n      if (child === undefined) return undefined;\n      const item = list[index] || {};\n      const {\n        className: prevClassName\n      } = child.props; // @todo - handle the function if avalable. I don't think anyone will be doing this soon.\n\n      const filtered = typeof filter === \"string\" && {\n        [filter.replace(\".\", \"\")]: !!item.filtered\n      };\n      const className = (0, $parcel$interopDefault($8zHUo$classnames))(prevClassName, {\n        [selectedClass]: item.selected,\n        [chosenClass]: item.chosen,\n        ...filtered\n      });\n      return /*#__PURE__*/(0, $8zHUo$react.cloneElement)(child, {\n        [dataid]: child.key,\n        className: className\n      });\n    });\n  }\n  /** Appends the `sortable` property to this component */\n\n\n  get sortable() {\n    const el = this.ref.current;\n    if (el === null) return null;\n    const key = Object.keys(el).find(k => k.includes(\"Sortable\"));\n    if (!key) return null; //@ts-expect-error: fix me.\n\n    return el[key];\n  }\n  /** Converts all the props from `ReactSortable` into the `options` object that `Sortable.create(el, [options])` can use. */\n\n\n  makeOptions() {\n    const DOMHandlers = [\"onAdd\", \"onChoose\", \"onDeselect\", \"onEnd\", \"onRemove\", \"onSelect\", \"onSpill\", \"onStart\", \"onUnchoose\", \"onUpdate\"];\n    const NonDOMHandlers = [\"onChange\", \"onClone\", \"onFilter\", \"onSort\"];\n    const newOptions = (0, $eb03e74f8f7db1f3$export$7553c81e62e31b7e)(this.props);\n    DOMHandlers.forEach(name => newOptions[name] = this.prepareOnHandlerPropAndDOM(name));\n    NonDOMHandlers.forEach(name => newOptions[name] = this.prepareOnHandlerProp(name));\n    /** onMove has 2 arguments and needs to be handled seperately. */\n\n    const onMove1 = (evt, originalEvt) => {\n      const {\n        onMove: onMove\n      } = this.props;\n      const defaultValue = evt.willInsertAfter || -1;\n      if (!onMove) return defaultValue;\n      const result = onMove(evt, originalEvt, this.sortable, $7fe8e3ea572bda7a$var$store);\n      if (typeof result === \"undefined\") return false;\n      return result;\n    };\n\n    return { ...newOptions,\n      onMove: onMove1\n    };\n  }\n  /** Prepares a method that will be used in the sortable options to call an `on[Handler]` prop & an `on[Handler]` ReactSortable method.  */\n\n\n  prepareOnHandlerPropAndDOM(evtName) {\n    return evt => {\n      // call the component prop\n      this.callOnHandlerProp(evt, evtName); // calls state change\n      //@ts-expect-error: until @types multidrag item is in\n\n      this[evtName](evt);\n    };\n  }\n  /** Prepares a method that will be used in the sortable options to call an `on[Handler]` prop */\n\n\n  prepareOnHandlerProp(evtName) {\n    return evt => {\n      // call the component prop\n      this.callOnHandlerProp(evt, evtName);\n    };\n  }\n  /** Calls the `props.on[Handler]` function */\n\n\n  callOnHandlerProp(evt, evtName) {\n    const propEvent = this.props[evtName];\n    if (propEvent) propEvent(evt, this.sortable, $7fe8e3ea572bda7a$var$store);\n  } // SORTABLE DOM HANDLING\n\n\n  onAdd(evt) {\n    const {\n      list: list,\n      setList: setList,\n      clone: clone\n    } = this.props;\n    /* eslint-disable-next-line */\n\n    const otherList = [...$7fe8e3ea572bda7a$var$store.dragging.props.list];\n    const customs = (0, $eb03e74f8f7db1f3$export$4655efe700f887a)(evt, otherList);\n    (0, $eb03e74f8f7db1f3$export$77f49a256021c8de)(customs);\n    const newList = (0, $eb03e74f8f7db1f3$export$eca851ee65ae17e4)(customs, list, evt, clone).map(item => Object.assign(item, {\n      selected: false\n    }));\n    setList(newList, this.sortable, $7fe8e3ea572bda7a$var$store);\n  }\n\n  onRemove(evt) {\n    const {\n      list: list,\n      setList: setList\n    } = this.props;\n    const mode = (0, $eb03e74f8f7db1f3$export$1fc0f6205829e19c)(evt);\n    const customs = (0, $eb03e74f8f7db1f3$export$4655efe700f887a)(evt, list);\n    (0, $eb03e74f8f7db1f3$export$a6177d5829f70ebc)(customs);\n    let newList = [...list]; // remove state if not in clone mode. otherwise, keep.\n\n    if (evt.pullMode !== \"clone\") newList = (0, $eb03e74f8f7db1f3$export$be2da95e6167b0bd)(customs, newList);else {\n      // switch used to get the clone\n      let customClones = customs;\n\n      switch (mode) {\n        case \"multidrag\":\n          customClones = customs.map((item, index) => ({ ...item,\n            element: evt.clones[index]\n          }));\n          break;\n\n        case \"normal\":\n          customClones = customs.map(item => ({ ...item,\n            element: evt.clone\n          }));\n          break;\n\n        case \"swap\":\n        default:\n          (0, $parcel$interopDefault($8zHUo$tinyinvariant))(true, `mode \"${mode}\" cannot clone. Please remove \"props.clone\" from <ReactSortable/> when using the \"${mode}\" plugin`);\n      }\n\n      (0, $eb03e74f8f7db1f3$export$77f49a256021c8de)(customClones); // replace selected items with cloned items\n\n      customs.forEach(curr => {\n        const index = curr.oldIndex;\n        /* eslint-disable-next-line */\n\n        const newItem = this.props.clone(curr.item, evt);\n        newList.splice(index, 1, newItem);\n      });\n    } // remove item.selected from list\n\n    newList = newList.map(item => Object.assign(item, {\n      selected: false\n    }));\n    setList(newList, this.sortable, $7fe8e3ea572bda7a$var$store);\n  }\n\n  onUpdate(evt) {\n    const {\n      list: list,\n      setList: setList\n    } = this.props;\n    const customs = (0, $eb03e74f8f7db1f3$export$4655efe700f887a)(evt, list);\n    (0, $eb03e74f8f7db1f3$export$77f49a256021c8de)(customs);\n    (0, $eb03e74f8f7db1f3$export$a6177d5829f70ebc)(customs);\n    const newList = (0, $eb03e74f8f7db1f3$export$c25cf8080bd305ec)(customs, list);\n    return setList(newList, this.sortable, $7fe8e3ea572bda7a$var$store);\n  }\n\n  onStart() {\n    $7fe8e3ea572bda7a$var$store.dragging = this;\n  }\n\n  onEnd() {\n    $7fe8e3ea572bda7a$var$store.dragging = null;\n  }\n\n  onChoose(evt) {\n    const {\n      list: list,\n      setList: setList\n    } = this.props;\n    const newList = list.map((item, index) => {\n      let newItem = item;\n      if (index === evt.oldIndex) newItem = Object.assign(item, {\n        chosen: true\n      });\n      return newItem;\n    });\n    setList(newList, this.sortable, $7fe8e3ea572bda7a$var$store);\n  }\n\n  onUnchoose(evt) {\n    const {\n      list: list,\n      setList: setList\n    } = this.props;\n    const newList = list.map((item, index) => {\n      let newItem = item;\n      if (index === evt.oldIndex) newItem = Object.assign(newItem, {\n        chosen: false\n      });\n      return newItem;\n    });\n    setList(newList, this.sortable, $7fe8e3ea572bda7a$var$store);\n  }\n\n  onSpill(evt) {\n    const {\n      removeOnSpill: removeOnSpill,\n      revertOnSpill: revertOnSpill\n    } = this.props;\n    if (removeOnSpill && !revertOnSpill) (0, $eb03e74f8f7db1f3$export$1d0aa160432dfea5)(evt.item);\n  }\n\n  onSelect(evt) {\n    const {\n      list: list,\n      setList: setList\n    } = this.props;\n    const newList = list.map(item => Object.assign(item, {\n      selected: false\n    }));\n    evt.newIndicies.forEach(curr => {\n      const index = curr.index;\n\n      if (index === -1) {\n        console.log(`\"${evt.type}\" had indice of \"${curr.index}\", which is probably -1 and doesn't usually happen here.`);\n        console.log(evt);\n        return;\n      }\n\n      newList[index].selected = true;\n    });\n    setList(newList, this.sortable, $7fe8e3ea572bda7a$var$store);\n  }\n\n  onDeselect(evt) {\n    const {\n      list: list,\n      setList: setList\n    } = this.props;\n    const newList = list.map(item => Object.assign(item, {\n      selected: false\n    }));\n    evt.newIndicies.forEach(curr => {\n      const index = curr.index;\n      if (index === -1) return;\n      newList[index].selected = true;\n    });\n    setList(newList, this.sortable, $7fe8e3ea572bda7a$var$store);\n  }\n\n}\n\nvar $faefaad95e5fcca0$exports = {};\n$parcel$exportWildcard(module.exports, $faefaad95e5fcca0$exports);","map":{"version":3,"sources":["src/react-sortable.tsx","src/util.ts"],"names":[],"mappings":"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","sourcesContent":["import classNames from \"classnames\";\nimport {\n  Children,\n  cloneElement,\n  Component,\n  createElement,\n  createRef,\n  ReactElement,\n  RefObject,\n} from \"react\";\nimport Sortable, { MoveEvent, Options, SortableEvent } from \"sortablejs\";\nimport invariant from \"tiny-invariant\";\nimport {\n  AllMethodsExceptMove,\n  HandledMethodNames,\n  ItemInterface,\n  ReactSortableProps,\n  Store,\n  UnHandledMethodNames,\n} from \"./types\";\nimport {\n  createCustoms,\n  destructurePropsForOptions,\n  getMode,\n  handleStateAdd,\n  handleStateChanges,\n  handleStateRemove,\n  insertNodes,\n  removeNode,\n  removeNodes,\n} from \"./util\";\n\n/** Holds a global reference for which react element is being dragged */\n// @todo - use context to manage this. How does one use 2 different providers?\nconst store: Store = { dragging: null };\n\nexport class ReactSortable<T extends ItemInterface> extends Component<\n  ReactSortableProps<T>\n> {\n  /* eslint-disable-next-line */\n  static defaultProps: Partial<ReactSortableProps<any>> = {\n    clone: (item) => item,\n  };\n\n  private ref: RefObject<HTMLElement>;\n  constructor(props: ReactSortableProps<T>) {\n    super(props);\n    // @todo forward ref this component\n    this.ref = createRef<HTMLElement>();\n\n    // make all state false because we can't change sortable unless a mouse gesture is made.\n    const newList = [...props.list].map((item) =>\n      Object.assign(item, {\n        chosen: false,\n        selected: false,\n      })\n    );\n\n    props.setList(newList, this.sortable, store);\n    invariant(\n      //@ts-expect-error: Doesn't exist. Will deprecate soon.\n      !props.plugins,\n      `\nPlugins prop is no longer supported.\nInstead, mount it with \"Sortable.mount(new MultiDrag())\"\nPlease read the updated README.md at https://github.com/SortableJS/react-sortablejs.\n      `\n    );\n  }\n\n  componentDidMount(): void {\n    if (this.ref.current === null) return;\n    const newOptions = this.makeOptions();\n    Sortable.create(this.ref.current, newOptions);\n  }\n\n  componentDidUpdate(prevProps: ReactSortableProps<T>): void {\n    if (prevProps.disabled !== this.props.disabled && this.sortable) {\n      this.sortable.option(\"disabled\", this.props.disabled);\n    }\n  }\n\n  render(): JSX.Element {\n    const { tag, style, className, id } = this.props;\n    const classicProps = { style, className, id };\n\n    // if no tag, default to a `div` element.\n    const newTag = !tag || tag === null ? \"div\" : tag;\n    return createElement(\n      newTag,\n      {\n        // @todo - find a way (perhaps with the callback) to allow AntD components to work\n        ref: this.ref,\n        ...classicProps,\n      },\n      this.getChildren()\n    );\n  }\n\n  private getChildren() {\n    const {\n      children,\n      dataIdAttr,\n      selectedClass = \"sortable-selected\",\n      chosenClass = \"sortable-chosen\",\n      /* eslint-disable */\n      dragClass = \"sortable-drag\",\n      fallbackClass = \"sortable-falback\",\n      ghostClass = \"sortable-ghost\",\n      swapClass = \"sortable-swap-highlight\",\n      /* eslint-enable */\n      filter = \"sortable-filter\",\n      list,\n    } = this.props;\n\n    // if no children, don't do anything.\n    if (!children || children == null) return null;\n    const dataid = dataIdAttr || \"data-id\";\n    /* eslint-disable-next-line */\n    return Children.map(children as ReactElement<any>[], (child, index) => {\n      if (child === undefined) return undefined;\n\n      const item = list[index] || {};\n      const { className: prevClassName } = child.props;\n\n      // @todo - handle the function if avalable. I don't think anyone will be doing this soon.\n      const filtered = typeof filter === \"string\" && {\n        [filter.replace(\".\", \"\")]: !!item.filtered,\n      };\n\n      const className = classNames(prevClassName, {\n        [selectedClass]: item.selected,\n        [chosenClass]: item.chosen,\n        ...filtered,\n        // [dragClass]: true,\n        // [fallbackClass]: true,\n        // [ghostClass]: true,\n        // [swapClass]: true\n      });\n\n      return cloneElement(child, {\n        [dataid]: child.key,\n        className,\n      });\n    });\n  }\n\n  /** Appends the `sortable` property to this component */\n  private get sortable(): Sortable | null {\n    const el = this.ref.current;\n    if (el === null) return null;\n    const key = Object.keys(el).find((k) => k.includes(\"Sortable\"));\n    if (!key) return null;\n    //@ts-expect-error: fix me.\n    return el[key] as Sortable;\n  }\n\n  /** Converts all the props from `ReactSortable` into the `options` object that `Sortable.create(el, [options])` can use. */\n  makeOptions(): Options {\n    const DOMHandlers: HandledMethodNames[] = [\n      \"onAdd\",\n      \"onChoose\",\n      \"onDeselect\",\n      \"onEnd\",\n      \"onRemove\",\n      \"onSelect\",\n      \"onSpill\",\n      \"onStart\",\n      \"onUnchoose\",\n      \"onUpdate\",\n    ];\n    const NonDOMHandlers: UnHandledMethodNames[] = [\n      \"onChange\",\n      \"onClone\",\n      \"onFilter\",\n      \"onSort\",\n    ];\n    const newOptions: Options = destructurePropsForOptions(this.props);\n    DOMHandlers.forEach(\n      (name) => (newOptions[name] = this.prepareOnHandlerPropAndDOM(name))\n    );\n    NonDOMHandlers.forEach(\n      (name) => (newOptions[name] = this.prepareOnHandlerProp(name))\n    );\n\n    /** onMove has 2 arguments and needs to be handled seperately. */\n    const onMove = (evt: MoveEvent, originalEvt: Event) => {\n      const { onMove } = this.props;\n      const defaultValue = evt.willInsertAfter || -1;\n      if (!onMove) return defaultValue;\n      const result = onMove(evt, originalEvt, this.sortable, store);\n      if (typeof result === \"undefined\") return false;\n      return result;\n    };\n\n    return {\n      ...newOptions,\n      onMove,\n    };\n  }\n\n  /** Prepares a method that will be used in the sortable options to call an `on[Handler]` prop & an `on[Handler]` ReactSortable method.  */\n  prepareOnHandlerPropAndDOM(\n    evtName: HandledMethodNames\n  ): (evt: SortableEvent) => void {\n    return (evt) => {\n      // call the component prop\n      this.callOnHandlerProp(evt, evtName);\n      // calls state change\n      //@ts-expect-error: until @types multidrag item is in\n      this[evtName](evt);\n    };\n  }\n\n  /** Prepares a method that will be used in the sortable options to call an `on[Handler]` prop */\n  prepareOnHandlerProp(\n    evtName: Exclude<AllMethodsExceptMove, HandledMethodNames>\n  ): (evt: SortableEvent) => void {\n    return (evt) => {\n      // call the component prop\n      this.callOnHandlerProp(evt, evtName);\n    };\n  }\n\n  /** Calls the `props.on[Handler]` function */\n  callOnHandlerProp(evt: SortableEvent, evtName: AllMethodsExceptMove): void {\n    const propEvent = this.props[evtName];\n    if (propEvent) propEvent(evt, this.sortable, store);\n  }\n\n  // SORTABLE DOM HANDLING\n\n  onAdd(evt: MultiDragEvent): void {\n    const { list, setList, clone } = this.props;\n    /* eslint-disable-next-line */\n    const otherList = [...store.dragging!.props.list];\n    const customs = createCustoms(evt, otherList);\n    removeNodes(customs);\n\n    const newList = handleStateAdd(customs, list, evt, clone).map((item) =>\n      Object.assign(item, {\n        selected: false,\n      })\n    );\n\n    setList(newList, this.sortable, store);\n  }\n\n  onRemove(evt: MultiDragEvent): void {\n    const { list, setList } = this.props;\n    const mode = getMode(evt);\n    const customs = createCustoms(evt, list);\n    insertNodes(customs);\n\n    let newList = [...list];\n    // remove state if not in clone mode. otherwise, keep.\n    if (evt.pullMode !== \"clone\") newList = handleStateRemove(customs, newList);\n    // if clone, it doesn't really remove. instead it clones in place.\n    // @todo -\n    else {\n      // switch used to get the clone\n      let customClones = customs;\n      switch (mode) {\n        case \"multidrag\":\n          customClones = customs.map((item, index) => ({\n            ...item,\n            element: evt.clones[index],\n          }));\n          break;\n        case \"normal\":\n          customClones = customs.map((item) => ({\n            ...item,\n            element: evt.clone,\n          }));\n          break;\n        case \"swap\":\n        default: {\n          invariant(\n            true,\n            `mode \"${mode}\" cannot clone. Please remove \"props.clone\" from <ReactSortable/> when using the \"${mode}\" plugin`\n          );\n        }\n      }\n      removeNodes(customClones);\n\n      // replace selected items with cloned items\n      customs.forEach((curr) => {\n        const index = curr.oldIndex;\n        /* eslint-disable-next-line */\n        const newItem = this.props.clone!(curr.item, evt);\n        newList.splice(index, 1, newItem);\n      });\n    }\n\n    // remove item.selected from list\n    newList = newList.map((item: T) =>\n      Object.assign(item, {\n        selected: false,\n      })\n    );\n\n    setList(newList, this.sortable, store);\n  }\n\n  onUpdate(evt: MultiDragEvent): void {\n    const { list, setList } = this.props;\n    const customs = createCustoms(evt, list);\n    removeNodes(customs);\n    insertNodes(customs);\n    const newList = handleStateChanges(customs, list);\n    return setList(newList, this.sortable, store);\n  }\n\n  onStart(): void {\n    store.dragging = this;\n  }\n\n  onEnd(): void {\n    store.dragging = null;\n  }\n\n  onChoose(evt: SortableEvent): void {\n    const { list, setList } = this.props;\n    const newList = list.map((item, index) => {\n      let newItem = item;\n      if (index === evt.oldIndex) {\n        newItem = Object.assign(item, {\n          chosen: true,\n        });\n      }\n      return newItem;\n    });\n    setList(newList, this.sortable, store);\n  }\n\n  onUnchoose(evt: SortableEvent): void {\n    const { list, setList } = this.props;\n    const newList = list.map((item, index) => {\n      let newItem = item;\n      if (index === evt.oldIndex) {\n        newItem = Object.assign(newItem, {\n          chosen: false,\n        });\n      }\n      return newItem;\n    });\n    setList(newList, this.sortable, store);\n  }\n\n  onSpill(evt: SortableEvent): void {\n    const { removeOnSpill, revertOnSpill } = this.props;\n    if (removeOnSpill && !revertOnSpill) removeNode(evt.item);\n  }\n\n  onSelect(evt: MultiDragEvent): void {\n    const { list, setList } = this.props;\n    const newList = list.map((item) =>\n      Object.assign(item, {\n        selected: false,\n      })\n    );\n\n    evt.newIndicies.forEach((curr) => {\n      const index = curr.index;\n      if (index === -1) {\n        console.log(\n          `\"${evt.type}\" had indice of \"${curr.index}\", which is probably -1 and doesn't usually happen here.`\n        );\n        console.log(evt);\n        return;\n      }\n      newList[index].selected = true;\n    });\n    setList(newList, this.sortable, store);\n  }\n\n  onDeselect(evt: MultiDragEvent): void {\n    const { list, setList } = this.props;\n    const newList = list.map((item) =>\n      Object.assign(item, {\n        selected: false,\n      })\n    );\n    evt.newIndicies.forEach((curr) => {\n      const index = curr.index;\n      if (index === -1) return;\n      newList[index].selected = true;\n    });\n    setList(newList, this.sortable, store);\n  }\n}\n\n// everything below this point can be removed\n// once @types has been merged. PR submited\ninterface MultiIndices {\n  multiDragElement: HTMLElement;\n  index: number;\n}\n\nexport interface MultiDragEvent extends SortableEvent {\n  // @todo - add this to @types\n  clones: HTMLElement[];\n  oldIndicies: MultiIndices[];\n  newIndicies: MultiIndices[];\n  swapItem: HTMLElement | null;\n}\n","import { PropsWithChildren } from \"react\";\nimport Sortable, { Options } from \"sortablejs\";\nimport { MultiDragEvent } from \"./react-sortable\";\nimport { AllMethodNames, ItemInterface, ReactSortableProps } from \"./types\";\n\n/**\n * Removes the `node` from the DOM\n * @param node\n */\nexport function removeNode(node: HTMLElement): void {\n  if (node.parentElement !== null) node.parentElement.removeChild(node);\n}\n\n/**\n * Inserts the `newChild` node at the given index in a parent\n * @param parent The parent HTML Element.\n * @param newChild A HTML eement to add as a child of the parent.\n * @param index index of the parent to place the new child in.\n */\nexport function insertNodeAt(\n  parent: HTMLElement,\n  newChild: HTMLElement,\n  index: number\n): void {\n  const refChild = parent.children[index] || null;\n  parent.insertBefore(newChild, refChild);\n}\n\n// @todo - create a dom handler function for arrays or not at all\n\n/** removes stuff from the dom in a nice order */\n// @todo - do I need parenElement?\nexport function handleDOMChanges<T extends ItemInterface>(\n  customs: Normalized<T>[]\n): void {\n  removeNodes(customs);\n  insertNodes(customs);\n}\n\nexport function removeNodes<T extends ItemInterface>(\n  customs: Normalized<T>[]\n): void {\n  customs.forEach((curr) => removeNode(curr.element));\n}\n\nexport function insertNodes<T extends ItemInterface>(\n  customs: Normalized<T>[]\n): void {\n  customs.forEach((curr) => {\n    insertNodeAt(curr.parentElement, curr.element, curr.oldIndex);\n  });\n}\n\nexport function createCustoms<T extends ItemInterface>(\n  evt: MultiDragEvent,\n  list: T[]\n): Normalized<T>[] {\n  const mode = getMode(evt);\n  const parentElement = { parentElement: evt.from };\n  let custom = [];\n  switch (mode) {\n    case \"normal\":\n      /* eslint-disable */\n      const item = {\n        element: evt.item,\n        newIndex: evt.newIndex!,\n        oldIndex: evt.oldIndex!,\n        parentElement: evt.from,\n      };\n      custom = [item];\n      break;\n    case \"swap\":\n      const drag: Input = {\n        element: evt.item,\n        oldIndex: evt.oldIndex!,\n        newIndex: evt.newIndex!,\n        ...parentElement,\n      };\n      const swap: Input = {\n        element: evt.swapItem!,\n        oldIndex: evt.newIndex!,\n        newIndex: evt.oldIndex!,\n        ...parentElement,\n      };\n      custom = [drag, swap];\n      break;\n    case \"multidrag\":\n      custom = evt.oldIndicies.map<Input>((curr, index) => ({\n        element: curr.multiDragElement,\n        oldIndex: curr.index,\n        newIndex: evt.newIndicies[index].index,\n        ...parentElement,\n      }));\n      break;\n  }\n  /* eslint-enable */\n\n  const customs = createNormalized(custom, list);\n  return customs;\n}\n\n/** moves items form old index to new index without breaking anything ideally. */\nexport function handleStateChanges<T extends ItemInterface>(\n  normalized: Normalized<T>[],\n  list: T[]\n): T[] {\n  const a = handleStateRemove(normalized, list);\n  const b = handleStateAdd(normalized, a);\n  return b;\n}\n\nexport function handleStateRemove<T extends ItemInterface>(\n  normalized: Normalized<T>[],\n  list: T[]\n): T[] {\n  const newList = [...list];\n  normalized\n    .concat()\n    .reverse()\n    .forEach((curr) => newList.splice(curr.oldIndex, 1));\n  return newList;\n}\n\nexport function handleStateAdd<T extends ItemInterface>(\n  normalized: Normalized<T>[],\n  list: T[],\n  evt?: Sortable.SortableEvent,\n  clone?: ((currentItem: T, evt: Sortable.SortableEvent) => T) | undefined\n): T[] {\n  const newList = [...list];\n  normalized.forEach((curr) => {\n    const newItem = clone && evt && clone(curr.item, evt);\n    newList.splice(curr.newIndex, 0, newItem || curr.item);\n  });\n  return newList;\n}\n\nexport function getMode(evt: MultiDragEvent): \"multidrag\" | \"swap\" | \"normal\" {\n  if (evt.oldIndicies && evt.oldIndicies.length > 0) return \"multidrag\";\n  if (evt.swapItem) return \"swap\";\n  return \"normal\";\n}\n\nexport function createNormalized<T extends ItemInterface>(\n  inputs: Input[],\n  list: T[]\n): Normalized<T>[] {\n  const normalized = inputs\n    .map<Normalized<T>>((curr) => ({ ...curr, item: list[curr.oldIndex] }))\n    .sort((a, b) => a.oldIndex - b.oldIndex);\n  return normalized;\n}\n\nexport interface Input {\n  parentElement: HTMLElement;\n  element: HTMLElement;\n  oldIndex: number;\n  newIndex: number;\n}\n\nexport interface Normalized<T> extends Input {\n  item: T;\n}\n\n/**\n * Removes the following group of properties from `props`,\n * leaving only `Sortable.Options` without any `on` methods.\n * @param props `ReactSortable.Props`\n */\nexport function destructurePropsForOptions<T>(\n  props: PropsWithChildren<ReactSortableProps<T>>\n): Exclude<Options, AllMethodNames> {\n  /* eslint-disable */\n  const {\n    // react sortable props\n    list,\n    setList,\n    children,\n    tag,\n    style,\n    className,\n    clone,\n    // sortable options that have methods we want to overwrite\n    onAdd,\n    onChange,\n    onChoose,\n    onClone,\n    onEnd,\n    onFilter,\n    onRemove,\n    onSort,\n    onStart,\n    onUnchoose,\n    onUpdate,\n    onMove,\n    onSpill,\n    onSelect,\n    onDeselect,\n    ...options\n  } = props;\n  /* eslint-enable */\n  return options;\n}\n\n/**\n * Construct a type with the properties of T except for those in type K.\n * Including this allows for backwards compatibility with earlier versions of TS.\n */\nexport type Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>;\n"]},"metadata":{},"sourceType":"script"}