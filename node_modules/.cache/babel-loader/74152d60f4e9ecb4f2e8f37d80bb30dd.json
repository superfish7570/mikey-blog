{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function () {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n\n        case 7:\n          op = _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n\n            _.ops.push(op);\n\n            break;\n          }\n\n          if (t[2]) _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n      }\n\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nimport { BaseAuthenticationClient } from './BaseAuthenticationClient';\nimport { uploadFile, xhrUpload } from '../utils';\n/**\n * @class MfaAuthenticationClient 多因素认证模块\n * @description 此模块用于进行绑定 TOTP MFA 认证器、解绑 TOTP MFA 认证器、绑定用户人脸、解绑人脸、用户二次认证。\n *\n * 请求绑定 TOTP MFA 认证器：\n *\n * \\`\\`\\`javascript\n * import { AuthenticationClient } from \"authing-js-sdk\"\n * const authenticationClient = new AuthenticationClient({\n *    appId: \"YOUR_APP_ID\",\n * })\n * await authenticationClient.mfa.assosicateMfaAuthenticator({authenticatorType: 'totp'})\n * \\`\\`\\`\n *\n * 验证 MFA 二次口令：\n *\n * \\`\\`\\`javascript\n * import { AuthenticationClient } from \"authing-js-sdk\"\n * const authenticationClient = new AuthenticationClient({\n *    appId: \"YOUR_APP_ID\",\n * })\n * await authenticationClient.mfa.verifyTotpMfa({totp: '112233', mfaToken: 'xxx'})\n * \\`\\`\\`\n *\n * @name MfaAuthenticationClient\n */\n\nvar MfaAuthenticationClient =\n/** @class */\nfunction () {\n  function MfaAuthenticationClient(options, tokenProvider, httpClient) {\n    this.options = options;\n    this.tokenProvider = tokenProvider;\n    this.httpClient = httpClient;\n    this.baseClient = new BaseAuthenticationClient(options);\n  }\n  /**\n   * @name getMfaAuthenticators\n   * @name_zh 获取 MFA 认证器\n   * @description 获取 MFA 认证器\n   *\n   * @example\n   * const authenticationClient = new AuthenticationClient({\n   *    appId: \"YOUR_APP_ID\",\n   * })\n   * const authenticators = await authenticationClient.mfa.getMfaAuthenticators({ type: 'totp' })\n   *\n   * @returns {Promise<IMfaAuthenticators>}\n   * @memberof MfaAuthenticationClient\n   */\n\n\n  MfaAuthenticationClient.prototype.getMfaAuthenticators = function (options) {\n    if (options === void 0) {\n      options = {\n        type: 'totp',\n        source: 'SELF'\n      };\n    }\n\n    return __awaiter(this, void 0, void 0, function () {\n      var type, mfaToken, source, api, headers, data;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            type = options.type, mfaToken = options.mfaToken, source = options.source;\n            api = this.baseClient.appHost + \"/api/v2/mfa/authenticator\";\n            headers = {};\n\n            if (mfaToken) {\n              headers.authorization = \"Bearer \" + mfaToken;\n            }\n\n            return [4\n            /*yield*/\n            , this.httpClient.request({\n              method: 'GET',\n              url: api,\n              params: {\n                type: type,\n                source: source\n              },\n              headers: headers\n            })];\n\n          case 1:\n            data = _a.sent();\n            return [2\n            /*return*/\n            , data];\n        }\n      });\n    });\n  };\n  /**\n   * @name assosicateMfaAuthenticator\n   * @name_zh 请求 MFA 二维码和密钥信息\n   * @description 请求 MFA 二维码和密钥信息\n   *\n   * @example\n   * const authenticationClient = new AuthenticationClient({\n   *    appId: \"YOUR_APP_ID\",\n   * })\n   * const authenticators = await authenticationClient.mfa.assosicateMfaAuthenticator({ authenticatorType: 'totp' })\n   *\n   * @returns {Promise<IMfaAssociation>}\n   * @memberof MfaAuthenticationClient\n   */\n\n\n  MfaAuthenticationClient.prototype.assosicateMfaAuthenticator = function (options) {\n    if (options === void 0) {\n      options = {\n        authenticatorType: 'totp',\n        source: 'SELF'\n      };\n    }\n\n    return __awaiter(this, void 0, void 0, function () {\n      var authenticatorType, mfaToken, source, headers, api, data;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            authenticatorType = options.authenticatorType, mfaToken = options.mfaToken, source = options.source;\n            headers = {};\n\n            if (mfaToken) {\n              headers.authorization = \"Bearer \" + mfaToken;\n            }\n\n            api = this.baseClient.appHost + \"/api/v2/mfa/totp/associate\";\n            return [4\n            /*yield*/\n            , this.httpClient.request({\n              method: 'POST',\n              url: api,\n              data: {\n                authenticator_type: authenticatorType,\n                source: source\n              },\n              headers: headers\n            })];\n\n          case 1:\n            data = _a.sent();\n            return [2\n            /*return*/\n            , data];\n        }\n      });\n    });\n  };\n  /**\n   * @name deleteMfaAuthenticator\n   * @name_zh 解绑 MFA\n   * @description 解绑 MFA\n   *\n   * @example\n   * const authenticationClient = new AuthenticationClient({\n   *    appId: \"YOUR_APP_ID\",\n   * })\n   * const authenticators = await authenticationClient.mfa.deleteMfaAuthenticator()\n   *\n   * @returns {Promise<IMfaDeleteAssociation>}\n   * @memberof MfaAuthenticationClient\n   */\n\n\n  MfaAuthenticationClient.prototype.deleteMfaAuthenticator = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var api;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            api = this.baseClient.appHost + \"/api/v2/mfa/totp/associate\";\n            return [4\n            /*yield*/\n            , this.httpClient.request({\n              method: 'DELETE',\n              url: api\n            })];\n\n          case 1:\n            _a.sent();\n\n            return [2\n            /*return*/\n            , {\n              code: 200,\n              message: 'TOTP MFA 解绑成功'\n            }];\n        }\n      });\n    });\n  };\n  /**\n   * @name confirmAssosicateMfaAuthenticator\n   * @name_zh 确认绑定 MFA\n   * @description 确认绑定 MFA\n   *\n   * @example\n   * const authenticationClient = new AuthenticationClient({\n   *    appId: \"YOUR_APP_ID\",\n   * })\n   * const authenticators = await authenticationClient.mfa.confirmAssosicateMfaAuthenticator({ authenticatorType: 'totp', totp: '112233' })\n   *\n   * @returns {Promise<IMfaConfirmAssociation>}\n   * @memberof MfaAuthenticationClient\n   */\n\n\n  MfaAuthenticationClient.prototype.confirmAssosicateMfaAuthenticator = function (options) {\n    if (options === void 0) {\n      options = {\n        authenticatorType: 'totp',\n        source: 'SELF'\n      };\n    }\n\n    return __awaiter(this, void 0, void 0, function () {\n      var api, authenticatorType, totp, source, mfaToken, headers;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            api = this.baseClient.appHost + \"/api/v2/mfa/totp/associate/confirm\";\n            authenticatorType = options.authenticatorType, totp = options.totp, source = options.source, mfaToken = options.mfaToken;\n            headers = {};\n\n            if (mfaToken) {\n              headers.authorization = \"Bearer \" + mfaToken;\n            }\n\n            return [4\n            /*yield*/\n            , this.httpClient.request({\n              method: 'POST',\n              url: api,\n              data: {\n                authenticator_type: authenticatorType,\n                totp: totp,\n                source: source\n              }\n            })];\n\n          case 1:\n            _a.sent();\n\n            return [2\n            /*return*/\n            , {\n              code: 200,\n              message: 'TOTP MFA 绑定成功'\n            }];\n        }\n      });\n    });\n  };\n  /**\n   * @name verifyTotpMfa\n   * @name_zh 检验二次验证 MFA 口令\n   * @description 检验二次验证 MFA 口令\n   *\n   * @example\n   * const authenticationClient = new AuthenticationClient({\n   *    appId: \"YOUR_APP_ID\",\n   * })\n   * const authenticators = await authenticationClient.mfa.verifyTotpMfa({ authenticatorType: 'totp', totp: '112233' })\n   *\n   * @returns {Promise<User>}\n   * @memberof MfaAuthenticationClient\n   */\n\n\n  MfaAuthenticationClient.prototype.verifyTotpMfa = function (options) {\n    return __awaiter(this, void 0, void 0, function () {\n      var api, data;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            api = this.baseClient.appHost + \"/api/v2/mfa/totp/verify\";\n            return [4\n            /*yield*/\n            , this.httpClient.request({\n              method: 'POST',\n              url: api,\n              data: {\n                totp: options.totp\n              },\n              headers: {\n                authorization: 'Bearer ' + options.mfaToken\n              }\n            })];\n\n          case 1:\n            data = _a.sent();\n            return [2\n            /*return*/\n            , data];\n        }\n      });\n    });\n  };\n  /**\n   * @name verifyAppSmsMfa\n   * @name_zh 检验二次验证 MFA 短信验证码\n   * @description 检验二次验证 MFA 短信验证码\n   *\n   * @param {object} options\n   * @param {string} options.phone 用户手机号\n   * @param {string} options.code 手机验证码\n   * @param {string} options.token 登录接口返回的 mfaToken\n   * @param {string} options.phoneCountryCode 手机号国家区号\n   * @example\n   * const authenticationClient = new AuthenticationClient({\n   *    appId: \"YOUR_APP_ID\",\n   * })\n   * const authenticators = await authenticationClient.mfa.verifySmsMfa({ mfaToken: 'xxxxxx', phone: '173xxxxxxxx' })\n   *\n   * @returns {Promise<User>}\n   * @memberof MfaAuthenticationClient\n   */\n\n\n  MfaAuthenticationClient.prototype.verifyAppSmsMfa = function (options) {\n    return __awaiter(this, void 0, void 0, function () {\n      var api, data;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            api = this.baseClient.appHost + \"/api/v2/applications/mfa/sms/verify\";\n            return [4\n            /*yield*/\n            , this.httpClient.request({\n              method: 'POST',\n              url: api,\n              data: {\n                phone: options.phone,\n                code: options.code,\n                phoneCountryCode: options.phoneCountryCode\n              },\n              headers: {\n                authorization: 'Bearer ' + options.mfaToken\n              }\n            })];\n\n          case 1:\n            data = _a.sent();\n            return [2\n            /*return*/\n            , data];\n        }\n      });\n    });\n  };\n  /**\n   * @name verifyAppEmailMfa\n   * @name_zh 检验二次验证 MFA 邮箱验证码\n   * @description 检验二次验证 MFA 邮箱验证码\n   *\n   * @param {object} options\n   * @param {string} options.email 用户邮箱\n   * @param {string} options.code 邮箱验证码\n   * @param {string} options.token 登录接口返回的 mfaToken\n   *\n   * @example\n   * const authenticationClient = new AuthenticationClient({\n   *    appId: \"YOUR_APP_ID\",\n   * })\n   * const authenticators = await authenticationClient.mfa.verifyAppEmailMfa({ mfaToken: 'xxxx', email: 'example@authing.com' })\n   *\n   * @returns {Promise<User>}\n   * @memberof MfaAuthenticationClient\n   */\n\n\n  MfaAuthenticationClient.prototype.verifyAppEmailMfa = function (options) {\n    return __awaiter(this, void 0, void 0, function () {\n      var api, data;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            api = this.baseClient.appHost + \"/api/v2/applications/mfa/email/verify\";\n            return [4\n            /*yield*/\n            , this.httpClient.request({\n              method: 'POST',\n              url: api,\n              data: {\n                email: options.email,\n                code: options.code\n              },\n              headers: {\n                authorization: 'Bearer ' + options.mfaToken\n              }\n            })];\n\n          case 1:\n            data = _a.sent();\n            return [2\n            /*return*/\n            , data];\n        }\n      });\n    });\n  };\n  /**\n   * @name phoneOrEmailBindable\n   * @name_zh 检测手机号或邮箱是否已被绑定\n   * @description 当需要手机或邮箱 MFA 登录，而用户未绑定手机或邮箱时，可先让用户输入手机号或邮箱，用此接口先检测手机或邮箱是否可绑定，再进行 MFA 验证\n   *\n   * @param {object} options\n   * @param {string} [options.mfaToken] 后端返回的 mfaToken\n   * @param {string} [options.phone] 需要检测的手机号\n   * @param {string} [options.email] 需要检测的邮箱\n   *\n   * @example\n   *\n   * authenticationClient.phoneOrEmailBindable({\n   *  phone: '173xxxxxxxx',\n   *  mfaToken: 'xxxxx'\n   * })\n   *\n   * @returns {Promise<boolean>}\n   * @memberof MfaAuthenticationClient\n   */\n\n\n  MfaAuthenticationClient.prototype.phoneOrEmailBindable = function (_a) {\n    var phone = _a.phone,\n        email = _a.email,\n        mfaToken = _a.mfaToken;\n    return __awaiter(this, void 0, void 0, function () {\n      var api;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            api = this.baseClient.appHost + \"/api/v2/applications/mfa/check\";\n            return [4\n            /*yield*/\n            , this.httpClient.request({\n              method: 'POST',\n              url: api,\n              data: {\n                email: email,\n                phone: phone\n              },\n              headers: {\n                authorization: 'Bearer ' + mfaToken\n              }\n            })];\n\n          case 1:\n            return [2\n            /*return*/\n            , _b.sent()];\n        }\n      });\n    });\n  };\n  /**\n   * @name verifyTotpRecoveryCode\n   * @name_zh 检验二次验证 MFA 恢复代码\n   * @description 检验二次验证 MFA 恢复代码\n   *\n   * @example\n   * const authenticationClient = new AuthenticationClient({\n   *    appId: \"YOUR_APP_ID\",\n   * })\n   * const authenticators = await authenticationClient.mfa.verifyTotpRecoveryCode({ authenticatorType: 'totp', totp: '112233' })\n   *\n   * @returns {Promise<User>}\n   * @memberof MfaAuthenticationClient\n   */\n\n\n  MfaAuthenticationClient.prototype.verifyTotpRecoveryCode = function (options) {\n    return __awaiter(this, void 0, void 0, function () {\n      var api, data;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            api = this.baseClient.appHost + \"/api/v2/mfa/totp/recovery\";\n            return [4\n            /*yield*/\n            , this.httpClient.request({\n              method: 'POST',\n              url: api,\n              data: {\n                recoveryCode: options.recoveryCode\n              },\n              headers: {\n                authorization: 'Bearer ' + options.mfaToken\n              }\n            })];\n\n          case 1:\n            data = _a.sent();\n            return [2\n            /*return*/\n            , data];\n        }\n      });\n    });\n  };\n  /**\n   * @name associateFaceByUrl\n   * @name_zh 通过图片 URL 方式绑定人脸\n   * @description 通过图片 URL 方式绑定人脸\n   *\n   * @param {object} options\n   * @param {string} options.baseFace 基础人脸照片\n   * @param {string} options.compareFace 用于对比的人脸照片地址\n   * @param {string} [options.mfaToken] 若是在二次认证时绑定人脸，需要传入 mfaToken\n   *\n   * @example\n   * const authenticationClient = new AuthenticationClient({\n   *    appId: \"YOUR_APP_ID\",\n   * })\n   * const user = await authenticationClient.mfa.associateFace({ photoA: 'http://example.com/photo/imgA.jpg', photoB: 'http://example.com/photo/imgB.jpg', mfaToken: 'xxxxxxxxxxxx' })\n   *\n   * @returns {Promise<User>}\n   * @memberof MfaAuthenticationClient\n   */\n\n\n  MfaAuthenticationClient.prototype.associateFaceByUrl = function (options) {\n    return __awaiter(this, void 0, void 0, function () {\n      var baseFace, compareFace, mfaToken, headers, api, data;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            baseFace = options.baseFace, compareFace = options.compareFace, mfaToken = options.mfaToken;\n            headers = {};\n\n            if (mfaToken) {\n              headers.authorization = \"Bearer \" + mfaToken;\n            }\n\n            api = this.baseClient.appHost + \"/api/v2/mfa/face/associate\";\n            return [4\n            /*yield*/\n            , this.httpClient.request({\n              method: 'POST',\n              url: api,\n              data: {\n                photoA: baseFace,\n                photoB: compareFace,\n                isExternal: true\n              },\n              headers: headers\n            })];\n\n          case 1:\n            data = _a.sent();\n            return [2\n            /*return*/\n            , data];\n        }\n      });\n    });\n  };\n  /**\n   * @name associateFaceByLocalFile\n   * @name_zh 通过上传本地文件的方式绑定人脸\n   * @description 通过上传本地文件的方式绑定人脸\n   *\n   * @param {string} [mfaToken] 若是在二次认证时绑定人脸，需要传入 mfaToken\n   *\n   * @example\n   * const authenticationClient = new AuthenticationClient({\n   *    appId: \"YOUR_APP_ID\",\n   * })\n   * const user = await authenticationClient.mfa.associateFaceByLocalFile('xxxxxxxxxxx')\n   *\n   * @returns {Promise<User>}\n   * @memberof MfaAuthenticationClient\n   */\n\n\n  MfaAuthenticationClient.prototype.associateFaceByLocalFile = function (mfaToken) {\n    return __awaiter(this, void 0, void 0, function () {\n      var headers, uploadedKey, key, e_1, data;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            headers = {};\n\n            if (mfaToken) {\n              headers.authorization = \"Bearer \" + mfaToken;\n            }\n\n            _a.label = 1;\n\n          case 1:\n            _a.trys.push([1, 3,, 4]);\n\n            return [4\n            /*yield*/\n            , uploadFile({\n              // 阿里云支持这些\n              accept: '.jpeg,.jpg,.png,.bmp',\n              url: this.baseClient.appHost + \"/api/v2/upload?folder=face-photo&private=true\"\n            })];\n\n          case 2:\n            key = _a.sent().key;\n            uploadedKey = key;\n            return [3\n            /*break*/\n            , 4];\n\n          case 3:\n            e_1 = _a.sent();\n            this.options.onError(e_1.code, e_1.message);\n            return [3\n            /*break*/\n            , 4];\n\n          case 4:\n            return [4\n            /*yield*/\n            , this.httpClient.request({\n              method: 'POST',\n              url: this.baseClient.appHost + \"/api/v2/mfa/face/associate\",\n              data: {\n                photoA: uploadedKey,\n                photoB: uploadedKey\n              },\n              headers: headers\n            })];\n\n          case 5:\n            data = _a.sent();\n            return [2\n            /*return*/\n            , data];\n        }\n      });\n    });\n  };\n  /**\n   * @name associateFaceByBlob\n   * @name_zh 通过传入 Blob 对象绑定人脸\n   * @description 通过传入 Blob 对象绑定人脸\n   *\n   * @param {object} options\n   * @param {string} options.baseFace 基础人脸数据 Blob 对象\n   * @param {string} options.compareFace 用于对比的人脸数据 Blob 对象\n   * @param {string} [options.mfaToken] 若是在二次认证时绑定人脸，需要传入 mfaToken\n   *\n   * @example\n   * const authenticationClient = new AuthenticationClient({\n   *    appId: \"YOUR_APP_ID\",\n   * })\n   * const user = await authenticationClient.mfa.associateFaceByBlob({blobA: Blob, blobB: Blob, mfaToken: 'xxx'})\n   *\n   * @returns {Promise<User>}\n   * @memberof MfaAuthenticationClient\n   */\n\n\n  MfaAuthenticationClient.prototype.associateFaceByBlob = function (opts) {\n    return __awaiter(this, void 0, void 0, function () {\n      var baseFace, compareFace, mfaToken, headers, photoA, photoB, uploadUrl, keyA, keyB, e_2, data;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            baseFace = opts.baseFace, compareFace = opts.compareFace, mfaToken = opts.mfaToken;\n            headers = {};\n\n            if (mfaToken) {\n              headers.authorization = \"Bearer \" + mfaToken;\n            }\n\n            uploadUrl = this.baseClient.appHost + \"/api/v2/upload?folder=face-photo&private=true\";\n            _a.label = 1;\n\n          case 1:\n            _a.trys.push([1, 6,, 7]);\n\n            return [4\n            /*yield*/\n            , xhrUpload(baseFace, uploadUrl)];\n\n          case 2:\n            keyA = _a.sent().key;\n            photoA = keyA;\n            if (!compareFace) return [3\n            /*break*/\n            , 4];\n            return [4\n            /*yield*/\n            , xhrUpload(compareFace, uploadUrl)];\n\n          case 3:\n            keyB = _a.sent().key;\n            photoB = keyB;\n            return [3\n            /*break*/\n            , 5];\n\n          case 4:\n            photoB = keyA;\n            _a.label = 5;\n\n          case 5:\n            return [3\n            /*break*/\n            , 7];\n\n          case 6:\n            e_2 = _a.sent();\n            this.options.onError(e_2.code, e_2.message);\n            return [3\n            /*break*/\n            , 7];\n\n          case 7:\n            return [4\n            /*yield*/\n            , this.httpClient.request({\n              method: 'POST',\n              url: this.baseClient.appHost + \"/api/v2/mfa/face/associate\",\n              data: {\n                photoA: photoA,\n                photoB: photoB\n              },\n              headers: headers\n            })];\n\n          case 8:\n            data = _a.sent();\n            return [2\n            /*return*/\n            , data];\n        }\n      });\n    });\n  };\n  /**\n   * @name verifyFaceMfa\n   * @name_zh 检测二次登录人脸验证\n   * @description 检测二次登录人脸验证\n   *\n   * @param {string} photo 人脸照片地址\n   * @param {string} mfaToken 二次校验时 Authing 返回的 mfaToken\n   *\n   * @example\n   * const authenticationClient = new AuthenticationClient({\n   *    appId: \"YOUR_APP_ID\",\n   * })\n   * const user = await authenticationClient.mfa.verifyFaceMfa('http://example.com/photo/photo.jpg')\n   *\n   * @returns {Promise<User>}\n   * @memberof MfaAuthenticationClient\n   */\n\n\n  MfaAuthenticationClient.prototype.verifyFaceMfa = function (photo, mfaToken) {\n    return __awaiter(this, void 0, void 0, function () {\n      var api, data;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            api = this.baseClient.appHost + \"/api/v2/mfa/face/verify\";\n            return [4\n            /*yield*/\n            , this.httpClient.request({\n              method: 'POST',\n              url: api,\n              data: {\n                photo: photo\n              },\n              headers: {\n                authorization: \"Bearer \" + mfaToken\n              }\n            })];\n\n          case 1:\n            data = _a.sent();\n            return [2\n            /*return*/\n            , data];\n        }\n      });\n    });\n  };\n\n  return MfaAuthenticationClient;\n}();\n\nexport { MfaAuthenticationClient };","map":{"version":3,"sources":["../../../../src/lib/authentication/MfaAuthenticationClient.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nimport { BaseAuthenticationClient } from './BaseAuthenticationClient';\nimport { uploadFile, xhrUpload } from '../utils';\n/**\n * @class MfaAuthenticationClient 多因素认证模块\n * @description 此模块用于进行绑定 TOTP MFA 认证器、解绑 TOTP MFA 认证器、绑定用户人脸、解绑人脸、用户二次认证。\n *\n * 请求绑定 TOTP MFA 认证器：\n *\n * \\`\\`\\`javascript\n * import { AuthenticationClient } from \"authing-js-sdk\"\n * const authenticationClient = new AuthenticationClient({\n *    appId: \"YOUR_APP_ID\",\n * })\n * await authenticationClient.mfa.assosicateMfaAuthenticator({authenticatorType: 'totp'})\n * \\`\\`\\`\n *\n * 验证 MFA 二次口令：\n *\n * \\`\\`\\`javascript\n * import { AuthenticationClient } from \"authing-js-sdk\"\n * const authenticationClient = new AuthenticationClient({\n *    appId: \"YOUR_APP_ID\",\n * })\n * await authenticationClient.mfa.verifyTotpMfa({totp: '112233', mfaToken: 'xxx'})\n * \\`\\`\\`\n *\n * @name MfaAuthenticationClient\n */\nvar MfaAuthenticationClient = /** @class */ (function () {\n    function MfaAuthenticationClient(options, tokenProvider, httpClient) {\n        this.options = options;\n        this.tokenProvider = tokenProvider;\n        this.httpClient = httpClient;\n        this.baseClient = new BaseAuthenticationClient(options);\n    }\n    /**\n     * @name getMfaAuthenticators\n     * @name_zh 获取 MFA 认证器\n     * @description 获取 MFA 认证器\n     *\n     * @example\n     * const authenticationClient = new AuthenticationClient({\n     *    appId: \"YOUR_APP_ID\",\n     * })\n     * const authenticators = await authenticationClient.mfa.getMfaAuthenticators({ type: 'totp' })\n     *\n     * @returns {Promise<IMfaAuthenticators>}\n     * @memberof MfaAuthenticationClient\n     */\n    MfaAuthenticationClient.prototype.getMfaAuthenticators = function (options) {\n        if (options === void 0) { options = { type: 'totp', source: 'SELF' }; }\n        return __awaiter(this, void 0, void 0, function () {\n            var type, mfaToken, source, api, headers, data;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        type = options.type, mfaToken = options.mfaToken, source = options.source;\n                        api = this.baseClient.appHost + \"/api/v2/mfa/authenticator\";\n                        headers = {};\n                        if (mfaToken) {\n                            headers.authorization = \"Bearer \" + mfaToken;\n                        }\n                        return [4 /*yield*/, this.httpClient.request({\n                                method: 'GET',\n                                url: api,\n                                params: {\n                                    type: type,\n                                    source: source\n                                },\n                                headers: headers\n                            })];\n                    case 1:\n                        data = _a.sent();\n                        return [2 /*return*/, data];\n                }\n            });\n        });\n    };\n    /**\n     * @name assosicateMfaAuthenticator\n     * @name_zh 请求 MFA 二维码和密钥信息\n     * @description 请求 MFA 二维码和密钥信息\n     *\n     * @example\n     * const authenticationClient = new AuthenticationClient({\n     *    appId: \"YOUR_APP_ID\",\n     * })\n     * const authenticators = await authenticationClient.mfa.assosicateMfaAuthenticator({ authenticatorType: 'totp' })\n     *\n     * @returns {Promise<IMfaAssociation>}\n     * @memberof MfaAuthenticationClient\n     */\n    MfaAuthenticationClient.prototype.assosicateMfaAuthenticator = function (options) {\n        if (options === void 0) { options = { authenticatorType: 'totp', source: 'SELF' }; }\n        return __awaiter(this, void 0, void 0, function () {\n            var authenticatorType, mfaToken, source, headers, api, data;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        authenticatorType = options.authenticatorType, mfaToken = options.mfaToken, source = options.source;\n                        headers = {};\n                        if (mfaToken) {\n                            headers.authorization = \"Bearer \" + mfaToken;\n                        }\n                        api = this.baseClient.appHost + \"/api/v2/mfa/totp/associate\";\n                        return [4 /*yield*/, this.httpClient.request({\n                                method: 'POST',\n                                url: api,\n                                data: {\n                                    authenticator_type: authenticatorType,\n                                    source: source\n                                },\n                                headers: headers\n                            })];\n                    case 1:\n                        data = _a.sent();\n                        return [2 /*return*/, data];\n                }\n            });\n        });\n    };\n    /**\n     * @name deleteMfaAuthenticator\n     * @name_zh 解绑 MFA\n     * @description 解绑 MFA\n     *\n     * @example\n     * const authenticationClient = new AuthenticationClient({\n     *    appId: \"YOUR_APP_ID\",\n     * })\n     * const authenticators = await authenticationClient.mfa.deleteMfaAuthenticator()\n     *\n     * @returns {Promise<IMfaDeleteAssociation>}\n     * @memberof MfaAuthenticationClient\n     */\n    MfaAuthenticationClient.prototype.deleteMfaAuthenticator = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var api;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        api = this.baseClient.appHost + \"/api/v2/mfa/totp/associate\";\n                        return [4 /*yield*/, this.httpClient.request({\n                                method: 'DELETE',\n                                url: api\n                            })];\n                    case 1:\n                        _a.sent();\n                        return [2 /*return*/, {\n                                code: 200,\n                                message: 'TOTP MFA 解绑成功'\n                            }];\n                }\n            });\n        });\n    };\n    /**\n     * @name confirmAssosicateMfaAuthenticator\n     * @name_zh 确认绑定 MFA\n     * @description 确认绑定 MFA\n     *\n     * @example\n     * const authenticationClient = new AuthenticationClient({\n     *    appId: \"YOUR_APP_ID\",\n     * })\n     * const authenticators = await authenticationClient.mfa.confirmAssosicateMfaAuthenticator({ authenticatorType: 'totp', totp: '112233' })\n     *\n     * @returns {Promise<IMfaConfirmAssociation>}\n     * @memberof MfaAuthenticationClient\n     */\n    MfaAuthenticationClient.prototype.confirmAssosicateMfaAuthenticator = function (options) {\n        if (options === void 0) { options = { authenticatorType: 'totp', source: 'SELF' }; }\n        return __awaiter(this, void 0, void 0, function () {\n            var api, authenticatorType, totp, source, mfaToken, headers;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        api = this.baseClient.appHost + \"/api/v2/mfa/totp/associate/confirm\";\n                        authenticatorType = options.authenticatorType, totp = options.totp, source = options.source, mfaToken = options.mfaToken;\n                        headers = {};\n                        if (mfaToken) {\n                            headers.authorization = \"Bearer \" + mfaToken;\n                        }\n                        return [4 /*yield*/, this.httpClient.request({\n                                method: 'POST',\n                                url: api,\n                                data: {\n                                    authenticator_type: authenticatorType,\n                                    totp: totp,\n                                    source: source\n                                }\n                            })];\n                    case 1:\n                        _a.sent();\n                        return [2 /*return*/, { code: 200, message: 'TOTP MFA 绑定成功' }];\n                }\n            });\n        });\n    };\n    /**\n     * @name verifyTotpMfa\n     * @name_zh 检验二次验证 MFA 口令\n     * @description 检验二次验证 MFA 口令\n     *\n     * @example\n     * const authenticationClient = new AuthenticationClient({\n     *    appId: \"YOUR_APP_ID\",\n     * })\n     * const authenticators = await authenticationClient.mfa.verifyTotpMfa({ authenticatorType: 'totp', totp: '112233' })\n     *\n     * @returns {Promise<User>}\n     * @memberof MfaAuthenticationClient\n     */\n    MfaAuthenticationClient.prototype.verifyTotpMfa = function (options) {\n        return __awaiter(this, void 0, void 0, function () {\n            var api, data;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        api = this.baseClient.appHost + \"/api/v2/mfa/totp/verify\";\n                        return [4 /*yield*/, this.httpClient.request({\n                                method: 'POST',\n                                url: api,\n                                data: {\n                                    totp: options.totp\n                                },\n                                headers: {\n                                    authorization: 'Bearer ' + options.mfaToken\n                                }\n                            })];\n                    case 1:\n                        data = _a.sent();\n                        return [2 /*return*/, data];\n                }\n            });\n        });\n    };\n    /**\n     * @name verifyAppSmsMfa\n     * @name_zh 检验二次验证 MFA 短信验证码\n     * @description 检验二次验证 MFA 短信验证码\n     *\n     * @param {object} options\n     * @param {string} options.phone 用户手机号\n     * @param {string} options.code 手机验证码\n     * @param {string} options.token 登录接口返回的 mfaToken\n     * @param {string} options.phoneCountryCode 手机号国家区号\n     * @example\n     * const authenticationClient = new AuthenticationClient({\n     *    appId: \"YOUR_APP_ID\",\n     * })\n     * const authenticators = await authenticationClient.mfa.verifySmsMfa({ mfaToken: 'xxxxxx', phone: '173xxxxxxxx' })\n     *\n     * @returns {Promise<User>}\n     * @memberof MfaAuthenticationClient\n     */\n    MfaAuthenticationClient.prototype.verifyAppSmsMfa = function (options) {\n        return __awaiter(this, void 0, void 0, function () {\n            var api, data;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        api = this.baseClient.appHost + \"/api/v2/applications/mfa/sms/verify\";\n                        return [4 /*yield*/, this.httpClient.request({\n                                method: 'POST',\n                                url: api,\n                                data: {\n                                    phone: options.phone,\n                                    code: options.code,\n                                    phoneCountryCode: options.phoneCountryCode\n                                },\n                                headers: {\n                                    authorization: 'Bearer ' + options.mfaToken\n                                }\n                            })];\n                    case 1:\n                        data = _a.sent();\n                        return [2 /*return*/, data];\n                }\n            });\n        });\n    };\n    /**\n     * @name verifyAppEmailMfa\n     * @name_zh 检验二次验证 MFA 邮箱验证码\n     * @description 检验二次验证 MFA 邮箱验证码\n     *\n     * @param {object} options\n     * @param {string} options.email 用户邮箱\n     * @param {string} options.code 邮箱验证码\n     * @param {string} options.token 登录接口返回的 mfaToken\n     *\n     * @example\n     * const authenticationClient = new AuthenticationClient({\n     *    appId: \"YOUR_APP_ID\",\n     * })\n     * const authenticators = await authenticationClient.mfa.verifyAppEmailMfa({ mfaToken: 'xxxx', email: 'example@authing.com' })\n     *\n     * @returns {Promise<User>}\n     * @memberof MfaAuthenticationClient\n     */\n    MfaAuthenticationClient.prototype.verifyAppEmailMfa = function (options) {\n        return __awaiter(this, void 0, void 0, function () {\n            var api, data;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        api = this.baseClient.appHost + \"/api/v2/applications/mfa/email/verify\";\n                        return [4 /*yield*/, this.httpClient.request({\n                                method: 'POST',\n                                url: api,\n                                data: {\n                                    email: options.email,\n                                    code: options.code\n                                },\n                                headers: {\n                                    authorization: 'Bearer ' + options.mfaToken\n                                }\n                            })];\n                    case 1:\n                        data = _a.sent();\n                        return [2 /*return*/, data];\n                }\n            });\n        });\n    };\n    /**\n     * @name phoneOrEmailBindable\n     * @name_zh 检测手机号或邮箱是否已被绑定\n     * @description 当需要手机或邮箱 MFA 登录，而用户未绑定手机或邮箱时，可先让用户输入手机号或邮箱，用此接口先检测手机或邮箱是否可绑定，再进行 MFA 验证\n     *\n     * @param {object} options\n     * @param {string} [options.mfaToken] 后端返回的 mfaToken\n     * @param {string} [options.phone] 需要检测的手机号\n     * @param {string} [options.email] 需要检测的邮箱\n     *\n     * @example\n     *\n     * authenticationClient.phoneOrEmailBindable({\n     *  phone: '173xxxxxxxx',\n     *  mfaToken: 'xxxxx'\n     * })\n     *\n     * @returns {Promise<boolean>}\n     * @memberof MfaAuthenticationClient\n     */\n    MfaAuthenticationClient.prototype.phoneOrEmailBindable = function (_a) {\n        var phone = _a.phone, email = _a.email, mfaToken = _a.mfaToken;\n        return __awaiter(this, void 0, void 0, function () {\n            var api;\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        api = this.baseClient.appHost + \"/api/v2/applications/mfa/check\";\n                        return [4 /*yield*/, this.httpClient.request({\n                                method: 'POST',\n                                url: api,\n                                data: {\n                                    email: email,\n                                    phone: phone\n                                },\n                                headers: {\n                                    authorization: 'Bearer ' + mfaToken\n                                }\n                            })];\n                    case 1: return [2 /*return*/, _b.sent()];\n                }\n            });\n        });\n    };\n    /**\n     * @name verifyTotpRecoveryCode\n     * @name_zh 检验二次验证 MFA 恢复代码\n     * @description 检验二次验证 MFA 恢复代码\n     *\n     * @example\n     * const authenticationClient = new AuthenticationClient({\n     *    appId: \"YOUR_APP_ID\",\n     * })\n     * const authenticators = await authenticationClient.mfa.verifyTotpRecoveryCode({ authenticatorType: 'totp', totp: '112233' })\n     *\n     * @returns {Promise<User>}\n     * @memberof MfaAuthenticationClient\n     */\n    MfaAuthenticationClient.prototype.verifyTotpRecoveryCode = function (options) {\n        return __awaiter(this, void 0, void 0, function () {\n            var api, data;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        api = this.baseClient.appHost + \"/api/v2/mfa/totp/recovery\";\n                        return [4 /*yield*/, this.httpClient.request({\n                                method: 'POST',\n                                url: api,\n                                data: {\n                                    recoveryCode: options.recoveryCode\n                                },\n                                headers: {\n                                    authorization: 'Bearer ' + options.mfaToken\n                                }\n                            })];\n                    case 1:\n                        data = _a.sent();\n                        return [2 /*return*/, data];\n                }\n            });\n        });\n    };\n    /**\n     * @name associateFaceByUrl\n     * @name_zh 通过图片 URL 方式绑定人脸\n     * @description 通过图片 URL 方式绑定人脸\n     *\n     * @param {object} options\n     * @param {string} options.baseFace 基础人脸照片\n     * @param {string} options.compareFace 用于对比的人脸照片地址\n     * @param {string} [options.mfaToken] 若是在二次认证时绑定人脸，需要传入 mfaToken\n     *\n     * @example\n     * const authenticationClient = new AuthenticationClient({\n     *    appId: \"YOUR_APP_ID\",\n     * })\n     * const user = await authenticationClient.mfa.associateFace({ photoA: 'http://example.com/photo/imgA.jpg', photoB: 'http://example.com/photo/imgB.jpg', mfaToken: 'xxxxxxxxxxxx' })\n     *\n     * @returns {Promise<User>}\n     * @memberof MfaAuthenticationClient\n     */\n    MfaAuthenticationClient.prototype.associateFaceByUrl = function (options) {\n        return __awaiter(this, void 0, void 0, function () {\n            var baseFace, compareFace, mfaToken, headers, api, data;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        baseFace = options.baseFace, compareFace = options.compareFace, mfaToken = options.mfaToken;\n                        headers = {};\n                        if (mfaToken) {\n                            headers.authorization = \"Bearer \" + mfaToken;\n                        }\n                        api = this.baseClient.appHost + \"/api/v2/mfa/face/associate\";\n                        return [4 /*yield*/, this.httpClient.request({\n                                method: 'POST',\n                                url: api,\n                                data: {\n                                    photoA: baseFace,\n                                    photoB: compareFace,\n                                    isExternal: true\n                                },\n                                headers: headers\n                            })];\n                    case 1:\n                        data = _a.sent();\n                        return [2 /*return*/, data];\n                }\n            });\n        });\n    };\n    /**\n     * @name associateFaceByLocalFile\n     * @name_zh 通过上传本地文件的方式绑定人脸\n     * @description 通过上传本地文件的方式绑定人脸\n     *\n     * @param {string} [mfaToken] 若是在二次认证时绑定人脸，需要传入 mfaToken\n     *\n     * @example\n     * const authenticationClient = new AuthenticationClient({\n     *    appId: \"YOUR_APP_ID\",\n     * })\n     * const user = await authenticationClient.mfa.associateFaceByLocalFile('xxxxxxxxxxx')\n     *\n     * @returns {Promise<User>}\n     * @memberof MfaAuthenticationClient\n     */\n    MfaAuthenticationClient.prototype.associateFaceByLocalFile = function (mfaToken) {\n        return __awaiter(this, void 0, void 0, function () {\n            var headers, uploadedKey, key, e_1, data;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        headers = {};\n                        if (mfaToken) {\n                            headers.authorization = \"Bearer \" + mfaToken;\n                        }\n                        _a.label = 1;\n                    case 1:\n                        _a.trys.push([1, 3, , 4]);\n                        return [4 /*yield*/, uploadFile({\n                                // 阿里云支持这些\n                                accept: '.jpeg,.jpg,.png,.bmp',\n                                url: this.baseClient.appHost + \"/api/v2/upload?folder=face-photo&private=true\"\n                            })];\n                    case 2:\n                        key = (_a.sent()).key;\n                        uploadedKey = key;\n                        return [3 /*break*/, 4];\n                    case 3:\n                        e_1 = _a.sent();\n                        this.options.onError(e_1.code, e_1.message);\n                        return [3 /*break*/, 4];\n                    case 4: return [4 /*yield*/, this.httpClient.request({\n                            method: 'POST',\n                            url: this.baseClient.appHost + \"/api/v2/mfa/face/associate\",\n                            data: {\n                                photoA: uploadedKey,\n                                photoB: uploadedKey\n                            },\n                            headers: headers\n                        })];\n                    case 5:\n                        data = _a.sent();\n                        return [2 /*return*/, data];\n                }\n            });\n        });\n    };\n    /**\n     * @name associateFaceByBlob\n     * @name_zh 通过传入 Blob 对象绑定人脸\n     * @description 通过传入 Blob 对象绑定人脸\n     *\n     * @param {object} options\n     * @param {string} options.baseFace 基础人脸数据 Blob 对象\n     * @param {string} options.compareFace 用于对比的人脸数据 Blob 对象\n     * @param {string} [options.mfaToken] 若是在二次认证时绑定人脸，需要传入 mfaToken\n     *\n     * @example\n     * const authenticationClient = new AuthenticationClient({\n     *    appId: \"YOUR_APP_ID\",\n     * })\n     * const user = await authenticationClient.mfa.associateFaceByBlob({blobA: Blob, blobB: Blob, mfaToken: 'xxx'})\n     *\n     * @returns {Promise<User>}\n     * @memberof MfaAuthenticationClient\n     */\n    MfaAuthenticationClient.prototype.associateFaceByBlob = function (opts) {\n        return __awaiter(this, void 0, void 0, function () {\n            var baseFace, compareFace, mfaToken, headers, photoA, photoB, uploadUrl, keyA, keyB, e_2, data;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        baseFace = opts.baseFace, compareFace = opts.compareFace, mfaToken = opts.mfaToken;\n                        headers = {};\n                        if (mfaToken) {\n                            headers.authorization = \"Bearer \" + mfaToken;\n                        }\n                        uploadUrl = this.baseClient.appHost + \"/api/v2/upload?folder=face-photo&private=true\";\n                        _a.label = 1;\n                    case 1:\n                        _a.trys.push([1, 6, , 7]);\n                        return [4 /*yield*/, xhrUpload(baseFace, uploadUrl)];\n                    case 2:\n                        keyA = (_a.sent()).key;\n                        photoA = keyA;\n                        if (!compareFace) return [3 /*break*/, 4];\n                        return [4 /*yield*/, xhrUpload(compareFace, uploadUrl)];\n                    case 3:\n                        keyB = (_a.sent()).key;\n                        photoB = keyB;\n                        return [3 /*break*/, 5];\n                    case 4:\n                        photoB = keyA;\n                        _a.label = 5;\n                    case 5: return [3 /*break*/, 7];\n                    case 6:\n                        e_2 = _a.sent();\n                        this.options.onError(e_2.code, e_2.message);\n                        return [3 /*break*/, 7];\n                    case 7: return [4 /*yield*/, this.httpClient.request({\n                            method: 'POST',\n                            url: this.baseClient.appHost + \"/api/v2/mfa/face/associate\",\n                            data: {\n                                photoA: photoA,\n                                photoB: photoB\n                            },\n                            headers: headers\n                        })];\n                    case 8:\n                        data = _a.sent();\n                        return [2 /*return*/, data];\n                }\n            });\n        });\n    };\n    /**\n     * @name verifyFaceMfa\n     * @name_zh 检测二次登录人脸验证\n     * @description 检测二次登录人脸验证\n     *\n     * @param {string} photo 人脸照片地址\n     * @param {string} mfaToken 二次校验时 Authing 返回的 mfaToken\n     *\n     * @example\n     * const authenticationClient = new AuthenticationClient({\n     *    appId: \"YOUR_APP_ID\",\n     * })\n     * const user = await authenticationClient.mfa.verifyFaceMfa('http://example.com/photo/photo.jpg')\n     *\n     * @returns {Promise<User>}\n     * @memberof MfaAuthenticationClient\n     */\n    MfaAuthenticationClient.prototype.verifyFaceMfa = function (photo, mfaToken) {\n        return __awaiter(this, void 0, void 0, function () {\n            var api, data;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        api = this.baseClient.appHost + \"/api/v2/mfa/face/verify\";\n                        return [4 /*yield*/, this.httpClient.request({\n                                method: 'POST',\n                                url: api,\n                                data: {\n                                    photo: photo\n                                },\n                                headers: {\n                                    authorization: \"Bearer \" + mfaToken\n                                }\n                            })];\n                    case 1:\n                        data = _a.sent();\n                        return [2 /*return*/, data];\n                }\n            });\n        });\n    };\n    return MfaAuthenticationClient;\n}());\nexport { MfaAuthenticationClient };\n//# sourceMappingURL=MfaAuthenticationClient.js.map"]},"metadata":{},"sourceType":"module"}