{"ast":null,"code":"import { produce, original } from 'immer';\nimport { parseJsonByString } from \"../../common/utils\";\nimport { CHANGE_SCHEMA, ADD_PAGE_CHILDREN, CHANGE_PAGE_CHILD, DELECT_PAGE_CHILD, CHANGE_PAGE_CHILD_POSITION, CHANGE_PAGE_ATTRIBUTE } from \"./constant\";\nconst initialSchema = parseJsonByString(window.localStorage.schema, {\n  name: 'page',\n  attributes: {},\n  children: []\n});\nconst defaultState = {\n  schema: initialSchema\n};\nexport const homeManagePageReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : defaultState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  return produce(state, draft => {\n    switch (action.type) {\n      // 改变 当前的 schema\n      case CHANGE_SCHEMA:\n        draft.schema = action.value;\n        break;\n      // 增加    page children\n\n      case ADD_PAGE_CHILDREN:\n        draft.schema.children.push(action.value);\n        break;\n      //  改变  就是把当前的删除 在回去之前的\n\n      case CHANGE_PAGE_CHILD:\n        draft.schema.children.splice(action.index, 1, action.value);\n        break;\n      // 删除 把当前的删除\n\n      case DELECT_PAGE_CHILD:\n        draft.schema.children.splice(action.index, 1);\n        break;\n      // 这里比较复杂 因为用到了 react-sortable-hoc 它提供了一个 oldIndex 还有 newIndex. 本质上来说我删除 老内容 添加新内容就好\n      // 但是这里又用到了 immer 这个库 打印出来的结果就是 proxy类型的数据. 所以查了文档用 immer提供的 original 先拷贝一份你的children\n      // 内容  再去删除children里面的内容 新内容我在添加 copy里的 [action.oldIndex]\n\n      case CHANGE_PAGE_CHILD_POSITION:\n        const copy = original(draft.schema.children);\n        draft.schema.children.splice(action.oldIndex, 1);\n        draft.schema.children.splice(action.newIndex, 0, copy[action.oldIndex]);\n        break;\n\n      case CHANGE_PAGE_ATTRIBUTE:\n        draft.schema.attributes.push(action.value);\n\n      default:\n        break;\n    }\n  });\n};","map":{"version":3,"names":["produce","original","parseJsonByString","CHANGE_SCHEMA","ADD_PAGE_CHILDREN","CHANGE_PAGE_CHILD","DELECT_PAGE_CHILD","CHANGE_PAGE_CHILD_POSITION","CHANGE_PAGE_ATTRIBUTE","initialSchema","window","localStorage","schema","name","attributes","children","defaultState","homeManagePageReducer","state","action","draft","type","value","push","splice","index","copy","oldIndex","newIndex"],"sources":["/Users/mikey/Desktop/yc-blog/src/admin/redux/reducer.js"],"sourcesContent":["import {produce,original} from 'immer';\nimport {parseJsonByString} from \"../../common/utils\";\nimport {\n    CHANGE_SCHEMA,\n    ADD_PAGE_CHILDREN,\n    CHANGE_PAGE_CHILD,\n    DELECT_PAGE_CHILD,\n    CHANGE_PAGE_CHILD_POSITION,\n    CHANGE_PAGE_ATTRIBUTE\n} from \"./constant\";\n\nconst initialSchema = parseJsonByString(window.localStorage.schema, {\n    name: 'page',\n    attributes: {},\n    children: []\n});\n\nconst defaultState = {\n    schema: initialSchema\n};\n\nexport const homeManagePageReducer = (state = defaultState, action) => produce(state, (draft) => {\n    switch (action.type) {\n        // 改变 当前的 schema\n        case CHANGE_SCHEMA:\n            draft.schema = action.value;\n            break;\n        // 增加    page children\n        case ADD_PAGE_CHILDREN:\n            draft.schema.children.push(action.value);\n            break;\n        //  改变  就是把当前的删除 在回去之前的\n        case CHANGE_PAGE_CHILD:\n            draft.schema.children.splice(action.index, 1, action.value);\n            break;\n        // 删除 把当前的删除\n        case DELECT_PAGE_CHILD:\n            draft.schema.children.splice(action.index, 1);\n            break;\n        // 这里比较复杂 因为用到了 react-sortable-hoc 它提供了一个 oldIndex 还有 newIndex. 本质上来说我删除 老内容 添加新内容就好\n        // 但是这里又用到了 immer 这个库 打印出来的结果就是 proxy类型的数据. 所以查了文档用 immer提供的 original 先拷贝一份你的children\n        // 内容  再去删除children里面的内容 新内容我在添加 copy里的 [action.oldIndex]\n        case CHANGE_PAGE_CHILD_POSITION:\n            const copy = original(draft.schema.children);\n            draft.schema.children.splice(action.oldIndex, 1);\n            draft.schema.children.splice(action.newIndex, 0,copy[action.oldIndex]);\n            break;\n        case CHANGE_PAGE_ATTRIBUTE:\n            draft.schema.attributes.push(action.value)\n        default:\n            break;\n    }\n})"],"mappings":"AAAA,SAAQA,OAAR,EAAgBC,QAAhB,QAA+B,OAA/B;AACA,SAAQC,iBAAR,QAAgC,oBAAhC;AACA,SACIC,aADJ,EAEIC,iBAFJ,EAGIC,iBAHJ,EAIIC,iBAJJ,EAKIC,0BALJ,EAMIC,qBANJ,QAOO,YAPP;AASA,MAAMC,aAAa,GAAGP,iBAAiB,CAACQ,MAAM,CAACC,YAAP,CAAoBC,MAArB,EAA6B;EAChEC,IAAI,EAAE,MAD0D;EAEhEC,UAAU,EAAE,EAFoD;EAGhEC,QAAQ,EAAE;AAHsD,CAA7B,CAAvC;AAMA,MAAMC,YAAY,GAAG;EACjBJ,MAAM,EAAEH;AADS,CAArB;AAIA,OAAO,MAAMQ,qBAAqB,GAAG;EAAA,IAACC,KAAD,uEAASF,YAAT;EAAA,IAAuBG,MAAvB;EAAA,OAAkCnB,OAAO,CAACkB,KAAD,EAASE,KAAD,IAAW;IAC7F,QAAQD,MAAM,CAACE,IAAf;MACI;MACA,KAAKlB,aAAL;QACIiB,KAAK,CAACR,MAAN,GAAeO,MAAM,CAACG,KAAtB;QACA;MACJ;;MACA,KAAKlB,iBAAL;QACIgB,KAAK,CAACR,MAAN,CAAaG,QAAb,CAAsBQ,IAAtB,CAA2BJ,MAAM,CAACG,KAAlC;QACA;MACJ;;MACA,KAAKjB,iBAAL;QACIe,KAAK,CAACR,MAAN,CAAaG,QAAb,CAAsBS,MAAtB,CAA6BL,MAAM,CAACM,KAApC,EAA2C,CAA3C,EAA8CN,MAAM,CAACG,KAArD;QACA;MACJ;;MACA,KAAKhB,iBAAL;QACIc,KAAK,CAACR,MAAN,CAAaG,QAAb,CAAsBS,MAAtB,CAA6BL,MAAM,CAACM,KAApC,EAA2C,CAA3C;QACA;MACJ;MACA;MACA;;MACA,KAAKlB,0BAAL;QACI,MAAMmB,IAAI,GAAGzB,QAAQ,CAACmB,KAAK,CAACR,MAAN,CAAaG,QAAd,CAArB;QACAK,KAAK,CAACR,MAAN,CAAaG,QAAb,CAAsBS,MAAtB,CAA6BL,MAAM,CAACQ,QAApC,EAA8C,CAA9C;QACAP,KAAK,CAACR,MAAN,CAAaG,QAAb,CAAsBS,MAAtB,CAA6BL,MAAM,CAACS,QAApC,EAA8C,CAA9C,EAAgDF,IAAI,CAACP,MAAM,CAACQ,QAAR,CAApD;QACA;;MACJ,KAAKnB,qBAAL;QACIY,KAAK,CAACR,MAAN,CAAaE,UAAb,CAAwBS,IAAxB,CAA6BJ,MAAM,CAACG,KAApC;;MACJ;QACI;IA5BR;EA8BH,CA/B6E,CAAzC;AAAA,CAA9B"},"metadata":{},"sourceType":"module"}