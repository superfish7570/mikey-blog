{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function sent() {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) {\n      try {\n        if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n        if (y = 0, t) op = [op[0] & 2, t.value];\n\n        switch (op[0]) {\n          case 0:\n          case 1:\n            t = op;\n            break;\n\n          case 4:\n            _.label++;\n            return {\n              value: op[1],\n              done: false\n            };\n\n          case 5:\n            _.label++;\n            y = op[1];\n            op = [0];\n            continue;\n\n          case 7:\n            op = _.ops.pop();\n\n            _.trys.pop();\n\n            continue;\n\n          default:\n            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n              _ = 0;\n              continue;\n            }\n\n            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n              _.label = op[1];\n              break;\n            }\n\n            if (op[0] === 6 && _.label < t[1]) {\n              _.label = t[1];\n              t = op;\n              break;\n            }\n\n            if (t && _.label < t[2]) {\n              _.label = t[2];\n\n              _.ops.push(op);\n\n              break;\n            }\n\n            if (t[2]) _.ops.pop();\n\n            _.trys.pop();\n\n            continue;\n        }\n\n        op = body.call(thisArg, _);\n      } catch (e) {\n        op = [6, e];\n        y = 0;\n      } finally {\n        f = t = 0;\n      }\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nimport { deleteUser, deleteUsers, users, getUserGroups, updateUser, searchUser, createUser, refreshToken, getUserRoles, assignRole, revokeRole, isUserExists, addUserToGroup, removeUserFromGroup, archivedUsers, findUser, getUserDepartments, listUserAuthorizedResources, udv, udfValueBatch, setUdvBatch, removeUdv, setUdfValueBatch, usersWithCustomData, findUserWithCustomData, searchUserWithCustomData, sendFirstLoginVerifyEmail } from '../graphqlapi';\nimport { UdfTargetType } from '../../types/graphql.v2';\nimport { convertUdvToKeyValuePair, formatAuthorizedResources } from '../utils';\n/**\n * @name UsersManagementClient\n * @description Authing 用户管理模块。\n *\n * 此模块可以进行用户目录增删改查、搜索用户、刷新用户 token、管理用户分组、管理用户角色、管理用户策略授权等操作。\n *\n * 该模块发出的所有操作都将以管理员身份进行，所以不需要进行建议短信验证码等操作，如果你希望以普通用户的身份进行操作，请使用 AuthenticationClient 。\n *\n * @example\n *\n * 请使用以下方式使用该模块：\n * \\`\\`\\`javascript\n * import { ManagementClient } from \"authing-js-sdk\"\n * const managementClient = new ManagementClient({\n *    userPoolId: \"YOUR_USERPOOL_ID\",\n *    secret: \"YOUR_USERPOOL_SECRET\",\n * })\n *\n * managementClient.users.list // 获取用户列表\n * managementClient.users.create // 创建用户\n * managementClient.users.listRoles // 获取用户角色列表\n * managementClient.users.search // 搜索用户\n * \\`\\`\\`\n *\n * @class UsersManagementClient 管理用户\n */\n\nvar UsersManagementClient =\n/** @class */\nfunction () {\n  function UsersManagementClient(options, graphqlClient, httpClient, fastHttpClient, tokenProvider, publickKeyManager) {\n    this.options = options;\n    this.graphqlClient = graphqlClient;\n    this.tokenProvider = tokenProvider;\n    this.httpClient = httpClient;\n    this.fastHttpClient = fastHttpClient;\n    this.publickKeyManager = publickKeyManager;\n  }\n  /**\n   * @name create\n   * @name_zh 创建用户\n   * @description 此接口将以管理员身份创建用户，不需要进行手机号验证码检验等安全检测。\n   *\n   * @param {CreateUserInput} userInfo 用户资料\n   * @param {string} userInfo.email 邮箱，用户池内唯一\n   * @param {boolean} userInfo.emailVerified 邮箱是否已验证\n   * @param {string} userInfo.phone 手机号\n   * @param {boolean} userInfo.phoneVerified 手机号是否验证\n   * @param {string} userInfo.unionid 以社会化登录的用户该字段为用户在第三方社会化登录服务商中的唯一 ID\n   * @param {string} userInfo.openid  微信登录返回的 openid\n   * @param {string} userInfo.password 密码\n   * @param {string} userInfo.registerSource 注册来源，可以多选\n   * @param {string} userInfo.username 用户名\n   * @param {string} userInfo.nickname 昵称\n   * @param {string} userInfo.photo 头像\n   * @param {string} userInfo.company 公司\n   * @param {string} userInfo.browser 浏览器\n   * @param {number} userInfo.loginsCount 登录次数，当你从原有用户系统迁移到 Authing 时可以设置该字段。\n   * @param {string} userInfo.lastLogin 上次登录时间, 符合 ISO8601 格式的时间字符串。(如 \"2017-06-07T14:34:08.700Z\", \"2017-06-07T14:34:08.700 or \"2017-06-07T14:34:08+04:00\")\n   * @param {string} userInfo.lastIP 用户最近一次登录（或其他活动）的 IP\n   * @param {string} userInfo.signedUp 注册时间，符合 ISO8601 格式的时间字符串。(如 \"2017-06-07T14:34:08.700Z\", \"2017-06-07T14:34:08.700 or \"2017-06-07T14:34:08+04:00\")\n   * @param {boolean} userInfo.blocked 账号是否被禁用\n   * @param {boolean} userInfo.isDeleted 标记账号是否被删除\n   * @param {string} userInfo.device 设备\n   * @param {string} userInfo.lastIP 最近登录的 IP\n   * @param {string} userInfo.name Name\n   * @param {string} userInfo.givenName Given Name\n   * @param {string} userInfo.familyName Family Name\n   * @param {string} userInfo.middleName Middle Name\n   * @param {string} userInfo.profile Profile Url\n   * @param {string} userInfo.preferredUsername Preferred Name\n   * @param {string} userInfo.website 个人网站\n   * @param {string} userInfo.gender 性别, F 表示男性、W 表示女性、未知表示 U\n   * @param {string} userInfo.birthdate 生日\n   * @param {string} userInfo.zoneinfo 时区\n   * @param {string} userInfo.locale 语言\n   * @param {string} userInfo.address 地址\n   * @param {string} userInfo.streetAddress 街道地址\n   * @param {string} userInfo.locality\n   * @param {string} userInfo.region 地域\n   * @param {string} userInfo.postalCode 邮编\n   * @param {string} userInfo.city 城市\n   * @param {string} userInfo.province 省份\n   * @param {string} userInfo.country 国家\n   *\n   * @example\n   *\n   * const user = await managementClient.users.create({\n   *    username: 'bob',\n   *    password: 'passw0rd'\n   * })\n   *\n   * @example\n   *\n   * const user = await managementClient.users.create({\n   *    nickname: 'Nick',\n   *    phone: '176xxxx7041', // 由于是管理员操作，所以检验手机号验证码, 如果你需要检验，请使用  AuthenticationClient\n   *    loginsCount: 2 // 原有用户系统记录的用户登录次数\n   *    signedUp: '2020-10-15T17:55:37+08:00' // 原有用户系统记录的用户注册时间\n   * })\n   *\n   * @returns {Promise<User>}\n   * @memberof UsersManagementClient\n   */\n\n\n  UsersManagementClient.prototype.create = function (userInfo, options) {\n    return __awaiter(this, void 0, void 0, function () {\n      var _a, _b, keepPassword, _c, resetPasswordOnFirstLogin, identity, _d, _e, _f, _g, user;\n\n      return __generator(this, function (_h) {\n        switch (_h.label) {\n          case 0:\n            _a = options || {}, _b = _a.keepPassword, keepPassword = _b === void 0 ? false : _b, _c = _a.resetPasswordOnFirstLogin, resetPasswordOnFirstLogin = _c === void 0 ? false : _c, identity = _a.identity;\n            if (!(userInfo === null || userInfo === void 0 ? void 0 : userInfo.password)) return [3\n            /*break*/\n            , 3];\n            _d = userInfo;\n            _f = (_e = this.options).encryptFunction;\n            _g = [userInfo.password];\n            return [4\n            /*yield*/\n            , this.publickKeyManager.getPublicKey()];\n\n          case 1:\n            return [4\n            /*yield*/\n            , _f.apply(_e, _g.concat([_h.sent(), this.options.encryption]))];\n\n          case 2:\n            _d.password = _h.sent();\n            _h.label = 3;\n\n          case 3:\n            return [4\n            /*yield*/\n            , createUser(this.graphqlClient, this.tokenProvider, {\n              userInfo: userInfo,\n              keepPassword: keepPassword,\n              resetPasswordOnFirstLogin: resetPasswordOnFirstLogin,\n              identity: identity\n            })];\n\n          case 4:\n            user = _h.sent().createUser;\n            return [2\n            /*return*/\n            , user];\n        }\n      });\n    });\n  };\n  /**\n   * @name update\n   * @name_zh 修改用户资料\n   * @description 修改用户资料\n   *\n   * @param {string} id 用户 ID\n   * @param {UpdateUserInput} updates 修改的用户资料\n   * @param {string} updates.email 邮箱\n   * @param {boolean} updates.emailVerified 邮箱是否已验证\n   * @param {string} updates.phone 手机号\n   * @param {boolean} updates.phoneVerified 手机号是否验证\n   * @param {string} updates.unionid 以社会化登录的用户该字段为用户在第三方社会化登录服务商中的唯一 ID\n   * @param {string} updates.openid  微信登录返回的 openid\n   * @param {string} updates.password 密码\n   * @param {string} updates.registerSource 注册来源，可以多选\n   * @param {string} updates.tokenExpiredAt token 过期时间，符合 ISO8601 格式的时间字符串。(如 \"2017-06-07T14:34:08.700Z\", \"2017-06-07T14:34:08.700 or \"2017-06-07T14:34:08+04:00\")。\n   * 将该字段设置为小于当前时间可以让用户的 token 失效。\n   * @param {string} updates.username 用户名\n   * @param {string} updates.nickname 昵称\n   * @param {string} updates.photo 头像\n   * @param {string} updates.company 公司\n   * @param {string} updates.browser 浏览器\n   * @param {number} updates.loginsCount 登录次数，当你从原有用户系统迁移到 Authing 时可以设置该字段。\n   * @param {string} updates.lastLogin 上次登录时间, 符合 ISO8601 格式的时间字符串。(如 \"2017-06-07T14:34:08.700Z\", \"2017-06-07T14:34:08.700 or \"2017-06-07T14:34:08+04:00\")\n   * @param {string} updates.lastIP 用户最近一次登录（或其他活动）的 IP\n   * @param {string} updates.signedUp 注册时间，符合 ISO8601 格式的时间字符串。(如 \"2017-06-07T14:34:08.700Z\", \"2017-06-07T14:34:08.700 or \"2017-06-07T14:34:08+04:00\")\n   * @param {boolean} updates.blocked 账号是否被禁用\n   * @param {string} updates.device 设备\n   * @param {string} updates.lastIP 最近登录的 IP\n   * @param {string} updates.name Name\n   * @param {string} updates.givenName Given Name\n   * @param {string} updates.familyName Family Name\n   * @param {string} updates.middleName Middle Name\n   * @param {string} updates.profile Profile Url\n   * @param {string} updates.preferredUsername Preferred Name\n   * @param {string} updates.website 个人网站\n   * @param {string} updates.gender 性别, F 表示男性、W 表示女性、未知表示 U\n   * @param {string} updates.birthdate 生日\n   * @param {string} updates.zoneinfo 时区\n   * @param {string} updates.locale 语言\n   * @param {string} updates.address 地址\n   * @param {string} updates.streetAddress 街道地址\n   * @param {string} updates.locality\n   * @param {string} updates.region 地域\n   * @param {string} updates.postalCode 邮编\n   * @param {string} updates.city 城市\n   * @param {string} updates.province 省份\n   * @param {string} updates.country 国家\n   *\n   * @example\n   *\n   * const user = await managementClient.users.update(\"USERID\", {\n   *    nickname: \"Nick\"\n   * })\n   *\n   * @example\n   *\n   * const user = await managementClient.users.update(\"USERID\" ,{\n   *    nickname: 'Nick',\n   *    phone: '176xxxx7041', // 由于是管理员操作，所以检验手机号验证码, 如果你需要检验，请使用  AuthenticationClient\n   *    tokenExpiredAt: '2020-10-15T17:55:37+08:00'\n   * })\n   *\n   * @returns {Promise<User>}\n   * @memberof UsersManagementClient   *\n   */\n\n\n  UsersManagementClient.prototype.update = function (id, updates) {\n    return __awaiter(this, void 0, void 0, function () {\n      var _a, _b, _c, _d, user;\n\n      return __generator(this, function (_e) {\n        switch (_e.label) {\n          case 0:\n            if (!(updates && updates.password)) return [3\n            /*break*/\n            , 3];\n            _a = updates;\n            _c = (_b = this.options).encryptFunction;\n            _d = [updates.password];\n            return [4\n            /*yield*/\n            , this.publickKeyManager.getPublicKey()];\n\n          case 1:\n            return [4\n            /*yield*/\n            , _c.apply(_b, _d.concat([_e.sent(), this.options.encryption]))];\n\n          case 2:\n            _a.password = _e.sent();\n            _e.label = 3;\n\n          case 3:\n            return [4\n            /*yield*/\n            , updateUser(this.graphqlClient, this.tokenProvider, {\n              id: id,\n              input: updates\n            })];\n\n          case 4:\n            user = _e.sent().updateUser;\n            return [2\n            /*return*/\n            , user];\n        }\n      });\n    });\n  };\n  /**\n   * @name detail\n   * @name_zh 获取用户详情\n   * @description 通过用户 ID 获取用户详情，如果你想通过 token 获取用户详情，请使用 AuthenticationClient SDK 。\n   *\n   * @param {string} userId 用户 ID\n   *\n   * @example\n   *\n   * const user = await managementClient.users.detail('USERID');\n   *\n   * @returns {Promise<User>}\n   * @memberof UsersManagementClient\n   */\n\n\n  UsersManagementClient.prototype.detail = function (userId, options) {\n    return __awaiter(this, void 0, void 0, function () {\n      var _a, withCustomData, data;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            _a = (options || {}).withCustomData, withCustomData = _a === void 0 ? false : _a;\n            return [4\n            /*yield*/\n            , this.httpClient.request({\n              url: this.options.host + \"/api/v2/users/\" + userId,\n              params: {\n                with_custom_data: withCustomData\n              },\n              method: 'GET'\n            })];\n\n          case 1:\n            data = _b.sent();\n\n            if (withCustomData && data) {\n              // @ts-ignore\n              data.customData = convertUdvToKeyValuePair(data.customData);\n              return [2\n              /*return*/\n              , data];\n            }\n\n            return [2\n            /*return*/\n            , data];\n        }\n      });\n    });\n  };\n  /**\n   * @name delete\n   * @name_zh 删除用户\n   * @description 删除用户\n   *\n   * @param {string} userId 用户 ID\n   *\n   * @example\n   *\n   * const user = await managementClient.users.delete('USERID');\n   *\n   * @returns {Promise<CommonMessage>}\n   * @memberof UsersManagementClient\n   */\n\n\n  UsersManagementClient.prototype.delete = function (userId) {\n    return __awaiter(this, void 0, void 0, function () {\n      var data;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , deleteUser(this.graphqlClient, this.tokenProvider, {\n              id: userId\n            })];\n\n          case 1:\n            data = _a.sent().deleteUser;\n            return [2\n            /*return*/\n            , data];\n        }\n      });\n    });\n  };\n  /**\n   * @name deleteMany\n   * @name_zh 批量删除用户\n   * @description 批量删除用户\n   *\n   * @param {string[]} userIds 用户 ID 列表\n   *\n   * @example\n   *\n   * const user = await managementClient.users.deleteMany(['USERID']);\n   *\n   * @returns {Promise<CommonMessage>}\n   * @memberof UsersManagementClient\n   */\n\n\n  UsersManagementClient.prototype.deleteMany = function (userIds) {\n    return __awaiter(this, void 0, void 0, function () {\n      var data;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , deleteUsers(this.graphqlClient, this.tokenProvider, {\n              ids: userIds\n            })];\n\n          case 1:\n            data = _a.sent().deleteUsers;\n            return [2\n            /*return*/\n            , data];\n        }\n      });\n    });\n  };\n  /**\n   * @name batch\n   * @name_zh 批量获取用户\n   * @description 通过 ID、username、email、phone、email、externalId 批量获取用户详情\n   *\n   * @param {string[]} identifiers 需要查询的数据列表，如 用户 ID 列表\n   * @param {string} [type] 列表类型，可选值为 'id' ,'username' ,'phone' ,'email', 'externalId'，默认为 'id'\n   *\n   * @example\n   *\n   * const users = await managementClient.users.batch(['USERID'], options);\n   *\n   * @returns {Promise<CommonMessage>}\n   * @memberof UsersManagementClient\n   */\n\n\n  UsersManagementClient.prototype.batch = function (ids, options) {\n    return __awaiter(this, void 0, void 0, function () {\n      var _a, _b, queryField, _c, withCustomData, users;\n\n      return __generator(this, function (_d) {\n        switch (_d.label) {\n          case 0:\n            _a = options || {}, _b = _a.queryField, queryField = _b === void 0 ? 'id' : _b, _c = _a.withCustomData, withCustomData = _c === void 0 ? false : _c;\n            return [4\n            /*yield*/\n            , this.httpClient.request({\n              url: this.options.host + \"/api/v2/users/batch\",\n              method: 'POST',\n              data: {\n                ids: ids,\n                type: queryField,\n                withCustomData: withCustomData\n              }\n            })];\n\n          case 1:\n            users = _d.sent();\n\n            if (withCustomData) {\n              users.map(function (user) {\n                // @ts-ignore\n                user.customData = convertUdvToKeyValuePair(user.customData);\n                return user;\n              });\n              return [2\n              /*return*/\n              , users];\n            }\n\n            return [2\n            /*return*/\n            , users];\n        }\n      });\n    });\n  };\n  /**\n   * @name list\n   * @name_zh 获取用户列表\n   * @description 获取用户池用户列表\n   *\n   * @param {number} [page=1] 页码数, 从 1 开始\n   * @param {number} [limit=10] 每页包含的用户数\n   *\n   * @example\n   *\n   * const user = await managementClient.users.list();\n   *\n   * @returns\n   * @memberof UsersManagementClient\n   */\n\n\n  UsersManagementClient.prototype.list = function (page, limit, options) {\n    if (page === void 0) {\n      page = 1;\n    }\n\n    if (limit === void 0) {\n      limit = 10;\n    }\n\n    return __awaiter(this, void 0, void 0, function () {\n      var _a, _b, withCustomData, _c, excludeUsersInOrg, data, totalCount, list, data;\n\n      return __generator(this, function (_d) {\n        switch (_d.label) {\n          case 0:\n            _a = options || {}, _b = _a.withCustomData, withCustomData = _b === void 0 ? false : _b, _c = _a.excludeUsersInOrg, excludeUsersInOrg = _c === void 0 ? false : _c;\n            if (!withCustomData) return [3\n            /*break*/\n            , 2];\n            return [4\n            /*yield*/\n            , usersWithCustomData(this.graphqlClient, this.tokenProvider, {\n              page: page,\n              limit: limit,\n              excludeUsersInOrg: excludeUsersInOrg\n            })];\n\n          case 1:\n            data = _d.sent().users;\n            totalCount = data.totalCount, list = data.list;\n            list = list.map(function (user) {\n              // @ts-ignore\n              user.customData = convertUdvToKeyValuePair(user.customData);\n              return user;\n            });\n            return [2\n            /*return*/\n            , {\n              totalCount: totalCount,\n              list: list\n            }];\n\n          case 2:\n            return [4\n            /*yield*/\n            , users(this.graphqlClient, this.tokenProvider, {\n              page: page,\n              limit: limit,\n              excludeUsersInOrg: excludeUsersInOrg\n            })];\n\n          case 3:\n            data = _d.sent().users;\n            return [2\n            /*return*/\n            , data];\n        }\n      });\n    });\n  };\n  /**\n   * @name filter\n   * @name_zh 筛选用户列表\n   * @description 筛选用户池用户列表\n   *\n   * @param {number} [page=1] 页码数, 从 1 开始\n   * @param {number} [limit=10] 每页包含的用户数\n   * @param {[]} [filter=[]] 筛选项\n   *\n   * @example\n   *\n   * const user = await managementClient.users.filter();\n   *\n   * @returns\n   * @memberof UsersManagementClient\n   */\n\n\n  UsersManagementClient.prototype.filter = function (options) {\n    return __awaiter(this, void 0, void 0, function () {\n      var data;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.httpClient.request({\n              method: 'POST',\n              url: this.options.host + \"/api/v2/users/filter\",\n              data: options\n            })];\n\n          case 1:\n            data = _a.sent();\n            return [2\n            /*return*/\n            , data];\n        }\n      });\n    });\n  };\n  /**\n   * @name listArchivedUsers\n   * @name_zh 获取已归档用户列表\n   * @description 获取已归档用户列表\n   *\n   * @param {number} [page=1] 页码数, 从 1 开始\n   * @param {number} [limit=10] 每页包含的用户数\n   *\n   * @example\n   *\n   * const user = await managementClient.users.listArchivedUsers();\n   *\n   * @returns\n   * @memberof UsersManagementClient\n   */\n\n\n  UsersManagementClient.prototype.listArchivedUsers = function (page, limit) {\n    if (page === void 0) {\n      page = 1;\n    }\n\n    if (limit === void 0) {\n      limit = 10;\n    }\n\n    return __awaiter(this, void 0, void 0, function () {\n      var data;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , archivedUsers(this.graphqlClient, this.tokenProvider, {\n              page: page,\n              limit: limit\n            })];\n\n          case 1:\n            data = _a.sent().archivedUsers;\n            return [2\n            /*return*/\n            , data];\n        }\n      });\n    });\n  };\n  /**\n   * @name exists\n   * @name_zh 检查用户是否存在\n   * @description 检查用户是否存在，目前可检测的字段有用户名、邮箱、手机号。\n   *\n   *\n   * @param {Object} options\n   * @param {string} [options.username] 用户名，区分大小写。\n   * @param {string} [options.email] 邮箱，邮箱不区分大小写。\n   * @param {string} [options.phone] 手机号\n   *\n   * @example\n   *\n   * const exists = await managementClient.users.exists({\n   *    username: \"bob\"\n   * });\n   *\n   * @returns {Promise<boolean>}\n   * @memberof UsersManagementClient\n   */\n\n\n  UsersManagementClient.prototype.exists = function (options) {\n    return __awaiter(this, void 0, void 0, function () {\n      var username, email, phone, externalId, data;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            username = options.username, email = options.email, phone = options.phone, externalId = options.externalId;\n            return [4\n            /*yield*/\n            , isUserExists(this.graphqlClient, this.tokenProvider, {\n              username: username,\n              email: email,\n              phone: phone,\n              externalId: externalId\n            })];\n\n          case 1:\n            data = _a.sent().isUserExists;\n            return [2\n            /*return*/\n            , data];\n        }\n      });\n    });\n  };\n  /**\n   * @name find\n   * @name_zh 查找用户\n   * @description 通过用户名、邮箱、手机号查找用户\n   *\n   * @param {Object} options\n   * @param {string} [options.username] 用户名，区分大小写。\n   * @param {string} [options.email] 邮箱，邮箱不区分大小写。\n   * @param {string} [options.phone] 手机号\n   * @param {string} [options.externalId] externalId\n   *\n   * @memberof UsersManagementClient\n   */\n\n\n  UsersManagementClient.prototype.find = function (options) {\n    return __awaiter(this, void 0, void 0, function () {\n      var username, email, phone, externalId, _a, withCustomData, identity, user, user;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            username = options.username, email = options.email, phone = options.phone, externalId = options.externalId, _a = options.withCustomData, withCustomData = _a === void 0 ? false : _a, identity = options.identity;\n            if (!withCustomData) return [3\n            /*break*/\n            , 2];\n            return [4\n            /*yield*/\n            , findUserWithCustomData(this.graphqlClient, this.tokenProvider, {\n              username: username,\n              email: email,\n              phone: phone,\n              externalId: externalId\n            })];\n\n          case 1:\n            user = _b.sent().findUser; // @ts-ignore\n\n            user.customData = convertUdvToKeyValuePair(user.customData);\n            return [2\n            /*return*/\n            , user];\n\n          case 2:\n            return [4\n            /*yield*/\n            , findUser(this.graphqlClient, this.tokenProvider, {\n              username: username,\n              email: email,\n              phone: phone,\n              externalId: externalId,\n              identity: identity\n            })];\n\n          case 3:\n            user = _b.sent().findUser;\n            return [2\n            /*return*/\n            , user];\n        }\n      });\n    });\n  };\n  /**\n   * @name search\n   * @name_zh 搜索用户\n   * @description 根据关键字搜索用户\n   *\n   * @param query 搜索内容\n   * @param options 选项\n   * @param {string[]} [options.fields] 搜索用户字段，如果不指定，默认会从 username、nickname、email、phone、company、name、givenName、familyName、middleName、profile、preferredUsername 这些字段进行模糊搜索。\n   * 如果你需要精确查找，请使用 find 方法。\n   * @param {number} [options.page=1]\n   * @param {number} [options.limit=10]\n   * @param {Object} [options.departmentOpts] 限制条件，用户所在的部门\n   * @param {string} [options.departmentOpts.departmentId] 部门 ID\n   * @param {string} [options.departmentOpts.includeChildrenDepartments] 是否包含此部门的子部门\n   *\n   * @example\n   *\n   * const { totalCount, list } = await managementClient.users.search(\"Bob\");\n   *\n   * @returns {Promise<PaginatedUsers>}\n   * @memberof UsersManagementClient\n   */\n\n\n  UsersManagementClient.prototype.search = function (query, options) {\n    return __awaiter(this, void 0, void 0, function () {\n      var fields, _a, page, _b, limit, departmentOpts, groupOpts, roleOpts, _c, withCustomData, data, data, totalCount, list;\n\n      return __generator(this, function (_d) {\n        switch (_d.label) {\n          case 0:\n            options = options || {};\n            fields = options.fields, _a = options.page, page = _a === void 0 ? 1 : _a, _b = options.limit, limit = _b === void 0 ? 10 : _b, departmentOpts = options.departmentOpts, groupOpts = options.groupOpts, roleOpts = options.roleOpts, _c = options.withCustomData, withCustomData = _c === void 0 ? false : _c;\n            if (!!withCustomData) return [3\n            /*break*/\n            , 2];\n            return [4\n            /*yield*/\n            , searchUser(this.graphqlClient, this.tokenProvider, {\n              query: query,\n              fields: fields,\n              page: page,\n              limit: limit,\n              departmentOpts: departmentOpts,\n              groupOpts: groupOpts,\n              roleOpts: roleOpts\n            })];\n\n          case 1:\n            data = _d.sent().searchUser;\n            return [2\n            /*return*/\n            , data];\n\n          case 2:\n            return [4\n            /*yield*/\n            , searchUserWithCustomData(this.graphqlClient, this.tokenProvider, {\n              query: query,\n              fields: fields,\n              page: page,\n              limit: limit,\n              departmentOpts: departmentOpts,\n              groupOpts: groupOpts,\n              roleOpts: roleOpts\n            })];\n\n          case 3:\n            data = _d.sent().searchUser;\n            totalCount = data.totalCount, list = data.list;\n            list = list.map(function (user) {\n              // @ts-ignore\n              user.customData = convertUdvToKeyValuePair(user.customData);\n              return user;\n            });\n            return [2\n            /*return*/\n            , {\n              totalCount: totalCount,\n              list: list\n            }];\n        }\n      });\n    });\n  };\n  /**\n   * @name refreshToken\n   * @name_zh 刷新用户 token\n   * @description 刷新用户 token\n   *\n   * @param {string} id 用户 ID\n   *\n   * @example\n   *\n   * const { token } = await managementClient.users.refreshToken(\"USERID\");\n   *\n   * // 检测 token 的最新状态，能够获取到该用户对应的 token\n   *\n   * const data = await managementClient.checkLoginStatus(token, {\n   *   fetchUserDetail: true\n   * });\n   *\n   * @returns {Promise<RefreshToken>}\n   * @memberof UsersManagementClient\n   */\n\n\n  UsersManagementClient.prototype.refreshToken = function (id) {\n    return __awaiter(this, void 0, void 0, function () {\n      var data;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , refreshToken(this.graphqlClient, this.tokenProvider, {\n              id: id\n            })];\n\n          case 1:\n            data = _a.sent().refreshToken;\n            return [2\n            /*return*/\n            , data];\n        }\n      });\n    });\n  };\n  /**\n   * @name listGroups\n   * @name_zh 获取用户分组列表\n   * @description 获取用户的分组列表\n   *\n   * @param {string} userId 用户 ID\n   *\n   * @example\n   *\n   * const { list, totalCount} = await managementClient.users.listGroups(\"USERID\");\n   *\n   * @returns {Promise<DeepPartial<PaginatedGroups>>}\n   * @memberof UsersManagementClient\n   */\n\n\n  UsersManagementClient.prototype.listGroups = function (userId) {\n    return __awaiter(this, void 0, void 0, function () {\n      var user;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , getUserGroups(this.graphqlClient, this.tokenProvider, {\n              id: userId\n            })];\n\n          case 1:\n            user = _a.sent().user;\n            return [2\n            /*return*/\n            , user.groups];\n        }\n      });\n    });\n  };\n  /**\n   * @name addGroup\n   * @name_zh 加入分组\n   * @description 将用户加入分组\n   *\n   * @param {string} userId 用户 ID\n   * @param {string} group 分组 code\n   *\n   * @example\n   *\n   * const { code, message } = await managementClient.users.addGroup(\"USERID\", \"GROUP_CODE\");\n   *\n   * @returns {Promise<CommonMessage>}\n   * @memberof UsersManagementClient\n   */\n\n\n  UsersManagementClient.prototype.addGroup = function (userId, group) {\n    return __awaiter(this, void 0, void 0, function () {\n      var res;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , addUserToGroup(this.graphqlClient, this.tokenProvider, {\n              userIds: [userId],\n              code: group\n            })];\n\n          case 1:\n            res = _a.sent();\n            return [2\n            /*return*/\n            , res.addUserToGroup];\n        }\n      });\n    });\n  };\n  /**\n   * @name removeGroup\n   * @name_zh 退出分组\n   * @description 退出分组\n   *\n   * @param {string} userId 用户 ID\n   * @param {string} group 分组 code\n   *\n   * @example\n   *\n   * const { code, message } = await managementClient.users.removeGroup(\"USERID\", \"GROUP_CODE\");\n   *\n   * @returns {Promise<CommonMessage>}\n   * @memberof UsersManagementClient\n   */\n\n\n  UsersManagementClient.prototype.removeGroup = function (userId, group) {\n    return __awaiter(this, void 0, void 0, function () {\n      var res;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , removeUserFromGroup(this.graphqlClient, this.tokenProvider, {\n              code: group,\n              userIds: [userId]\n            })];\n\n          case 1:\n            res = _a.sent();\n            return [2\n            /*return*/\n            , res.removeUserFromGroup];\n        }\n      });\n    });\n  };\n  /**\n   * @name listRoles\n   * @name_zh 获取用户角色列表\n   * @description 获取用户的角色列表\n   *\n   * @param {string} userId 用户 ID\n   * @param {string} namespace 权限组命名空间\n   *\n   * @example\n   *\n   * const { list, totalCount} = await managementClient.users.listRoles(\"USERID\");\n   *\n   * @returns {Promise<DeepPartial<PaginatedRoles>>}\n   * @memberof UsersManagementClient\n   */\n\n\n  UsersManagementClient.prototype.listRoles = function (userId, namespace) {\n    return __awaiter(this, void 0, void 0, function () {\n      var user;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , getUserRoles(this.graphqlClient, this.tokenProvider, {\n              id: userId,\n              namespace: namespace\n            })];\n\n          case 1:\n            user = _a.sent().user;\n\n            if (!user) {\n              throw new Error('用户不存在！');\n            }\n\n            return [2\n            /*return*/\n            , user.roles];\n        }\n      });\n    });\n  };\n  /**\n   * @name addRoles\n   * @name_zh 添加角色\n   * @description 将用户加入角色\n   *\n   * @param {string} userId 用户 ID\n   * @param {string} roles 角色 code 列表\n   * @param {string} namespace 权限组命名空间\n   *\n   * @example\n   *\n   * const { code, message } = await managementClient.users.addRoles(\"USERID\", [\"ROLEA\"]);\n   *\n   * @returns {Promise<CommonMessage>}\n   * @memberof UsersManagementClient\n   */\n\n\n  UsersManagementClient.prototype.addRoles = function (userId, roles, namespace) {\n    return __awaiter(this, void 0, void 0, function () {\n      var data;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , assignRole(this.graphqlClient, this.tokenProvider, {\n              roleCodes: roles,\n              userIds: [userId],\n              namespace: namespace\n            })];\n\n          case 1:\n            data = _a.sent().assignRole;\n            return [2\n            /*return*/\n            , data];\n        }\n      });\n    });\n  };\n  /**\n   * @name removeRoles\n   * @name_zh 移除角色\n   * @description 将用户从角色中移除\n   *\n   * @param {string} userId 用户 ID\n   * @param {string} roles 角色 code 列表\n   * @param {string} namespace 权限分组 code\n   *\n   * @example\n   *\n   * const { code, message } = await managementClient.users.removeRoles(\"USERID\", [\"ROLEA\"]);\n   *\n   * @returns {Promise<CommonMessage>}\n   * @memberof UsersManagementClient\n   */\n\n\n  UsersManagementClient.prototype.removeRoles = function (userId, roles, namespace) {\n    return __awaiter(this, void 0, void 0, function () {\n      var data;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , revokeRole(this.graphqlClient, this.tokenProvider, {\n              roleCodes: roles,\n              userIds: [userId],\n              namespace: namespace\n            })];\n\n          case 1:\n            data = _a.sent().revokeRole;\n            return [2\n            /*return*/\n            , data];\n        }\n      });\n    });\n  };\n  /**\n   * @name listOrg\n   * @name_zh 获取用户所在组织机构\n   * @description 获取用户所在组织机构，以及他在该组织机构内的的节点路径。\n   *\n   * @param {string} userId 用户 ID\n   *\n   * @example\n   *\n   * const data = await managementClient.users.listOrgs(\"USERID\");\n   *\n   * @returns {Promise<UserOrgList>}\n   *\n   * @memberof UsersManagementClient\n   */\n\n\n  UsersManagementClient.prototype.listOrgs = function (userId) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.httpClient.request({\n              method: 'GET',\n              url: this.options.host + \"/api/v2/users/\" + userId + \"/orgs\"\n            })];\n\n          case 1:\n            return [2\n            /*return*/\n            , _a.sent()];\n        }\n      });\n    });\n  };\n  /**\n   * @name listDepartment\n   * @name_zh 获取用户所在部门\n   * @description 获取用户所在部门列表\n   *\n   * @param {string} userId 用户 ID\n   *\n   * @example\n   *\n   * const data = await managementClient.users.listDepartment(\"USERID\");\n   *\n   * @returns {Promise<UserDepartmentList>}\n   *\n   * @memberof UsersManagementClient\n   */\n\n\n  UsersManagementClient.prototype.listDepartment = function (userId) {\n    return __awaiter(this, void 0, void 0, function () {\n      var departments;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , getUserDepartments(this.graphqlClient, this.tokenProvider, {\n              id: userId\n            })];\n\n          case 1:\n            departments = _a.sent().user.departments;\n            return [2\n            /*return*/\n            , departments];\n        }\n      });\n    });\n  };\n  /**\n   * @description 获取用户被授权的所有资源\n   *\n   * @param userId\n   * @param namespace\n   */\n\n\n  UsersManagementClient.prototype.listAuthorizedResources = function (userId, namespace, options) {\n    return __awaiter(this, void 0, void 0, function () {\n      var resourceType, user, _a, list, totalCount;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            resourceType = (options || {}).resourceType;\n            return [4\n            /*yield*/\n            , listUserAuthorizedResources(this.graphqlClient, this.tokenProvider, {\n              id: userId,\n              namespace: namespace,\n              resourceType: resourceType\n            })];\n\n          case 1:\n            user = _b.sent().user;\n\n            if (!user) {\n              throw new Error('用户不存在');\n            }\n\n            _a = user.authorizedResources, list = _a.list, totalCount = _a.totalCount;\n            list = formatAuthorizedResources(list);\n            return [2\n            /*return*/\n            , {\n              list: list,\n              totalCount: totalCount\n            }];\n        }\n      });\n    });\n  };\n  /**\n   * @description 获取某个用户的所有自定义数据\n   * @param userId: 用户 ID\n   *\n   */\n\n\n  UsersManagementClient.prototype.getUdfValue = function (userId) {\n    return __awaiter(this, void 0, void 0, function () {\n      var list;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , udv(this.graphqlClient, this.tokenProvider, {\n              targetType: UdfTargetType.User,\n              targetId: userId\n            })];\n\n          case 1:\n            list = _a.sent().udv;\n            return [2\n            /*return*/\n            , convertUdvToKeyValuePair(list)];\n        }\n      });\n    });\n  };\n  /**\n   * @description 批量获取多个用户的自定义数据\n   *\n   * @param userIds: 用户 ID 列表\n   */\n\n\n  UsersManagementClient.prototype.getUdfValueBatch = function (userIds) {\n    return __awaiter(this, void 0, void 0, function () {\n      var result, ret, _i, result_1, _a, targetId, data;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            if (userIds.length === 0) {\n              throw new Error('empty user id list');\n            }\n\n            return [4\n            /*yield*/\n            , udfValueBatch(this.graphqlClient, this.tokenProvider, {\n              targetType: UdfTargetType.User,\n              targetIds: userIds\n            })];\n\n          case 1:\n            result = _b.sent().udfValueBatch;\n            ret = {};\n\n            for (_i = 0, result_1 = result; _i < result_1.length; _i++) {\n              _a = result_1[_i], targetId = _a.targetId, data = _a.data;\n              ret[targetId] = convertUdvToKeyValuePair(data);\n            }\n\n            return [2\n            /*return*/\n            , ret];\n        }\n      });\n    });\n  };\n  /**\n   * @description 设置某个用户的自定义数据\n   *\n   * @param userId\n   * @param data\n   */\n\n\n  UsersManagementClient.prototype.setUdfValue = function (userId, data) {\n    return __awaiter(this, void 0, void 0, function () {\n      var result;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (Object.keys(data).length === 0) {\n              throw new Error('empty udf value list');\n            }\n\n            return [4\n            /*yield*/\n            , setUdvBatch(this.graphqlClient, this.tokenProvider, {\n              targetType: UdfTargetType.User,\n              targetId: userId,\n              udvList: Object.keys(data).map(function (key) {\n                return {\n                  key: key,\n                  value: JSON.stringify(data[key])\n                };\n              })\n            })];\n\n          case 1:\n            result = _a.sent().setUdvBatch;\n            return [2\n            /*return*/\n            , result];\n        }\n      });\n    });\n  };\n  /**\n   * @description 批量设置自定义数据\n   *\n   */\n\n\n  UsersManagementClient.prototype.setUdfValueBatch = function (input) {\n    return __awaiter(this, void 0, void 0, function () {\n      var params;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (input.length === 0) {\n              throw new Error('empty input list');\n            }\n\n            params = [];\n            input.forEach(function (_a) {\n              var userId = _a.userId,\n                  data = _a.data;\n\n              for (var _i = 0, _b = Object.keys(data); _i < _b.length; _i++) {\n                var key = _b[_i];\n                params.push({\n                  targetId: userId,\n                  key: key,\n                  value: JSON.stringify(data[key])\n                });\n              }\n            });\n            return [4\n            /*yield*/\n            , setUdfValueBatch(this.graphqlClient, this.tokenProvider, {\n              targetType: UdfTargetType.User,\n              input: params\n            })];\n\n          case 1:\n            _a.sent();\n\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * @description 清除用户的自定义数据\n   *\n   */\n\n\n  UsersManagementClient.prototype.removeUdfValue = function (userId, key) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , removeUdv(this.graphqlClient, this.tokenProvider, {\n              targetType: UdfTargetType.User,\n              targetId: userId,\n              key: key\n            })];\n\n          case 1:\n            _a.sent();\n\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * 判断用户是否有某个角色\n   * @param userId 用户 ID\n   * @param roleCode 角色 Code\n   * @param namespace 权限分组 ID\n   */\n\n\n  UsersManagementClient.prototype.hasRole = function (userId, roleCode, namespace) {\n    return __awaiter(this, void 0, void 0, function () {\n      var roleList, hasRole;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.listRoles(userId, namespace)];\n\n          case 1:\n            roleList = _a.sent();\n\n            if (roleList.totalCount < 1) {\n              return [2\n              /*return*/\n              , false];\n            }\n\n            hasRole = false;\n            roleList.list.forEach(function (item) {\n              if (item.code === roleCode) {\n                hasRole = true;\n              }\n            });\n            return [2\n            /*return*/\n            , hasRole];\n        }\n      });\n    });\n  };\n  /**\n   * @description 强制一批用户下线\n   */\n\n\n  UsersManagementClient.prototype.kick = function (userIds) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.httpClient.request({\n              url: this.options.host + \"/api/v2/users/kick\",\n              method: 'POST',\n              data: {\n                userIds: userIds\n              }\n            })];\n\n          case 1:\n            _a.sent();\n\n            return [2\n            /*return*/\n            , {\n              code: 200,\n              message: '强制下线成功'\n            }];\n        }\n      });\n    });\n  };\n\n  UsersManagementClient.prototype.logout = function (options) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (!options || !options.userId) {\n              throw new Error('请传入 options.userId，内容为要下线的用户 ID');\n            }\n\n            return [4\n            /*yield*/\n            , this.httpClient.request({\n              url: this.options.host + \"/logout\",\n              method: 'GET',\n              params: {\n                appId: options.appId,\n                userId: options.userId\n              }\n            })];\n\n          case 1:\n            _a.sent();\n\n            return [2\n            /*return*/\n            , {\n              code: 200,\n              message: '强制下线成功'\n            }];\n        }\n      });\n    });\n  };\n  /**\n   * @description 查询用户的登录状态\n   */\n\n\n  UsersManagementClient.prototype.checkLoginStatus = function (userId, appId, deviceId) {\n    return __awaiter(this, void 0, void 0, function () {\n      var result;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.httpClient.request({\n              method: 'GET',\n              url: this.options.host + \"/api/v2/users/login-status\",\n              params: {\n                userId: userId,\n                appId: appId,\n                deviceId: deviceId\n              }\n            })];\n\n          case 1:\n            result = _a.sent();\n            return [2\n            /*return*/\n            , result];\n        }\n      });\n    });\n  };\n  /**\n   * 审计日志列表\n   * @param options.page 当前页数\n   * @param options.limit 每页显示条数\n   * @param options.clientIp 客户端 IP 地址\n   * @param options.operationName 操作类型\n   * @param options.operatoArn 用户 Arn 通过 searchUser 方法获得\n   * @returns Promise<UserActions>\n   */\n\n\n  UsersManagementClient.prototype.listUserActions = function (options) {\n    var _a;\n\n    if (options === void 0) {\n      options = {\n        page: 1,\n        limit: 10\n      };\n    }\n\n    return __awaiter(this, void 0, void 0, function () {\n      var requestParam, result, list, totalCount;\n\n      var _this = this;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            requestParam = {};\n\n            if (options === null || options === void 0 ? void 0 : options.clientIp) {\n              requestParam.clientip = options.clientIp;\n            }\n\n            if (options === null || options === void 0 ? void 0 : options.operationNames) {\n              requestParam.operation_name = options.operationNames;\n            }\n\n            if ((_a = options === null || options === void 0 ? void 0 : options.userIds) === null || _a === void 0 ? void 0 : _a.length) {\n              requestParam.operator_arn = options.userIds.map(function (userId) {\n                return \"arn:cn:authing:\" + _this.options.userPoolId + \":user:\" + userId;\n              });\n            }\n\n            if (options === null || options === void 0 ? void 0 : options.page) {\n              requestParam.page = options.page;\n            }\n\n            if (options === null || options === void 0 ? void 0 : options.limit) {\n              requestParam.limit = options.limit;\n            }\n\n            if (options === null || options === void 0 ? void 0 : options.excludeNonAppRecords) {\n              requestParam.exclude_non_app_records = '1';\n            }\n\n            if (options === null || options === void 0 ? void 0 : options.appIds) {\n              requestParam.app_id = options === null || options === void 0 ? void 0 : options.appIds;\n            }\n\n            if ((options === null || options === void 0 ? void 0 : options.start) !== undefined) {\n              requestParam.start = options === null || options === void 0 ? void 0 : options.start;\n            }\n\n            if ((options === null || options === void 0 ? void 0 : options.end) !== undefined) {\n              requestParam.end = options === null || options === void 0 ? void 0 : options.end;\n            }\n\n            return [4\n            /*yield*/\n            , this.httpClient.request({\n              method: 'GET',\n              url: this.options.host + \"/api/v2/analysis/user-action\",\n              params: __assign({}, requestParam)\n            })];\n\n          case 1:\n            result = _b.sent();\n            list = result.list, totalCount = result.totalCount;\n            return [2\n            /*return*/\n            , {\n              list: list.map(function (log) {\n                var _a, _b, _c, _d, _e, _f;\n\n                return {\n                  userpoolId: log.userpool_id,\n                  userId: (_a = log.user) === null || _a === void 0 ? void 0 : _a.id,\n                  username: (_b = log.user) === null || _b === void 0 ? void 0 : _b.displayName,\n                  cityName: (_c = log.geoip) === null || _c === void 0 ? void 0 : _c.city_name,\n                  regionName: (_d = log.geoip) === null || _d === void 0 ? void 0 : _d.region_name,\n                  clientIp: (_e = log.geoip) === null || _e === void 0 ? void 0 : _e.ip,\n                  operationDesc: log.operation_desc,\n                  operationName: log.operation_name,\n                  timestamp: log.timestamp,\n                  appId: log.app_id,\n                  appName: (_f = log.app) === null || _f === void 0 ? void 0 : _f.name\n                };\n              }),\n              totalCount: totalCount\n            }];\n        }\n      });\n    });\n  };\n  /**\n   * @description 发送首次登录验证邮件\n   *\n   */\n\n\n  UsersManagementClient.prototype.sendFirstLoginVerifyEmail = function (options) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , sendFirstLoginVerifyEmail(this.graphqlClient, this.tokenProvider, options)];\n\n          case 1:\n            _a.sent();\n\n            return [2\n            /*return*/\n            , true];\n        }\n      });\n    });\n  };\n  /**\n   * @description 获取用户所在租户\n   *\n   */\n\n\n  UsersManagementClient.prototype.getUserTenants = function (userId) {\n    return __awaiter(this, void 0, void 0, function () {\n      var result;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.httpClient.request({\n              method: 'GET',\n              url: this.options.host + \"/api/v2/users/\" + userId + \"/tenants\"\n            })];\n\n          case 1:\n            result = _a.sent();\n            return [2\n            /*return*/\n            , result];\n        }\n      });\n    });\n  };\n  /**\n   * @description 给用户绑定一个身份\n   *\n   */\n\n\n  UsersManagementClient.prototype.linkIdentity = function (options) {\n    return __awaiter(this, void 0, void 0, function () {\n      var result;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.fastHttpClient.request({\n              method: 'POST',\n              url: this.options.host + \"/api/v2/users/identity/link\",\n              data: __assign({}, options)\n            })];\n\n          case 1:\n            result = _a.sent();\n            return [2\n            /*return*/\n            , result];\n        }\n      });\n    });\n  };\n  /**\n   * @description 解除用户某个身份源下的所有身份\n   *\n   */\n\n\n  UsersManagementClient.prototype.unlinkIdentity = function (options) {\n    return __awaiter(this, void 0, void 0, function () {\n      var result;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.fastHttpClient.request({\n              method: 'POST',\n              url: this.options.host + \"/api/v2/users/identity/unlink\",\n              data: __assign({}, options)\n            })];\n\n          case 1:\n            result = _a.sent();\n            return [2\n            /*return*/\n            , result];\n        }\n      });\n    });\n  };\n  /**\n   * @name getApplicationLoginUserNum\n   * @name_zh 查询登录过某个应用的用户数量\n   * @description 查询登录过某个应用的用户数量\n   *\n   * @param {string} [appId] 应用 ID\n   *\n   * @example\n   *\n   * const user = await managementClient.users.getApplicationLoginUserNum();\n   */\n\n\n  UsersManagementClient.prototype.getApplicationLoginUserNum = function (options) {\n    return __awaiter(this, void 0, void 0, function () {\n      var data;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.httpClient.request({\n              method: 'GET',\n              url: this.options.host + \"/api/v2/analysis/total-login-count\",\n              params: {\n                appId: options.appId\n              }\n            })];\n\n          case 1:\n            data = _a.sent();\n            return [2\n            /*return*/\n            , data];\n        }\n      });\n    });\n  };\n  /**\n   * @name getUdfFieldUserNum\n   * @name_zh 查询应用下使用了某个用户自定义字段的用户数量\n   * @description 查询使用了某个用户自定义字段的登录过某个应用的用户数量\n   *\n   * @param {string} [definedFieldKey] 用户自定义字段\n   * @param {string} [appId] 应用 ID\n   *\n   * @example\n   *\n   * const user = await managementClient.users.getUdfFieldUserNum();\n   */\n\n\n  UsersManagementClient.prototype.getUdfFieldUserNum = function (options) {\n    return __awaiter(this, void 0, void 0, function () {\n      var data;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.httpClient.request({\n              method: 'GET',\n              url: this.options.host + \"/api/v2/analysis/exist-defined-field-count\",\n              params: {\n                definedFieldKey: options.definedFieldKey,\n                appId: options.appId\n              }\n            })];\n\n          case 1:\n            data = _a.sent();\n            return [2\n            /*return*/\n            , data];\n        }\n      });\n    });\n  };\n\n  return UsersManagementClient;\n}();\n\nexport { UsersManagementClient };","map":{"version":3,"sources":["../../../../src/lib/management/UsersManagementClient.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nimport { deleteUser, deleteUsers, users, getUserGroups, updateUser, searchUser, createUser, refreshToken, getUserRoles, assignRole, revokeRole, isUserExists, addUserToGroup, removeUserFromGroup, archivedUsers, findUser, getUserDepartments, listUserAuthorizedResources, udv, udfValueBatch, setUdvBatch, removeUdv, setUdfValueBatch, usersWithCustomData, findUserWithCustomData, searchUserWithCustomData, sendFirstLoginVerifyEmail } from '../graphqlapi';\nimport { UdfTargetType } from '../../types/graphql.v2';\nimport { convertUdvToKeyValuePair, formatAuthorizedResources } from '../utils';\n/**\n * @name UsersManagementClient\n * @description Authing 用户管理模块。\n *\n * 此模块可以进行用户目录增删改查、搜索用户、刷新用户 token、管理用户分组、管理用户角色、管理用户策略授权等操作。\n *\n * 该模块发出的所有操作都将以管理员身份进行，所以不需要进行建议短信验证码等操作，如果你希望以普通用户的身份进行操作，请使用 AuthenticationClient 。\n *\n * @example\n *\n * 请使用以下方式使用该模块：\n * \\`\\`\\`javascript\n * import { ManagementClient } from \"authing-js-sdk\"\n * const managementClient = new ManagementClient({\n *    userPoolId: \"YOUR_USERPOOL_ID\",\n *    secret: \"YOUR_USERPOOL_SECRET\",\n * })\n *\n * managementClient.users.list // 获取用户列表\n * managementClient.users.create // 创建用户\n * managementClient.users.listRoles // 获取用户角色列表\n * managementClient.users.search // 搜索用户\n * \\`\\`\\`\n *\n * @class UsersManagementClient 管理用户\n */\nvar UsersManagementClient = /** @class */ (function () {\n    function UsersManagementClient(options, graphqlClient, httpClient, fastHttpClient, tokenProvider, publickKeyManager) {\n        this.options = options;\n        this.graphqlClient = graphqlClient;\n        this.tokenProvider = tokenProvider;\n        this.httpClient = httpClient;\n        this.fastHttpClient = fastHttpClient;\n        this.publickKeyManager = publickKeyManager;\n    }\n    /**\n     * @name create\n     * @name_zh 创建用户\n     * @description 此接口将以管理员身份创建用户，不需要进行手机号验证码检验等安全检测。\n     *\n     * @param {CreateUserInput} userInfo 用户资料\n     * @param {string} userInfo.email 邮箱，用户池内唯一\n     * @param {boolean} userInfo.emailVerified 邮箱是否已验证\n     * @param {string} userInfo.phone 手机号\n     * @param {boolean} userInfo.phoneVerified 手机号是否验证\n     * @param {string} userInfo.unionid 以社会化登录的用户该字段为用户在第三方社会化登录服务商中的唯一 ID\n     * @param {string} userInfo.openid  微信登录返回的 openid\n     * @param {string} userInfo.password 密码\n     * @param {string} userInfo.registerSource 注册来源，可以多选\n     * @param {string} userInfo.username 用户名\n     * @param {string} userInfo.nickname 昵称\n     * @param {string} userInfo.photo 头像\n     * @param {string} userInfo.company 公司\n     * @param {string} userInfo.browser 浏览器\n     * @param {number} userInfo.loginsCount 登录次数，当你从原有用户系统迁移到 Authing 时可以设置该字段。\n     * @param {string} userInfo.lastLogin 上次登录时间, 符合 ISO8601 格式的时间字符串。(如 \"2017-06-07T14:34:08.700Z\", \"2017-06-07T14:34:08.700 or \"2017-06-07T14:34:08+04:00\")\n     * @param {string} userInfo.lastIP 用户最近一次登录（或其他活动）的 IP\n     * @param {string} userInfo.signedUp 注册时间，符合 ISO8601 格式的时间字符串。(如 \"2017-06-07T14:34:08.700Z\", \"2017-06-07T14:34:08.700 or \"2017-06-07T14:34:08+04:00\")\n     * @param {boolean} userInfo.blocked 账号是否被禁用\n     * @param {boolean} userInfo.isDeleted 标记账号是否被删除\n     * @param {string} userInfo.device 设备\n     * @param {string} userInfo.lastIP 最近登录的 IP\n     * @param {string} userInfo.name Name\n     * @param {string} userInfo.givenName Given Name\n     * @param {string} userInfo.familyName Family Name\n     * @param {string} userInfo.middleName Middle Name\n     * @param {string} userInfo.profile Profile Url\n     * @param {string} userInfo.preferredUsername Preferred Name\n     * @param {string} userInfo.website 个人网站\n     * @param {string} userInfo.gender 性别, F 表示男性、W 表示女性、未知表示 U\n     * @param {string} userInfo.birthdate 生日\n     * @param {string} userInfo.zoneinfo 时区\n     * @param {string} userInfo.locale 语言\n     * @param {string} userInfo.address 地址\n     * @param {string} userInfo.streetAddress 街道地址\n     * @param {string} userInfo.locality\n     * @param {string} userInfo.region 地域\n     * @param {string} userInfo.postalCode 邮编\n     * @param {string} userInfo.city 城市\n     * @param {string} userInfo.province 省份\n     * @param {string} userInfo.country 国家\n     *\n     * @example\n     *\n     * const user = await managementClient.users.create({\n     *    username: 'bob',\n     *    password: 'passw0rd'\n     * })\n     *\n     * @example\n     *\n     * const user = await managementClient.users.create({\n     *    nickname: 'Nick',\n     *    phone: '176xxxx7041', // 由于是管理员操作，所以检验手机号验证码, 如果你需要检验，请使用  AuthenticationClient\n     *    loginsCount: 2 // 原有用户系统记录的用户登录次数\n     *    signedUp: '2020-10-15T17:55:37+08:00' // 原有用户系统记录的用户注册时间\n     * })\n     *\n     * @returns {Promise<User>}\n     * @memberof UsersManagementClient\n     */\n    UsersManagementClient.prototype.create = function (userInfo, options) {\n        return __awaiter(this, void 0, void 0, function () {\n            var _a, _b, keepPassword, _c, resetPasswordOnFirstLogin, identity, _d, _e, _f, _g, user;\n            return __generator(this, function (_h) {\n                switch (_h.label) {\n                    case 0:\n                        _a = options || {}, _b = _a.keepPassword, keepPassword = _b === void 0 ? false : _b, _c = _a.resetPasswordOnFirstLogin, resetPasswordOnFirstLogin = _c === void 0 ? false : _c, identity = _a.identity;\n                        if (!(userInfo === null || userInfo === void 0 ? void 0 : userInfo.password)) return [3 /*break*/, 3];\n                        _d = userInfo;\n                        _f = (_e = this.options).encryptFunction;\n                        _g = [userInfo.password];\n                        return [4 /*yield*/, this.publickKeyManager.getPublicKey()];\n                    case 1: return [4 /*yield*/, _f.apply(_e, _g.concat([_h.sent(), this.options.encryption]))];\n                    case 2:\n                        _d.password = _h.sent();\n                        _h.label = 3;\n                    case 3: return [4 /*yield*/, createUser(this.graphqlClient, this.tokenProvider, {\n                            userInfo: userInfo,\n                            keepPassword: keepPassword,\n                            resetPasswordOnFirstLogin: resetPasswordOnFirstLogin,\n                            identity: identity\n                        })];\n                    case 4:\n                        user = (_h.sent()).createUser;\n                        return [2 /*return*/, user];\n                }\n            });\n        });\n    };\n    /**\n     * @name update\n     * @name_zh 修改用户资料\n     * @description 修改用户资料\n     *\n     * @param {string} id 用户 ID\n     * @param {UpdateUserInput} updates 修改的用户资料\n     * @param {string} updates.email 邮箱\n     * @param {boolean} updates.emailVerified 邮箱是否已验证\n     * @param {string} updates.phone 手机号\n     * @param {boolean} updates.phoneVerified 手机号是否验证\n     * @param {string} updates.unionid 以社会化登录的用户该字段为用户在第三方社会化登录服务商中的唯一 ID\n     * @param {string} updates.openid  微信登录返回的 openid\n     * @param {string} updates.password 密码\n     * @param {string} updates.registerSource 注册来源，可以多选\n     * @param {string} updates.tokenExpiredAt token 过期时间，符合 ISO8601 格式的时间字符串。(如 \"2017-06-07T14:34:08.700Z\", \"2017-06-07T14:34:08.700 or \"2017-06-07T14:34:08+04:00\")。\n     * 将该字段设置为小于当前时间可以让用户的 token 失效。\n     * @param {string} updates.username 用户名\n     * @param {string} updates.nickname 昵称\n     * @param {string} updates.photo 头像\n     * @param {string} updates.company 公司\n     * @param {string} updates.browser 浏览器\n     * @param {number} updates.loginsCount 登录次数，当你从原有用户系统迁移到 Authing 时可以设置该字段。\n     * @param {string} updates.lastLogin 上次登录时间, 符合 ISO8601 格式的时间字符串。(如 \"2017-06-07T14:34:08.700Z\", \"2017-06-07T14:34:08.700 or \"2017-06-07T14:34:08+04:00\")\n     * @param {string} updates.lastIP 用户最近一次登录（或其他活动）的 IP\n     * @param {string} updates.signedUp 注册时间，符合 ISO8601 格式的时间字符串。(如 \"2017-06-07T14:34:08.700Z\", \"2017-06-07T14:34:08.700 or \"2017-06-07T14:34:08+04:00\")\n     * @param {boolean} updates.blocked 账号是否被禁用\n     * @param {string} updates.device 设备\n     * @param {string} updates.lastIP 最近登录的 IP\n     * @param {string} updates.name Name\n     * @param {string} updates.givenName Given Name\n     * @param {string} updates.familyName Family Name\n     * @param {string} updates.middleName Middle Name\n     * @param {string} updates.profile Profile Url\n     * @param {string} updates.preferredUsername Preferred Name\n     * @param {string} updates.website 个人网站\n     * @param {string} updates.gender 性别, F 表示男性、W 表示女性、未知表示 U\n     * @param {string} updates.birthdate 生日\n     * @param {string} updates.zoneinfo 时区\n     * @param {string} updates.locale 语言\n     * @param {string} updates.address 地址\n     * @param {string} updates.streetAddress 街道地址\n     * @param {string} updates.locality\n     * @param {string} updates.region 地域\n     * @param {string} updates.postalCode 邮编\n     * @param {string} updates.city 城市\n     * @param {string} updates.province 省份\n     * @param {string} updates.country 国家\n     *\n     * @example\n     *\n     * const user = await managementClient.users.update(\"USERID\", {\n     *    nickname: \"Nick\"\n     * })\n     *\n     * @example\n     *\n     * const user = await managementClient.users.update(\"USERID\" ,{\n     *    nickname: 'Nick',\n     *    phone: '176xxxx7041', // 由于是管理员操作，所以检验手机号验证码, 如果你需要检验，请使用  AuthenticationClient\n     *    tokenExpiredAt: '2020-10-15T17:55:37+08:00'\n     * })\n     *\n     * @returns {Promise<User>}\n     * @memberof UsersManagementClient   *\n     */\n    UsersManagementClient.prototype.update = function (id, updates) {\n        return __awaiter(this, void 0, void 0, function () {\n            var _a, _b, _c, _d, user;\n            return __generator(this, function (_e) {\n                switch (_e.label) {\n                    case 0:\n                        if (!(updates && updates.password)) return [3 /*break*/, 3];\n                        _a = updates;\n                        _c = (_b = this.options).encryptFunction;\n                        _d = [updates.password];\n                        return [4 /*yield*/, this.publickKeyManager.getPublicKey()];\n                    case 1: return [4 /*yield*/, _c.apply(_b, _d.concat([_e.sent(), this.options.encryption]))];\n                    case 2:\n                        _a.password = _e.sent();\n                        _e.label = 3;\n                    case 3: return [4 /*yield*/, updateUser(this.graphqlClient, this.tokenProvider, {\n                            id: id,\n                            input: updates\n                        })];\n                    case 4:\n                        user = (_e.sent()).updateUser;\n                        return [2 /*return*/, user];\n                }\n            });\n        });\n    };\n    /**\n     * @name detail\n     * @name_zh 获取用户详情\n     * @description 通过用户 ID 获取用户详情，如果你想通过 token 获取用户详情，请使用 AuthenticationClient SDK 。\n     *\n     * @param {string} userId 用户 ID\n     *\n     * @example\n     *\n     * const user = await managementClient.users.detail('USERID');\n     *\n     * @returns {Promise<User>}\n     * @memberof UsersManagementClient\n     */\n    UsersManagementClient.prototype.detail = function (userId, options) {\n        return __awaiter(this, void 0, void 0, function () {\n            var _a, withCustomData, data;\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        _a = (options || {}).withCustomData, withCustomData = _a === void 0 ? false : _a;\n                        return [4 /*yield*/, this.httpClient.request({\n                                url: this.options.host + \"/api/v2/users/\" + userId,\n                                params: { with_custom_data: withCustomData },\n                                method: 'GET'\n                            })];\n                    case 1:\n                        data = _b.sent();\n                        if (withCustomData && data) {\n                            // @ts-ignore\n                            data.customData = convertUdvToKeyValuePair(data.customData);\n                            return [2 /*return*/, data];\n                        }\n                        return [2 /*return*/, data];\n                }\n            });\n        });\n    };\n    /**\n     * @name delete\n     * @name_zh 删除用户\n     * @description 删除用户\n     *\n     * @param {string} userId 用户 ID\n     *\n     * @example\n     *\n     * const user = await managementClient.users.delete('USERID');\n     *\n     * @returns {Promise<CommonMessage>}\n     * @memberof UsersManagementClient\n     */\n    UsersManagementClient.prototype.delete = function (userId) {\n        return __awaiter(this, void 0, void 0, function () {\n            var data;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, deleteUser(this.graphqlClient, this.tokenProvider, {\n                            id: userId\n                        })];\n                    case 1:\n                        data = (_a.sent()).deleteUser;\n                        return [2 /*return*/, data];\n                }\n            });\n        });\n    };\n    /**\n     * @name deleteMany\n     * @name_zh 批量删除用户\n     * @description 批量删除用户\n     *\n     * @param {string[]} userIds 用户 ID 列表\n     *\n     * @example\n     *\n     * const user = await managementClient.users.deleteMany(['USERID']);\n     *\n     * @returns {Promise<CommonMessage>}\n     * @memberof UsersManagementClient\n     */\n    UsersManagementClient.prototype.deleteMany = function (userIds) {\n        return __awaiter(this, void 0, void 0, function () {\n            var data;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, deleteUsers(this.graphqlClient, this.tokenProvider, {\n                            ids: userIds\n                        })];\n                    case 1:\n                        data = (_a.sent()).deleteUsers;\n                        return [2 /*return*/, data];\n                }\n            });\n        });\n    };\n    /**\n     * @name batch\n     * @name_zh 批量获取用户\n     * @description 通过 ID、username、email、phone、email、externalId 批量获取用户详情\n     *\n     * @param {string[]} identifiers 需要查询的数据列表，如 用户 ID 列表\n     * @param {string} [type] 列表类型，可选值为 'id' ,'username' ,'phone' ,'email', 'externalId'，默认为 'id'\n     *\n     * @example\n     *\n     * const users = await managementClient.users.batch(['USERID'], options);\n     *\n     * @returns {Promise<CommonMessage>}\n     * @memberof UsersManagementClient\n     */\n    UsersManagementClient.prototype.batch = function (ids, options) {\n        return __awaiter(this, void 0, void 0, function () {\n            var _a, _b, queryField, _c, withCustomData, users;\n            return __generator(this, function (_d) {\n                switch (_d.label) {\n                    case 0:\n                        _a = options || {}, _b = _a.queryField, queryField = _b === void 0 ? 'id' : _b, _c = _a.withCustomData, withCustomData = _c === void 0 ? false : _c;\n                        return [4 /*yield*/, this.httpClient.request({\n                                url: this.options.host + \"/api/v2/users/batch\",\n                                method: 'POST',\n                                data: {\n                                    ids: ids,\n                                    type: queryField,\n                                    withCustomData: withCustomData\n                                }\n                            })];\n                    case 1:\n                        users = _d.sent();\n                        if (withCustomData) {\n                            users.map(function (user) {\n                                // @ts-ignore\n                                user.customData = convertUdvToKeyValuePair(user.customData);\n                                return user;\n                            });\n                            return [2 /*return*/, users];\n                        }\n                        return [2 /*return*/, users];\n                }\n            });\n        });\n    };\n    /**\n     * @name list\n     * @name_zh 获取用户列表\n     * @description 获取用户池用户列表\n     *\n     * @param {number} [page=1] 页码数, 从 1 开始\n     * @param {number} [limit=10] 每页包含的用户数\n     *\n     * @example\n     *\n     * const user = await managementClient.users.list();\n     *\n     * @returns\n     * @memberof UsersManagementClient\n     */\n    UsersManagementClient.prototype.list = function (page, limit, options) {\n        if (page === void 0) { page = 1; }\n        if (limit === void 0) { limit = 10; }\n        return __awaiter(this, void 0, void 0, function () {\n            var _a, _b, withCustomData, _c, excludeUsersInOrg, data, totalCount, list, data;\n            return __generator(this, function (_d) {\n                switch (_d.label) {\n                    case 0:\n                        _a = options || {}, _b = _a.withCustomData, withCustomData = _b === void 0 ? false : _b, _c = _a.excludeUsersInOrg, excludeUsersInOrg = _c === void 0 ? false : _c;\n                        if (!withCustomData) return [3 /*break*/, 2];\n                        return [4 /*yield*/, usersWithCustomData(this.graphqlClient, this.tokenProvider, {\n                                page: page,\n                                limit: limit,\n                                excludeUsersInOrg: excludeUsersInOrg\n                            })];\n                    case 1:\n                        data = (_d.sent()).users;\n                        totalCount = data.totalCount, list = data.list;\n                        list = list.map(function (user) {\n                            // @ts-ignore\n                            user.customData = convertUdvToKeyValuePair(user.customData);\n                            return user;\n                        });\n                        return [2 /*return*/, {\n                                totalCount: totalCount,\n                                list: list\n                            }];\n                    case 2: return [4 /*yield*/, users(this.graphqlClient, this.tokenProvider, {\n                            page: page,\n                            limit: limit,\n                            excludeUsersInOrg: excludeUsersInOrg\n                        })];\n                    case 3:\n                        data = (_d.sent()).users;\n                        return [2 /*return*/, data];\n                }\n            });\n        });\n    };\n    /**\n     * @name filter\n     * @name_zh 筛选用户列表\n     * @description 筛选用户池用户列表\n     *\n     * @param {number} [page=1] 页码数, 从 1 开始\n     * @param {number} [limit=10] 每页包含的用户数\n     * @param {[]} [filter=[]] 筛选项\n     *\n     * @example\n     *\n     * const user = await managementClient.users.filter();\n     *\n     * @returns\n     * @memberof UsersManagementClient\n     */\n    UsersManagementClient.prototype.filter = function (options) {\n        return __awaiter(this, void 0, void 0, function () {\n            var data;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.httpClient.request({\n                            method: 'POST',\n                            url: this.options.host + \"/api/v2/users/filter\",\n                            data: options\n                        })];\n                    case 1:\n                        data = _a.sent();\n                        return [2 /*return*/, data];\n                }\n            });\n        });\n    };\n    /**\n     * @name listArchivedUsers\n     * @name_zh 获取已归档用户列表\n     * @description 获取已归档用户列表\n     *\n     * @param {number} [page=1] 页码数, 从 1 开始\n     * @param {number} [limit=10] 每页包含的用户数\n     *\n     * @example\n     *\n     * const user = await managementClient.users.listArchivedUsers();\n     *\n     * @returns\n     * @memberof UsersManagementClient\n     */\n    UsersManagementClient.prototype.listArchivedUsers = function (page, limit) {\n        if (page === void 0) { page = 1; }\n        if (limit === void 0) { limit = 10; }\n        return __awaiter(this, void 0, void 0, function () {\n            var data;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, archivedUsers(this.graphqlClient, this.tokenProvider, {\n                            page: page,\n                            limit: limit\n                        })];\n                    case 1:\n                        data = (_a.sent()).archivedUsers;\n                        return [2 /*return*/, data];\n                }\n            });\n        });\n    };\n    /**\n     * @name exists\n     * @name_zh 检查用户是否存在\n     * @description 检查用户是否存在，目前可检测的字段有用户名、邮箱、手机号。\n     *\n     *\n     * @param {Object} options\n     * @param {string} [options.username] 用户名，区分大小写。\n     * @param {string} [options.email] 邮箱，邮箱不区分大小写。\n     * @param {string} [options.phone] 手机号\n     *\n     * @example\n     *\n     * const exists = await managementClient.users.exists({\n     *    username: \"bob\"\n     * });\n     *\n     * @returns {Promise<boolean>}\n     * @memberof UsersManagementClient\n     */\n    UsersManagementClient.prototype.exists = function (options) {\n        return __awaiter(this, void 0, void 0, function () {\n            var username, email, phone, externalId, data;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        username = options.username, email = options.email, phone = options.phone, externalId = options.externalId;\n                        return [4 /*yield*/, isUserExists(this.graphqlClient, this.tokenProvider, {\n                                username: username,\n                                email: email,\n                                phone: phone,\n                                externalId: externalId\n                            })];\n                    case 1:\n                        data = (_a.sent()).isUserExists;\n                        return [2 /*return*/, data];\n                }\n            });\n        });\n    };\n    /**\n     * @name find\n     * @name_zh 查找用户\n     * @description 通过用户名、邮箱、手机号查找用户\n     *\n     * @param {Object} options\n     * @param {string} [options.username] 用户名，区分大小写。\n     * @param {string} [options.email] 邮箱，邮箱不区分大小写。\n     * @param {string} [options.phone] 手机号\n     * @param {string} [options.externalId] externalId\n     *\n     * @memberof UsersManagementClient\n     */\n    UsersManagementClient.prototype.find = function (options) {\n        return __awaiter(this, void 0, void 0, function () {\n            var username, email, phone, externalId, _a, withCustomData, identity, user, user;\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        username = options.username, email = options.email, phone = options.phone, externalId = options.externalId, _a = options.withCustomData, withCustomData = _a === void 0 ? false : _a, identity = options.identity;\n                        if (!withCustomData) return [3 /*break*/, 2];\n                        return [4 /*yield*/, findUserWithCustomData(this.graphqlClient, this.tokenProvider, {\n                                username: username,\n                                email: email,\n                                phone: phone,\n                                externalId: externalId\n                            })];\n                    case 1:\n                        user = (_b.sent()).findUser;\n                        // @ts-ignore\n                        user.customData = convertUdvToKeyValuePair(user.customData);\n                        return [2 /*return*/, user];\n                    case 2: return [4 /*yield*/, findUser(this.graphqlClient, this.tokenProvider, {\n                            username: username,\n                            email: email,\n                            phone: phone,\n                            externalId: externalId,\n                            identity: identity\n                        })];\n                    case 3:\n                        user = (_b.sent()).findUser;\n                        return [2 /*return*/, user];\n                }\n            });\n        });\n    };\n    /**\n     * @name search\n     * @name_zh 搜索用户\n     * @description 根据关键字搜索用户\n     *\n     * @param query 搜索内容\n     * @param options 选项\n     * @param {string[]} [options.fields] 搜索用户字段，如果不指定，默认会从 username、nickname、email、phone、company、name、givenName、familyName、middleName、profile、preferredUsername 这些字段进行模糊搜索。\n     * 如果你需要精确查找，请使用 find 方法。\n     * @param {number} [options.page=1]\n     * @param {number} [options.limit=10]\n     * @param {Object} [options.departmentOpts] 限制条件，用户所在的部门\n     * @param {string} [options.departmentOpts.departmentId] 部门 ID\n     * @param {string} [options.departmentOpts.includeChildrenDepartments] 是否包含此部门的子部门\n     *\n     * @example\n     *\n     * const { totalCount, list } = await managementClient.users.search(\"Bob\");\n     *\n     * @returns {Promise<PaginatedUsers>}\n     * @memberof UsersManagementClient\n     */\n    UsersManagementClient.prototype.search = function (query, options) {\n        return __awaiter(this, void 0, void 0, function () {\n            var fields, _a, page, _b, limit, departmentOpts, groupOpts, roleOpts, _c, withCustomData, data, data, totalCount, list;\n            return __generator(this, function (_d) {\n                switch (_d.label) {\n                    case 0:\n                        options = options || {};\n                        fields = options.fields, _a = options.page, page = _a === void 0 ? 1 : _a, _b = options.limit, limit = _b === void 0 ? 10 : _b, departmentOpts = options.departmentOpts, groupOpts = options.groupOpts, roleOpts = options.roleOpts, _c = options.withCustomData, withCustomData = _c === void 0 ? false : _c;\n                        if (!!withCustomData) return [3 /*break*/, 2];\n                        return [4 /*yield*/, searchUser(this.graphqlClient, this.tokenProvider, {\n                                query: query,\n                                fields: fields,\n                                page: page,\n                                limit: limit,\n                                departmentOpts: departmentOpts,\n                                groupOpts: groupOpts,\n                                roleOpts: roleOpts\n                            })];\n                    case 1:\n                        data = (_d.sent()).searchUser;\n                        return [2 /*return*/, data];\n                    case 2: return [4 /*yield*/, searchUserWithCustomData(this.graphqlClient, this.tokenProvider, {\n                            query: query,\n                            fields: fields,\n                            page: page,\n                            limit: limit,\n                            departmentOpts: departmentOpts,\n                            groupOpts: groupOpts,\n                            roleOpts: roleOpts\n                        })];\n                    case 3:\n                        data = (_d.sent()).searchUser;\n                        totalCount = data.totalCount, list = data.list;\n                        list = list.map(function (user) {\n                            // @ts-ignore\n                            user.customData = convertUdvToKeyValuePair(user.customData);\n                            return user;\n                        });\n                        return [2 /*return*/, {\n                                totalCount: totalCount,\n                                list: list\n                            }];\n                }\n            });\n        });\n    };\n    /**\n     * @name refreshToken\n     * @name_zh 刷新用户 token\n     * @description 刷新用户 token\n     *\n     * @param {string} id 用户 ID\n     *\n     * @example\n     *\n     * const { token } = await managementClient.users.refreshToken(\"USERID\");\n     *\n     * // 检测 token 的最新状态，能够获取到该用户对应的 token\n     *\n     * const data = await managementClient.checkLoginStatus(token, {\n     *   fetchUserDetail: true\n     * });\n     *\n     * @returns {Promise<RefreshToken>}\n     * @memberof UsersManagementClient\n     */\n    UsersManagementClient.prototype.refreshToken = function (id) {\n        return __awaiter(this, void 0, void 0, function () {\n            var data;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, refreshToken(this.graphqlClient, this.tokenProvider, {\n                            id: id\n                        })];\n                    case 1:\n                        data = (_a.sent()).refreshToken;\n                        return [2 /*return*/, data];\n                }\n            });\n        });\n    };\n    /**\n     * @name listGroups\n     * @name_zh 获取用户分组列表\n     * @description 获取用户的分组列表\n     *\n     * @param {string} userId 用户 ID\n     *\n     * @example\n     *\n     * const { list, totalCount} = await managementClient.users.listGroups(\"USERID\");\n     *\n     * @returns {Promise<DeepPartial<PaginatedGroups>>}\n     * @memberof UsersManagementClient\n     */\n    UsersManagementClient.prototype.listGroups = function (userId) {\n        return __awaiter(this, void 0, void 0, function () {\n            var user;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, getUserGroups(this.graphqlClient, this.tokenProvider, {\n                            id: userId\n                        })];\n                    case 1:\n                        user = (_a.sent()).user;\n                        return [2 /*return*/, user.groups];\n                }\n            });\n        });\n    };\n    /**\n     * @name addGroup\n     * @name_zh 加入分组\n     * @description 将用户加入分组\n     *\n     * @param {string} userId 用户 ID\n     * @param {string} group 分组 code\n     *\n     * @example\n     *\n     * const { code, message } = await managementClient.users.addGroup(\"USERID\", \"GROUP_CODE\");\n     *\n     * @returns {Promise<CommonMessage>}\n     * @memberof UsersManagementClient\n     */\n    UsersManagementClient.prototype.addGroup = function (userId, group) {\n        return __awaiter(this, void 0, void 0, function () {\n            var res;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, addUserToGroup(this.graphqlClient, this.tokenProvider, {\n                            userIds: [userId],\n                            code: group\n                        })];\n                    case 1:\n                        res = _a.sent();\n                        return [2 /*return*/, res.addUserToGroup];\n                }\n            });\n        });\n    };\n    /**\n     * @name removeGroup\n     * @name_zh 退出分组\n     * @description 退出分组\n     *\n     * @param {string} userId 用户 ID\n     * @param {string} group 分组 code\n     *\n     * @example\n     *\n     * const { code, message } = await managementClient.users.removeGroup(\"USERID\", \"GROUP_CODE\");\n     *\n     * @returns {Promise<CommonMessage>}\n     * @memberof UsersManagementClient\n     */\n    UsersManagementClient.prototype.removeGroup = function (userId, group) {\n        return __awaiter(this, void 0, void 0, function () {\n            var res;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, removeUserFromGroup(this.graphqlClient, this.tokenProvider, {\n                            code: group,\n                            userIds: [userId]\n                        })];\n                    case 1:\n                        res = _a.sent();\n                        return [2 /*return*/, res.removeUserFromGroup];\n                }\n            });\n        });\n    };\n    /**\n     * @name listRoles\n     * @name_zh 获取用户角色列表\n     * @description 获取用户的角色列表\n     *\n     * @param {string} userId 用户 ID\n     * @param {string} namespace 权限组命名空间\n     *\n     * @example\n     *\n     * const { list, totalCount} = await managementClient.users.listRoles(\"USERID\");\n     *\n     * @returns {Promise<DeepPartial<PaginatedRoles>>}\n     * @memberof UsersManagementClient\n     */\n    UsersManagementClient.prototype.listRoles = function (userId, namespace) {\n        return __awaiter(this, void 0, void 0, function () {\n            var user;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, getUserRoles(this.graphqlClient, this.tokenProvider, {\n                            id: userId,\n                            namespace: namespace\n                        })];\n                    case 1:\n                        user = (_a.sent()).user;\n                        if (!user) {\n                            throw new Error('用户不存在！');\n                        }\n                        return [2 /*return*/, user.roles];\n                }\n            });\n        });\n    };\n    /**\n     * @name addRoles\n     * @name_zh 添加角色\n     * @description 将用户加入角色\n     *\n     * @param {string} userId 用户 ID\n     * @param {string} roles 角色 code 列表\n     * @param {string} namespace 权限组命名空间\n     *\n     * @example\n     *\n     * const { code, message } = await managementClient.users.addRoles(\"USERID\", [\"ROLEA\"]);\n     *\n     * @returns {Promise<CommonMessage>}\n     * @memberof UsersManagementClient\n     */\n    UsersManagementClient.prototype.addRoles = function (userId, roles, namespace) {\n        return __awaiter(this, void 0, void 0, function () {\n            var data;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, assignRole(this.graphqlClient, this.tokenProvider, {\n                            roleCodes: roles,\n                            userIds: [userId],\n                            namespace: namespace\n                        })];\n                    case 1:\n                        data = (_a.sent()).assignRole;\n                        return [2 /*return*/, data];\n                }\n            });\n        });\n    };\n    /**\n     * @name removeRoles\n     * @name_zh 移除角色\n     * @description 将用户从角色中移除\n     *\n     * @param {string} userId 用户 ID\n     * @param {string} roles 角色 code 列表\n     * @param {string} namespace 权限分组 code\n     *\n     * @example\n     *\n     * const { code, message } = await managementClient.users.removeRoles(\"USERID\", [\"ROLEA\"]);\n     *\n     * @returns {Promise<CommonMessage>}\n     * @memberof UsersManagementClient\n     */\n    UsersManagementClient.prototype.removeRoles = function (userId, roles, namespace) {\n        return __awaiter(this, void 0, void 0, function () {\n            var data;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, revokeRole(this.graphqlClient, this.tokenProvider, {\n                            roleCodes: roles,\n                            userIds: [userId],\n                            namespace: namespace\n                        })];\n                    case 1:\n                        data = (_a.sent()).revokeRole;\n                        return [2 /*return*/, data];\n                }\n            });\n        });\n    };\n    /**\n     * @name listOrg\n     * @name_zh 获取用户所在组织机构\n     * @description 获取用户所在组织机构，以及他在该组织机构内的的节点路径。\n     *\n     * @param {string} userId 用户 ID\n     *\n     * @example\n     *\n     * const data = await managementClient.users.listOrgs(\"USERID\");\n     *\n     * @returns {Promise<UserOrgList>}\n     *\n     * @memberof UsersManagementClient\n     */\n    UsersManagementClient.prototype.listOrgs = function (userId) {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.httpClient.request({\n                            method: 'GET',\n                            url: this.options.host + \"/api/v2/users/\" + userId + \"/orgs\"\n                        })];\n                    case 1: return [2 /*return*/, _a.sent()];\n                }\n            });\n        });\n    };\n    /**\n     * @name listDepartment\n     * @name_zh 获取用户所在部门\n     * @description 获取用户所在部门列表\n     *\n     * @param {string} userId 用户 ID\n     *\n     * @example\n     *\n     * const data = await managementClient.users.listDepartment(\"USERID\");\n     *\n     * @returns {Promise<UserDepartmentList>}\n     *\n     * @memberof UsersManagementClient\n     */\n    UsersManagementClient.prototype.listDepartment = function (userId) {\n        return __awaiter(this, void 0, void 0, function () {\n            var departments;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, getUserDepartments(this.graphqlClient, this.tokenProvider, {\n                            id: userId\n                        })];\n                    case 1:\n                        departments = (_a.sent()).user.departments;\n                        return [2 /*return*/, departments];\n                }\n            });\n        });\n    };\n    /**\n     * @description 获取用户被授权的所有资源\n     *\n     * @param userId\n     * @param namespace\n     */\n    UsersManagementClient.prototype.listAuthorizedResources = function (userId, namespace, options) {\n        return __awaiter(this, void 0, void 0, function () {\n            var resourceType, user, _a, list, totalCount;\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        resourceType = (options || {}).resourceType;\n                        return [4 /*yield*/, listUserAuthorizedResources(this.graphqlClient, this.tokenProvider, {\n                                id: userId,\n                                namespace: namespace,\n                                resourceType: resourceType\n                            })];\n                    case 1:\n                        user = (_b.sent()).user;\n                        if (!user) {\n                            throw new Error('用户不存在');\n                        }\n                        _a = user.authorizedResources, list = _a.list, totalCount = _a.totalCount;\n                        list = formatAuthorizedResources(list);\n                        return [2 /*return*/, {\n                                list: list,\n                                totalCount: totalCount\n                            }];\n                }\n            });\n        });\n    };\n    /**\n     * @description 获取某个用户的所有自定义数据\n     * @param userId: 用户 ID\n     *\n     */\n    UsersManagementClient.prototype.getUdfValue = function (userId) {\n        return __awaiter(this, void 0, void 0, function () {\n            var list;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, udv(this.graphqlClient, this.tokenProvider, {\n                            targetType: UdfTargetType.User,\n                            targetId: userId\n                        })];\n                    case 1:\n                        list = (_a.sent()).udv;\n                        return [2 /*return*/, convertUdvToKeyValuePair(list)];\n                }\n            });\n        });\n    };\n    /**\n     * @description 批量获取多个用户的自定义数据\n     *\n     * @param userIds: 用户 ID 列表\n     */\n    UsersManagementClient.prototype.getUdfValueBatch = function (userIds) {\n        return __awaiter(this, void 0, void 0, function () {\n            var result, ret, _i, result_1, _a, targetId, data;\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        if (userIds.length === 0) {\n                            throw new Error('empty user id list');\n                        }\n                        return [4 /*yield*/, udfValueBatch(this.graphqlClient, this.tokenProvider, {\n                                targetType: UdfTargetType.User,\n                                targetIds: userIds\n                            })];\n                    case 1:\n                        result = (_b.sent()).udfValueBatch;\n                        ret = {};\n                        for (_i = 0, result_1 = result; _i < result_1.length; _i++) {\n                            _a = result_1[_i], targetId = _a.targetId, data = _a.data;\n                            ret[targetId] = convertUdvToKeyValuePair(data);\n                        }\n                        return [2 /*return*/, ret];\n                }\n            });\n        });\n    };\n    /**\n     * @description 设置某个用户的自定义数据\n     *\n     * @param userId\n     * @param data\n     */\n    UsersManagementClient.prototype.setUdfValue = function (userId, data) {\n        return __awaiter(this, void 0, void 0, function () {\n            var result;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (Object.keys(data).length === 0) {\n                            throw new Error('empty udf value list');\n                        }\n                        return [4 /*yield*/, setUdvBatch(this.graphqlClient, this.tokenProvider, {\n                                targetType: UdfTargetType.User,\n                                targetId: userId,\n                                udvList: Object.keys(data).map(function (key) { return ({\n                                    key: key,\n                                    value: JSON.stringify(data[key])\n                                }); })\n                            })];\n                    case 1:\n                        result = (_a.sent()).setUdvBatch;\n                        return [2 /*return*/, result];\n                }\n            });\n        });\n    };\n    /**\n     * @description 批量设置自定义数据\n     *\n     */\n    UsersManagementClient.prototype.setUdfValueBatch = function (input) {\n        return __awaiter(this, void 0, void 0, function () {\n            var params;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (input.length === 0) {\n                            throw new Error('empty input list');\n                        }\n                        params = [];\n                        input.forEach(function (_a) {\n                            var userId = _a.userId, data = _a.data;\n                            for (var _i = 0, _b = Object.keys(data); _i < _b.length; _i++) {\n                                var key = _b[_i];\n                                params.push({\n                                    targetId: userId,\n                                    key: key,\n                                    value: JSON.stringify(data[key])\n                                });\n                            }\n                        });\n                        return [4 /*yield*/, setUdfValueBatch(this.graphqlClient, this.tokenProvider, {\n                                targetType: UdfTargetType.User,\n                                input: params\n                            })];\n                    case 1:\n                        _a.sent();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * @description 清除用户的自定义数据\n     *\n     */\n    UsersManagementClient.prototype.removeUdfValue = function (userId, key) {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, removeUdv(this.graphqlClient, this.tokenProvider, {\n                            targetType: UdfTargetType.User,\n                            targetId: userId,\n                            key: key\n                        })];\n                    case 1:\n                        _a.sent();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * 判断用户是否有某个角色\n     * @param userId 用户 ID\n     * @param roleCode 角色 Code\n     * @param namespace 权限分组 ID\n     */\n    UsersManagementClient.prototype.hasRole = function (userId, roleCode, namespace) {\n        return __awaiter(this, void 0, void 0, function () {\n            var roleList, hasRole;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.listRoles(userId, namespace)];\n                    case 1:\n                        roleList = _a.sent();\n                        if (roleList.totalCount < 1) {\n                            return [2 /*return*/, false];\n                        }\n                        hasRole = false;\n                        roleList.list.forEach(function (item) {\n                            if (item.code === roleCode) {\n                                hasRole = true;\n                            }\n                        });\n                        return [2 /*return*/, hasRole];\n                }\n            });\n        });\n    };\n    /**\n     * @description 强制一批用户下线\n     */\n    UsersManagementClient.prototype.kick = function (userIds) {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.httpClient.request({\n                            url: this.options.host + \"/api/v2/users/kick\",\n                            method: 'POST',\n                            data: {\n                                userIds: userIds\n                            }\n                        })];\n                    case 1:\n                        _a.sent();\n                        return [2 /*return*/, { code: 200, message: '强制下线成功' }];\n                }\n            });\n        });\n    };\n    UsersManagementClient.prototype.logout = function (options) {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (!options || !options.userId) {\n                            throw new Error('请传入 options.userId，内容为要下线的用户 ID');\n                        }\n                        return [4 /*yield*/, this.httpClient.request({\n                                url: this.options.host + \"/logout\",\n                                method: 'GET',\n                                params: {\n                                    appId: options.appId,\n                                    userId: options.userId\n                                }\n                            })];\n                    case 1:\n                        _a.sent();\n                        return [2 /*return*/, { code: 200, message: '强制下线成功' }];\n                }\n            });\n        });\n    };\n    /**\n     * @description 查询用户的登录状态\n     */\n    UsersManagementClient.prototype.checkLoginStatus = function (userId, appId, deviceId) {\n        return __awaiter(this, void 0, void 0, function () {\n            var result;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.httpClient.request({\n                            method: 'GET',\n                            url: this.options.host + \"/api/v2/users/login-status\",\n                            params: {\n                                userId: userId,\n                                appId: appId,\n                                deviceId: deviceId\n                            }\n                        })];\n                    case 1:\n                        result = _a.sent();\n                        return [2 /*return*/, result];\n                }\n            });\n        });\n    };\n    /**\n     * 审计日志列表\n     * @param options.page 当前页数\n     * @param options.limit 每页显示条数\n     * @param options.clientIp 客户端 IP 地址\n     * @param options.operationName 操作类型\n     * @param options.operatoArn 用户 Arn 通过 searchUser 方法获得\n     * @returns Promise<UserActions>\n     */\n    UsersManagementClient.prototype.listUserActions = function (options) {\n        var _a;\n        if (options === void 0) { options = {\n            page: 1,\n            limit: 10\n        }; }\n        return __awaiter(this, void 0, void 0, function () {\n            var requestParam, result, list, totalCount;\n            var _this = this;\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        requestParam = {};\n                        if (options === null || options === void 0 ? void 0 : options.clientIp) {\n                            requestParam.clientip = options.clientIp;\n                        }\n                        if (options === null || options === void 0 ? void 0 : options.operationNames) {\n                            requestParam.operation_name = options.operationNames;\n                        }\n                        if ((_a = options === null || options === void 0 ? void 0 : options.userIds) === null || _a === void 0 ? void 0 : _a.length) {\n                            requestParam.operator_arn = options.userIds.map(function (userId) {\n                                return \"arn:cn:authing:\" + _this.options.userPoolId + \":user:\" + userId;\n                            });\n                        }\n                        if (options === null || options === void 0 ? void 0 : options.page) {\n                            requestParam.page = options.page;\n                        }\n                        if (options === null || options === void 0 ? void 0 : options.limit) {\n                            requestParam.limit = options.limit;\n                        }\n                        if (options === null || options === void 0 ? void 0 : options.excludeNonAppRecords) {\n                            requestParam.exclude_non_app_records = '1';\n                        }\n                        if (options === null || options === void 0 ? void 0 : options.appIds) {\n                            requestParam.app_id = options === null || options === void 0 ? void 0 : options.appIds;\n                        }\n                        if ((options === null || options === void 0 ? void 0 : options.start) !== undefined) {\n                            requestParam.start = options === null || options === void 0 ? void 0 : options.start;\n                        }\n                        if ((options === null || options === void 0 ? void 0 : options.end) !== undefined) {\n                            requestParam.end = options === null || options === void 0 ? void 0 : options.end;\n                        }\n                        return [4 /*yield*/, this.httpClient.request({\n                                method: 'GET',\n                                url: this.options.host + \"/api/v2/analysis/user-action\",\n                                params: __assign({}, requestParam)\n                            })];\n                    case 1:\n                        result = _b.sent();\n                        list = result.list, totalCount = result.totalCount;\n                        return [2 /*return*/, {\n                                list: list.map(function (log) {\n                                    var _a, _b, _c, _d, _e, _f;\n                                    return {\n                                        userpoolId: log.userpool_id,\n                                        userId: (_a = log.user) === null || _a === void 0 ? void 0 : _a.id,\n                                        username: (_b = log.user) === null || _b === void 0 ? void 0 : _b.displayName,\n                                        cityName: (_c = log.geoip) === null || _c === void 0 ? void 0 : _c.city_name,\n                                        regionName: (_d = log.geoip) === null || _d === void 0 ? void 0 : _d.region_name,\n                                        clientIp: (_e = log.geoip) === null || _e === void 0 ? void 0 : _e.ip,\n                                        operationDesc: log.operation_desc,\n                                        operationName: log.operation_name,\n                                        timestamp: log.timestamp,\n                                        appId: log.app_id,\n                                        appName: (_f = log.app) === null || _f === void 0 ? void 0 : _f.name\n                                    };\n                                }),\n                                totalCount: totalCount\n                            }];\n                }\n            });\n        });\n    };\n    /**\n     * @description 发送首次登录验证邮件\n     *\n     */\n    UsersManagementClient.prototype.sendFirstLoginVerifyEmail = function (options) {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, sendFirstLoginVerifyEmail(this.graphqlClient, this.tokenProvider, options)];\n                    case 1:\n                        _a.sent();\n                        return [2 /*return*/, true];\n                }\n            });\n        });\n    };\n    /**\n     * @description 获取用户所在租户\n     *\n     */\n    UsersManagementClient.prototype.getUserTenants = function (userId) {\n        return __awaiter(this, void 0, void 0, function () {\n            var result;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.httpClient.request({\n                            method: 'GET',\n                            url: this.options.host + \"/api/v2/users/\" + userId + \"/tenants\"\n                        })];\n                    case 1:\n                        result = _a.sent();\n                        return [2 /*return*/, result];\n                }\n            });\n        });\n    };\n    /**\n     * @description 给用户绑定一个身份\n     *\n     */\n    UsersManagementClient.prototype.linkIdentity = function (options) {\n        return __awaiter(this, void 0, void 0, function () {\n            var result;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.fastHttpClient.request({\n                            method: 'POST',\n                            url: this.options.host + \"/api/v2/users/identity/link\",\n                            data: __assign({}, options)\n                        })];\n                    case 1:\n                        result = _a.sent();\n                        return [2 /*return*/, result];\n                }\n            });\n        });\n    };\n    /**\n     * @description 解除用户某个身份源下的所有身份\n     *\n     */\n    UsersManagementClient.prototype.unlinkIdentity = function (options) {\n        return __awaiter(this, void 0, void 0, function () {\n            var result;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.fastHttpClient.request({\n                            method: 'POST',\n                            url: this.options.host + \"/api/v2/users/identity/unlink\",\n                            data: __assign({}, options)\n                        })];\n                    case 1:\n                        result = _a.sent();\n                        return [2 /*return*/, result];\n                }\n            });\n        });\n    };\n    /**\n     * @name getApplicationLoginUserNum\n     * @name_zh 查询登录过某个应用的用户数量\n     * @description 查询登录过某个应用的用户数量\n     *\n     * @param {string} [appId] 应用 ID\n     *\n     * @example\n     *\n     * const user = await managementClient.users.getApplicationLoginUserNum();\n     */\n    UsersManagementClient.prototype.getApplicationLoginUserNum = function (options) {\n        return __awaiter(this, void 0, void 0, function () {\n            var data;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.httpClient.request({\n                            method: 'GET',\n                            url: this.options.host + \"/api/v2/analysis/total-login-count\",\n                            params: { appId: options.appId }\n                        })];\n                    case 1:\n                        data = _a.sent();\n                        return [2 /*return*/, data];\n                }\n            });\n        });\n    };\n    /**\n     * @name getUdfFieldUserNum\n     * @name_zh 查询应用下使用了某个用户自定义字段的用户数量\n     * @description 查询使用了某个用户自定义字段的登录过某个应用的用户数量\n     *\n     * @param {string} [definedFieldKey] 用户自定义字段\n     * @param {string} [appId] 应用 ID\n     *\n     * @example\n     *\n     * const user = await managementClient.users.getUdfFieldUserNum();\n     */\n    UsersManagementClient.prototype.getUdfFieldUserNum = function (options) {\n        return __awaiter(this, void 0, void 0, function () {\n            var data;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.httpClient.request({\n                            method: 'GET',\n                            url: this.options.host + \"/api/v2/analysis/exist-defined-field-count\",\n                            params: {\n                                definedFieldKey: options.definedFieldKey,\n                                appId: options.appId\n                            }\n                        })];\n                    case 1:\n                        data = _a.sent();\n                        return [2 /*return*/, data];\n                }\n            });\n        });\n    };\n    return UsersManagementClient;\n}());\nexport { UsersManagementClient };\n//# sourceMappingURL=UsersManagementClient.js.map"]},"metadata":{},"sourceType":"module"}