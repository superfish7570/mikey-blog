{"ast":null,"code":"var _jsxFileName = \"/Users/mikey/Desktop/yc-blog/src/admin/components/areaList/AreaList.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport styles from './style.module.scss';\nimport { ReactSortable } from \"react-sortablejs\";\nimport { Button } from \"antd\";\nimport { AreaItem } from \"../areaItem\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AreaList = props => {\n  _s();\n\n  const [children, setChildren] = useState(props.children); // 感知外部 schema 变化 如果children发生了改变 调用 setChildren 外部发生变化 children就发生变化了\n\n  useEffect(() => {\n    setChildren(props.children);\n  }, [props.children]); // 增加\n\n  const addItemToChildren = () => {\n    const newChildren = [...children];\n    newChildren.push({});\n    setChildren(newChildren);\n  }; // 更改 给子组件使用 AreaItem 通过组件标签 赋值传递\n\n\n  const changeAreaItem = (item, index) => {\n    const newChildren = [...children];\n    newChildren.splice(index, 1, item);\n    setChildren(newChildren);\n  }; // 删除 这里给 子组件使用 就是 AreaItem 通过子组件标签 赋值传递\n\n\n  const removeItemFromChildren = index => {\n    const newChildren = [...children];\n    newChildren.splice(index, 1);\n    setChildren(newChildren);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"ul\", {\n      className: styles.list,\n      children: /*#__PURE__*/_jsxDEV(ReactSortable, {\n        list: children,\n        setList: setChildren,\n        children: children.map((item, index) => /*#__PURE__*/_jsxDEV(AreaItem, {\n          item: item,\n          index: index\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      type: \"primary\",\n      ghost: true,\n      onClick: addItemToChildren,\n      children: \"\\u65B0\\u589E\\u533A\\u5757\\u6309\\u94AE\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 9\n  }, this);\n};\n\n_s(AreaList, \"APV1EQagKm4R0F4uHPQ4nuOkvCI=\");\n\n_c = AreaList;\n\nvar _c;\n\n$RefreshReg$(_c, \"AreaList\");","map":{"version":3,"names":["React","useState","useEffect","styles","ReactSortable","Button","AreaItem","AreaList","props","children","setChildren","addItemToChildren","newChildren","push","changeAreaItem","item","index","splice","removeItemFromChildren","list","map"],"sources":["/Users/mikey/Desktop/yc-blog/src/admin/components/areaList/AreaList.jsx"],"sourcesContent":["import React, {useState, useEffect} from 'react';\nimport styles from './style.module.scss';\nimport {ReactSortable} from \"react-sortablejs\";\nimport {Button} from \"antd\";\nimport {AreaItem} from \"../areaItem\";\n\n\nexport const AreaList = (props) => {\n    const [children, setChildren] = useState(props.children);\n\n    // 感知外部 schema 变化 如果children发生了改变 调用 setChildren 外部发生变化 children就发生变化了\n    useEffect(() => {\n        setChildren(props.children);\n    }, [props.children])\n\n    // 增加\n    const addItemToChildren = () => {\n        const newChildren = [...children];\n        newChildren.push({});\n        setChildren(newChildren);\n    }\n\n    // 更改 给子组件使用 AreaItem 通过组件标签 赋值传递\n    const changeAreaItem = (item,index) => {\n        const newChildren = [...children];\n        newChildren.splice(index, 1,item);\n        setChildren(newChildren);\n    }\n\n    // 删除 这里给 子组件使用 就是 AreaItem 通过子组件标签 赋值传递\n    const removeItemFromChildren = (index) => {\n        const newChildren = [...children];\n        newChildren.splice(index, 1);\n        setChildren(newChildren);\n    }\n\n    return (\n        <div>\n            <ul className={styles.list}>\n                <ReactSortable list={children} setList={setChildren}>\n                    {children.map((item, index) => (\n                        <AreaItem key={index} item={item} index={index}/>\n                    ))}\n                </ReactSortable>\n            </ul>\n            <Button type='primary' ghost onClick={addItemToChildren}>新增区块按钮</Button>\n        </div>\n    )\n}"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,SAAzB,QAAyC,OAAzC;AACA,OAAOC,MAAP,MAAmB,qBAAnB;AACA,SAAQC,aAAR,QAA4B,kBAA5B;AACA,SAAQC,MAAR,QAAqB,MAArB;AACA,SAAQC,QAAR,QAAuB,aAAvB;;AAGA,OAAO,MAAMC,QAAQ,GAAIC,KAAD,IAAW;EAAA;;EAC/B,MAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BT,QAAQ,CAACO,KAAK,CAACC,QAAP,CAAxC,CAD+B,CAG/B;;EACAP,SAAS,CAAC,MAAM;IACZQ,WAAW,CAACF,KAAK,CAACC,QAAP,CAAX;EACH,CAFQ,EAEN,CAACD,KAAK,CAACC,QAAP,CAFM,CAAT,CAJ+B,CAQ/B;;EACA,MAAME,iBAAiB,GAAG,MAAM;IAC5B,MAAMC,WAAW,GAAG,CAAC,GAAGH,QAAJ,CAApB;IACAG,WAAW,CAACC,IAAZ,CAAiB,EAAjB;IACAH,WAAW,CAACE,WAAD,CAAX;EACH,CAJD,CAT+B,CAe/B;;;EACA,MAAME,cAAc,GAAG,CAACC,IAAD,EAAMC,KAAN,KAAgB;IACnC,MAAMJ,WAAW,GAAG,CAAC,GAAGH,QAAJ,CAApB;IACAG,WAAW,CAACK,MAAZ,CAAmBD,KAAnB,EAA0B,CAA1B,EAA4BD,IAA5B;IACAL,WAAW,CAACE,WAAD,CAAX;EACH,CAJD,CAhB+B,CAsB/B;;;EACA,MAAMM,sBAAsB,GAAIF,KAAD,IAAW;IACtC,MAAMJ,WAAW,GAAG,CAAC,GAAGH,QAAJ,CAApB;IACAG,WAAW,CAACK,MAAZ,CAAmBD,KAAnB,EAA0B,CAA1B;IACAN,WAAW,CAACE,WAAD,CAAX;EACH,CAJD;;EAMA,oBACI;IAAA,wBACI;MAAI,SAAS,EAAET,MAAM,CAACgB,IAAtB;MAAA,uBACI,QAAC,aAAD;QAAe,IAAI,EAAEV,QAArB;QAA+B,OAAO,EAAEC,WAAxC;QAAA,UACKD,QAAQ,CAACW,GAAT,CAAa,CAACL,IAAD,EAAOC,KAAP,kBACV,QAAC,QAAD;UAAsB,IAAI,EAAED,IAA5B;UAAkC,KAAK,EAAEC;QAAzC,GAAeA,KAAf;UAAA;UAAA;UAAA;QAAA,QADH;MADL;QAAA;QAAA;QAAA;MAAA;IADJ;MAAA;MAAA;MAAA;IAAA,QADJ,eAQI,QAAC,MAAD;MAAQ,IAAI,EAAC,SAAb;MAAuB,KAAK,MAA5B;MAA6B,OAAO,EAAEL,iBAAtC;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QARJ;EAAA;IAAA;IAAA;IAAA;EAAA,QADJ;AAYH,CAzCM;;GAAMJ,Q;;KAAAA,Q"},"metadata":{},"sourceType":"module"}