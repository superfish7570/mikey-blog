{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function () {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n\n        case 7:\n          op = _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n\n            _.ops.push(op);\n\n            break;\n          }\n\n          if (t[2]) _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n      }\n\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nimport { Protocol } from './types';\nimport { popupCenter, isWechatBrowser, serialize } from '../utils';\nimport { generateUidKey } from '../utils';\nimport { BaseAuthenticationClient } from './BaseAuthenticationClient';\n/**\n * @class EnterpriseAuthenticationClient 企业身份源登录模块\n * @description 此模块封装了企业身份源登录的功能，可以通过简洁的 API 快速使用企业身份源登录获取用户信息。\n *\n * 发起企业身份源登录授权请求：\n *\n * \\`\\`\\`javascript\n * import { AuthenticationClient } from \"authing-js-sdk\"\n * const authenticationClient = new AuthenticationClient({\n *    appId: \"YOUR_APP_ID\",\n * })\n * await authenticationClient.enterprise.authorize(\"oidc\", \"identifierxxx\" {\n *    onSuccess: (user) => { console.log(user) },\n *    onError: (code, message) => {  }\n * })\n * \\`\\`\\`\n *\n *\n * @name EnterpriseAuthenticationClient\n */\n\nvar EnterpriseAuthenticationClient =\n/** @class */\nfunction () {\n  function EnterpriseAuthenticationClient(options, tokenProvider, httpClient) {\n    this.options = options;\n    this.baseClient = new BaseAuthenticationClient(options);\n    this.tokenProvider = tokenProvider;\n    this.httpClient = httpClient;\n  } //  TODO，跟着 user-portal 逻辑走的，后续应该优化\n\n\n  EnterpriseAuthenticationClient.prototype.initProviderContext = function (appId) {\n    return __awaiter(this, void 0, void 0, function () {\n      var appConfig;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.httpClient.request({\n              method: 'GET',\n              url: this.baseClient.appHost + \"/api/v2/applications/\" + appId + \"/public-config\"\n            })];\n\n          case 1:\n            appConfig = _a.sent();\n            return [2\n            /*return*/\n            , appConfig];\n        }\n      });\n    });\n  };\n\n  EnterpriseAuthenticationClient.prototype.getProviderConfigAndError = function (protocol, appConfig, identifier) {\n    var _a, _b;\n\n    var providerConfig = (_b = (_a = appConfig.identityProviders) === null || _a === void 0 ? void 0 : _a.find(function (item) {\n      return item.protocol === protocol && item.identifier === identifier;\n    })) === null || _b === void 0 ? void 0 : _b.config;\n\n    if (!providerConfig) {\n      throw new Error('身份源配置不存在');\n    }\n\n    return providerConfig;\n  };\n\n  EnterpriseAuthenticationClient.prototype.getLoginUrl = function (protocol, appConfig, identifier, state) {\n    var config = this.getProviderConfigAndError(protocol, appConfig, identifier);\n\n    switch (protocol) {\n      case Protocol.OIDC:\n        config = config;\n        var query = serialize({\n          state: state,\n          client_id: config.clientId,\n          redirect_uri: config.redirectUri,\n          scope: config.scopes,\n          response_type: config.responseType,\n          nonce: generateUidKey(32)\n        });\n        return config.authorizationEdpoint + \"?\" + query;\n\n      case Protocol.SAML:\n        config = config;\n        return config.samlRequest;\n\n      case Protocol.CAS:\n        config = config;\n        return config.casConnectionLoginUrl;\n\n      case Protocol.OAUTH:\n        config = config;\n        return config.authUrl;\n\n      case Protocol.AZURE_AD:\n        config = config;\n        return config.authorizationUrl;\n\n      default:\n        return '';\n    }\n  };\n  /**\n   * @name authorize\n   * @name_zh 发送授权登录请求\n   * @description 发送授权登录请求，该方法会直接打开一个新窗口，跳转到企业身份源（如 OIDC、SAML 等）的登录授权页面，用户\n   * 完成授权之后，会自动关闭此窗口，并触发 onSuccess 回调函数，通过此函数，你可以获取到用户信息。\n   *\n   * @param {Protocol} protocol: 企业身份源协议\n   * @param {string} provider 企业身份源的唯一标志。\n   * @param {object} [options]\n   * @param {boolean} [options.popup=true] 是否通过弹窗的方式打开社会化登录窗口，如果设置为 false，将会以 window.open 的方式打开一个新的浏览器  tab 。\n   * @param {Function} [options.onSuccess] 用户同意授权事件回调函数，第一个参数为用户信息。\n   * @param {Function} [options.onError] 企业身份源失败事件回调函数，第一个参数 code 为错误码，第二个参数 message 为错误提示。详细的错误码列表请见：详细说明请见：[Authing 错误代码列表](https://docs.authing.co/advanced/error-code.html)\n   * @param {object} [options.position] 只有当 options.popup 为 ture 的时候有效，弹出窗口的位置，默认为 { w: 585, h: 649 } 。\n   *\n   * @example\n   *\n   * // 使用身份源标识符为 'oidc1' 的 OIDC 身份源登录\n   *\n   * const authenticationClient = new AuthenticationClient({\n   *    appId: \"YOUR_APP_ID\",\n   * })\n   *\n   * await authenticationClient.enterprise.authorize(\"oidc\", \"oidc1\" {\n   *    onSuccess: (user) => { console.log(user) },\n   *    onError: (code, message) => {  },\n   *    // 自定义弹出窗口的位置\n   *    position: {\n   *      w: 100,\n   *      h: 100\n   *    }\n   * })\n   *\n   * @example\n   *\n   * // 使用新建浏览器 tab 的形式打开社会化登录页面\n   *\n   * const authenticationClient = new AuthenticationClient({\n   *    appId: \"YOUR_APP_ID\",\n   * })\n   *\n   * await authenticationClient.enterprise.authorize(\"oidc\", \"oidc1\", {\n   *    popup: false,\n   *    onSuccess: (user) => { console.log(user) },\n   *    onError: (code, message) => {  },\n   * })\n   *\n   * @memberof EnterpriseAuthenticationClient\n   */\n\n\n  EnterpriseAuthenticationClient.prototype.authorize = function (protocol, identifier, options) {\n    var _this = this;\n\n    options = options || {};\n    var position = options.position,\n        _a = options.popup,\n        popup = _a === void 0 ? true : _a,\n        onSuccess = options.onSuccess,\n        onError = options.onError;\n    var appId = this.options.appId;\n    var state = generateUidKey(32);\n    var windowRef;\n\n    if (isWechatBrowser()) {\n      // 在微信内直接打开\n      windowRef = window;\n    } else if (popup) {\n      windowRef = popupCenter('', position);\n    } else {\n      windowRef = window.open('');\n    }\n\n    this.initProviderContext(appId).then(function (appConfig) {\n      // OIDC 还要特殊初始化\n      var promise = protocol === Protocol.OIDC ? _this.httpClient.request({\n        method: 'POST',\n        url: _this.baseClient.appHost + \"/api/v2/connections/oidc/start-interaction\",\n        data: {\n          state: state,\n          protocol: protocol,\n          userPoolId: appConfig.userPoolId,\n          appId: appId,\n          referer: window.location.href,\n          connection: {\n            providerIentifier: identifier\n          }\n        }\n      }) : Promise.resolve();\n      promise.then(function () {\n        var url = _this.getLoginUrl(protocol, appConfig, identifier, state);\n\n        var onMessage = function (e) {\n          var _a = e.data,\n              code = _a.code,\n              message = _a.message,\n              userInfo = _a.data,\n              event = _a.event;\n          event = event || {};\n          var source = event.source,\n              eventType = event.eventType;\n\n          if (source !== 'authing' || eventType !== 'enterpriseLogin') {\n            return;\n          }\n\n          try {\n            var parsedMsg = JSON.parse(message);\n            message = parsedMsg.message;\n            code = parsedMsg.code;\n          } catch (e) {// do nothing...\n          }\n\n          if (code === 200) {\n            // 保存用户的 token\n            _this.tokenProvider.setUser(userInfo);\n\n            onSuccess && onSuccess(userInfo);\n          } else {\n            onError && onError(code, message);\n          }\n\n          window.removeEventListener('message', onMessage);\n        };\n\n        window.addEventListener('message', onMessage);\n        windowRef.location.assign(url);\n      });\n    });\n    return Promise.resolve();\n  };\n\n  return EnterpriseAuthenticationClient;\n}();\n\nexport { EnterpriseAuthenticationClient };","map":{"version":3,"sources":["../../../../src/lib/authentication/EnterpriseAuthenticationClient.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nimport { Protocol } from './types';\nimport { popupCenter, isWechatBrowser, serialize } from '../utils';\nimport { generateUidKey } from '../utils';\nimport { BaseAuthenticationClient } from './BaseAuthenticationClient';\n/**\n * @class EnterpriseAuthenticationClient 企业身份源登录模块\n * @description 此模块封装了企业身份源登录的功能，可以通过简洁的 API 快速使用企业身份源登录获取用户信息。\n *\n * 发起企业身份源登录授权请求：\n *\n * \\`\\`\\`javascript\n * import { AuthenticationClient } from \"authing-js-sdk\"\n * const authenticationClient = new AuthenticationClient({\n *    appId: \"YOUR_APP_ID\",\n * })\n * await authenticationClient.enterprise.authorize(\"oidc\", \"identifierxxx\" {\n *    onSuccess: (user) => { console.log(user) },\n *    onError: (code, message) => {  }\n * })\n * \\`\\`\\`\n *\n *\n * @name EnterpriseAuthenticationClient\n */\nvar EnterpriseAuthenticationClient = /** @class */ (function () {\n    function EnterpriseAuthenticationClient(options, tokenProvider, httpClient) {\n        this.options = options;\n        this.baseClient = new BaseAuthenticationClient(options);\n        this.tokenProvider = tokenProvider;\n        this.httpClient = httpClient;\n    }\n    //  TODO，跟着 user-portal 逻辑走的，后续应该优化\n    EnterpriseAuthenticationClient.prototype.initProviderContext = function (appId) {\n        return __awaiter(this, void 0, void 0, function () {\n            var appConfig;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.httpClient.request({\n                            method: 'GET',\n                            url: this.baseClient.appHost + \"/api/v2/applications/\" + appId + \"/public-config\"\n                        })];\n                    case 1:\n                        appConfig = _a.sent();\n                        return [2 /*return*/, appConfig];\n                }\n            });\n        });\n    };\n    EnterpriseAuthenticationClient.prototype.getProviderConfigAndError = function (protocol, appConfig, identifier) {\n        var _a, _b;\n        var providerConfig = (_b = (_a = appConfig.identityProviders) === null || _a === void 0 ? void 0 : _a.find(function (item) { return item.protocol === protocol && item.identifier === identifier; })) === null || _b === void 0 ? void 0 : _b.config;\n        if (!providerConfig) {\n            throw new Error('身份源配置不存在');\n        }\n        return providerConfig;\n    };\n    EnterpriseAuthenticationClient.prototype.getLoginUrl = function (protocol, appConfig, identifier, state) {\n        var config = this.getProviderConfigAndError(protocol, appConfig, identifier);\n        switch (protocol) {\n            case Protocol.OIDC:\n                config = config;\n                var query = serialize({\n                    state: state,\n                    client_id: config.clientId,\n                    redirect_uri: config.redirectUri,\n                    scope: config.scopes,\n                    response_type: config.responseType,\n                    nonce: generateUidKey(32)\n                });\n                return config.authorizationEdpoint + \"?\" + query;\n            case Protocol.SAML:\n                config = config;\n                return config.samlRequest;\n            case Protocol.CAS:\n                config = config;\n                return config.casConnectionLoginUrl;\n            case Protocol.OAUTH:\n                config = config;\n                return config.authUrl;\n            case Protocol.AZURE_AD:\n                config = config;\n                return config.authorizationUrl;\n            default:\n                return '';\n        }\n    };\n    /**\n     * @name authorize\n     * @name_zh 发送授权登录请求\n     * @description 发送授权登录请求，该方法会直接打开一个新窗口，跳转到企业身份源（如 OIDC、SAML 等）的登录授权页面，用户\n     * 完成授权之后，会自动关闭此窗口，并触发 onSuccess 回调函数，通过此函数，你可以获取到用户信息。\n     *\n     * @param {Protocol} protocol: 企业身份源协议\n     * @param {string} provider 企业身份源的唯一标志。\n     * @param {object} [options]\n     * @param {boolean} [options.popup=true] 是否通过弹窗的方式打开社会化登录窗口，如果设置为 false，将会以 window.open 的方式打开一个新的浏览器  tab 。\n     * @param {Function} [options.onSuccess] 用户同意授权事件回调函数，第一个参数为用户信息。\n     * @param {Function} [options.onError] 企业身份源失败事件回调函数，第一个参数 code 为错误码，第二个参数 message 为错误提示。详细的错误码列表请见：详细说明请见：[Authing 错误代码列表](https://docs.authing.co/advanced/error-code.html)\n     * @param {object} [options.position] 只有当 options.popup 为 ture 的时候有效，弹出窗口的位置，默认为 { w: 585, h: 649 } 。\n     *\n     * @example\n     *\n     * // 使用身份源标识符为 'oidc1' 的 OIDC 身份源登录\n     *\n     * const authenticationClient = new AuthenticationClient({\n     *    appId: \"YOUR_APP_ID\",\n     * })\n     *\n     * await authenticationClient.enterprise.authorize(\"oidc\", \"oidc1\" {\n     *    onSuccess: (user) => { console.log(user) },\n     *    onError: (code, message) => {  },\n     *    // 自定义弹出窗口的位置\n     *    position: {\n     *      w: 100,\n     *      h: 100\n     *    }\n     * })\n     *\n     * @example\n     *\n     * // 使用新建浏览器 tab 的形式打开社会化登录页面\n     *\n     * const authenticationClient = new AuthenticationClient({\n     *    appId: \"YOUR_APP_ID\",\n     * })\n     *\n     * await authenticationClient.enterprise.authorize(\"oidc\", \"oidc1\", {\n     *    popup: false,\n     *    onSuccess: (user) => { console.log(user) },\n     *    onError: (code, message) => {  },\n     * })\n     *\n     * @memberof EnterpriseAuthenticationClient\n     */\n    EnterpriseAuthenticationClient.prototype.authorize = function (protocol, identifier, options) {\n        var _this = this;\n        options = options || {};\n        var position = options.position, _a = options.popup, popup = _a === void 0 ? true : _a, onSuccess = options.onSuccess, onError = options.onError;\n        var appId = this.options.appId;\n        var state = generateUidKey(32);\n        var windowRef;\n        if (isWechatBrowser()) {\n            // 在微信内直接打开\n            windowRef = window;\n        }\n        else if (popup) {\n            windowRef = popupCenter('', position);\n        }\n        else {\n            windowRef = window.open('');\n        }\n        this.initProviderContext(appId).then(function (appConfig) {\n            // OIDC 还要特殊初始化\n            var promise = protocol === Protocol.OIDC\n                ? _this.httpClient.request({\n                    method: 'POST',\n                    url: _this.baseClient.appHost + \"/api/v2/connections/oidc/start-interaction\",\n                    data: {\n                        state: state,\n                        protocol: protocol,\n                        userPoolId: appConfig.userPoolId,\n                        appId: appId,\n                        referer: window.location.href,\n                        connection: { providerIentifier: identifier }\n                    }\n                })\n                : Promise.resolve();\n            promise.then(function () {\n                var url = _this.getLoginUrl(protocol, appConfig, identifier, state);\n                var onMessage = function (e) {\n                    var _a = e.data, code = _a.code, message = _a.message, userInfo = _a.data, event = _a.event;\n                    event = event || {};\n                    var source = event.source, eventType = event.eventType;\n                    if (source !== 'authing' || eventType !== 'enterpriseLogin') {\n                        return;\n                    }\n                    try {\n                        var parsedMsg = JSON.parse(message);\n                        message = parsedMsg.message;\n                        code = parsedMsg.code;\n                    }\n                    catch (e) {\n                        // do nothing...\n                    }\n                    if (code === 200) {\n                        // 保存用户的 token\n                        _this.tokenProvider.setUser(userInfo);\n                        onSuccess && onSuccess(userInfo);\n                    }\n                    else {\n                        onError && onError(code, message);\n                    }\n                    window.removeEventListener('message', onMessage);\n                };\n                window.addEventListener('message', onMessage);\n                windowRef.location.assign(url);\n            });\n        });\n        return Promise.resolve();\n    };\n    return EnterpriseAuthenticationClient;\n}());\nexport { EnterpriseAuthenticationClient };\n//# sourceMappingURL=EnterpriseAuthenticationClient.js.map"]},"metadata":{},"sourceType":"module"}