{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function () {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n\n        case 7:\n          op = _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n\n            _.ops.push(op);\n\n            break;\n          }\n\n          if (t[2]) _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n      }\n\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nimport { policies, policy, createPolicy, updatePolicy, deletePolicy, deletePolicies, policyAssignments, addPolicyAssignments, removePolicyAssignments, enablePolicyAssignment, disablePolicyAssignment } from '../graphqlapi';\n/**\n * @class PoliciesManagementClient 管理策略\n * @name PoliciesManagementClient\n * @description Authing 的访问控制与权限管理模型核心围绕着两个点来设计：**资源（Resource）**和**策略（Policy）**。策略定义了对某个（类）资源的某个（些）操作权限，将策略授权给用户（或角色），就能知道用户（或角色）是否具备对某个资源的某个操作具备操作权限。\n *\n * 此模块可以用于对策略进行增删改查，以及管理策略授权，策略可以被授予用户或角色。详细介绍请见 https://docs.authing.co/docs/access-control/index.html\n *\n * @example\n *\n * 请使用以下方式使用该模块：\n * \\`\\`\\`javascript\n * import { ManagementClient } from \"authing-js-sdk\"\n * const managementClient = new ManagementClient({\n *    userPoolId: \"YOUR_USERPOOL_ID\",\n *    secret: \"YOUR_USERPOOL_SECRET\",\n * })\n * managementClient.policies.list // 获取策略列表\n * managementClient.policies.create // 创建策略\n * managementClient.policies.listUsers // 获取策略授权记录\n * \\`\\`\\`\n *\n */\n\nvar PoliciesManagementClient =\n/** @class */\nfunction () {\n  function PoliciesManagementClient(options, graphqlClient, tokenProvider) {\n    this.options = options;\n    this.graphqlClient = graphqlClient;\n    this.tokenProvider = tokenProvider;\n  }\n  /**\n   * @name create\n   * @name_zh 添加策略\n   * @description 添加策略\n   *\n   * @param {string} code 策略唯一标志\n   * @param {PolicyStatement[]} 策略语句，详细格式与说明请见 https://docs.authing.co/docs/access-control/index.html\n   * @param {string} [description] 描述\n   *\n   * @example\n   *\n   * import { PolicyEffect } from \"authing-js-sdk\"\n   *\n   * const statements = [\n   *   {\n   *     resource: 'books:123',\n   *     effect: PolicyEffect.Allow,\n   *     actions: ['books:edit']\n   *   }\n   * ];\n   *\n   * const policy = await managementClient.policies.create(code, statements);\n   *\n   * @returns {Promise<DeepPartial<Policy>>}\n   * @memberof PoliciesManagementClient\n   */\n\n\n  PoliciesManagementClient.prototype.create = function (_a) {\n    var code = _a.code,\n        statements = _a.statements,\n        description = _a.description,\n        namespace = _a.namespace;\n    return __awaiter(this, void 0, void 0, function () {\n      var res;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , createPolicy(this.graphqlClient, this.tokenProvider, {\n              code: code,\n              statements: statements,\n              description: description,\n              namespace: namespace\n            })];\n\n          case 1:\n            res = _b.sent();\n            return [2\n            /*return*/\n            , res.createPolicy];\n        }\n      });\n    });\n  };\n  /**\n   * @name delete\n   * @name_zh 删除策略\n   * @description 删除策略，系统内置策略由 Authing 官方维护，不能修改和删除。\n   *\n   * @example\n   *\n   * const { code, message } = await managementClient.policies.delete(\"CODE\"); // 通过 code 是否为 200 判断操作是否成功\n   *\n   *\n   * @param {string} code 策略唯一标志\n   * @returns {Promise<CommonMessage>}\n   * @memberof PoliciesManagementClient\n   *\n   */\n\n\n  PoliciesManagementClient.prototype.delete = function (code, namespace) {\n    return __awaiter(this, void 0, void 0, function () {\n      var data;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , deletePolicy(this.graphqlClient, this.tokenProvider, {\n              code: code,\n              namespace: namespace\n            })];\n\n          case 1:\n            data = _a.sent().deletePolicy;\n            return [2\n            /*return*/\n            , data];\n        }\n      });\n    });\n  };\n  /**\n   * @name deleteMany\n   * @name_zh 批量删除策略\n   * @description 批量删除策略，系统内置策略由 Authing 官方维护，不能修改和删除。\n   *\n   * @example\n   *\n   * const { code, message } = await managementClient.policies.deleteMany([\"CODE\"]); // 通过 code 是否为 200 判断操作是否成功\n   *\n   *\n   * @param {string} codeList 策略唯一标志列表\n   * @returns {Promise<CommonMessage>}\n   * @memberof PoliciesManagementClient\n   *\n   */\n\n\n  PoliciesManagementClient.prototype.deleteMany = function (codeList, namespace) {\n    return __awaiter(this, void 0, void 0, function () {\n      var data;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , deletePolicies(this.graphqlClient, this.tokenProvider, {\n              codeList: codeList,\n              namespace: namespace\n            })];\n\n          case 1:\n            data = _a.sent().deletePolicies;\n            return [2\n            /*return*/\n            , data];\n        }\n      });\n    });\n  };\n  /**\n   * @name update\n   * @name_zh 修改策略\n   * @description 修改策略，系统内置策略由 Authing 官方维护，不能修改和删除。\n   *\n   * @param {string} code 策略唯一标志\n   * @param {Object} updates\n   * @param {string} [updates.description] 描述\n   * @param {PolicyStatement[]} [updates.statements] 策略语句，详细格式与说明请见 https://docs.authing.co/docs/access-control/index.html\n   * @param {string} [updates.newCode] 新的唯一标志，如果传入，需要保证其在用户池内是唯一的。\n   *\n   * @example\n   *\n   * const policy = await managementClient.policies.update('CODE', { newCode: 'NEWCODE' });\n   *\n   * @returns {Promise<DeepPartial<Policy>>}\n   * @memberof PoliciesManagementClient\n   *\n   */\n\n\n  PoliciesManagementClient.prototype.update = function (code, updates) {\n    return __awaiter(this, void 0, void 0, function () {\n      var description, statements, newCode, namespace, data;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            description = updates.description, statements = updates.statements, newCode = updates.newCode, namespace = updates.namespace;\n            return [4\n            /*yield*/\n            , updatePolicy(this.graphqlClient, this.tokenProvider, {\n              code: code,\n              description: description,\n              statements: statements,\n              newCode: newCode,\n              namespace: namespace\n            })];\n\n          case 1:\n            data = _a.sent().updatePolicy;\n            return [2\n            /*return*/\n            , data];\n        }\n      });\n    });\n  };\n  /**\n   * @name detail\n   * @name_zh 获取策略详情\n   * @description 获取策略详情\n   *\n   * @param {string} code 策略唯一标志\n   *\n   * const policy = await managementClient.policies.detail('CODE');\n   *\n   * @returns {Promise<DeepPartial<Policy>>}\n   * @memberof PoliciesManagementClient\n   */\n\n\n  PoliciesManagementClient.prototype.detail = function (code, namespace) {\n    return __awaiter(this, void 0, void 0, function () {\n      var data;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , policy(this.graphqlClient, this.tokenProvider, {\n              code: code,\n              namespace: namespace\n            })];\n\n          case 1:\n            data = _a.sent().policy;\n            return [2\n            /*return*/\n            , data];\n        }\n      });\n    });\n  };\n  /**\n   * @name list\n   * @name_zh 获取策略列表\n   * @description 获取策略列表\n   *\n   * @param {Object} options\n   * @param {number} [options.page=1]\n   * @param {number} [options.limit=10]\n   * @param {number} [options.namespace='default'] 所属权限组\n   * @param {boolean} [options.excludeDefault=true] 是否排除系统默认资源\n   *\n   * @example\n   *\n   * const { list, totalCount } = await managementClient.policies.list({\n   *   excludeDefault: false // 包含系统默认的策略\n   * });\n   *\n   * @returns {Promise<DeepPartial<PaginatedPolicies>>}\n   * @memberof PoliciesManagementClient\n   */\n\n\n  PoliciesManagementClient.prototype.list = function (options) {\n    return __awaiter(this, void 0, void 0, function () {\n      var _a, page, _b, limit, namespace, data;\n\n      return __generator(this, function (_c) {\n        switch (_c.label) {\n          case 0:\n            options = options || {};\n            _a = options.page, page = _a === void 0 ? 1 : _a, _b = options.limit, limit = _b === void 0 ? 10 : _b, namespace = options.namespace;\n            return [4\n            /*yield*/\n            , policies(this.graphqlClient, this.tokenProvider, {\n              page: page,\n              limit: limit,\n              namespace: namespace\n            })];\n\n          case 1:\n            data = _c.sent().policies;\n            return [2\n            /*return*/\n            , data];\n        }\n      });\n    });\n  };\n  /**\n   * @name listAssignments\n   * @name_zh 获取策略授权记录\n   * @description 获取策略授权记录\n   *\n   * @param {string} code 策略唯一标志\n   * @param {number} [page=1]\n   * @param {number} [limit=10]\n   *\n   * @example\n   *\n   * const { totalCount, list } = await managementClient.policies.listAssignments(\"CODE\");\n   *\n   * // list 数据示例\n   *\n   *[\n   *  {\n   *    code: \"PolicyCode\", // 策略唯一标志\n   *    targetType: 'USER', // 'USER' 表示用户, 'ROLE' 表示角色\n   *    targetIdentifier: '5f8812866795cc0026352fc5' // 用户 ID 或者角色 code\n   *  },\n   *  {\n   *    code: \"PolicyCode\", // 策略唯一标志\n   *    targetType: 'ROLE', // 'USER' 表示用户, 'ROLE' 表示角色\n   *    targetIdentifier: 'ROLE_CODE' // 用户 ID 或者角色 code\n   *  }\n   *]\n   *\n   * @returns {Promise<PaginatedPolicyAssignments>}\n   * @memberof PoliciesManagementClient\n   */\n\n\n  PoliciesManagementClient.prototype.listAssignments = function (_a) {\n    var code = _a.code,\n        namespace = _a.namespace,\n        _b = _a.page,\n        page = _b === void 0 ? 1 : _b,\n        _c = _a.limit,\n        limit = _c === void 0 ? 10 : _c;\n    return __awaiter(this, void 0, void 0, function () {\n      var data;\n      return __generator(this, function (_d) {\n        switch (_d.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , policyAssignments(this.graphqlClient, this.tokenProvider, {\n              code: code,\n              page: page,\n              limit: limit,\n              namespace: namespace\n            })];\n\n          case 1:\n            data = _d.sent().policyAssignments;\n            return [2\n            /*return*/\n            , data];\n        }\n      });\n    });\n  };\n  /**\n   * @name addAssignments\n   * @name_zh 添加策略授权\n   * @description 添加策略授权，可以将策略授权给用户和角色，授权给角色的策略会被该角色下的所有用户继承 。此接口可以进行批量操作。\n   *\n   * @param {string[]} policies 策略 code 列表\n   * @param {PolicyAssignmentTargetType} targetType 可选值为 USER (用户) 和 ROLE (角色)\n   * @param {string[]} targetIdentifiers 用户 id 列表和角色 code 列表\n   *\n   * @example\n   *\n   * import { PolicyAssignmentTargetType } from \"authing-js-sdk\"\n   *\n   * await managementClient.policies.addAssignments(\n   *   [\"code1\", \"code2\"],\n   *   PolicyAssignmentTargetType.User,\n   *   ['USERID']\n   * );\n   *\n   * await managementClient.policies.addAssignments(\n   *   [\"code1\", \"code2\"],\n   *   PolicyAssignmentTargetType.Role,\n   *   ['ROLE_CODE']\n   * );\n   *\n   * @returns {Promise<CommonMessage>}\n   * @memberof PoliciesManagementClient\n   */\n\n\n  PoliciesManagementClient.prototype.addAssignments = function (policies, targetType, targetIdentifiers, options) {\n    return __awaiter(this, void 0, void 0, function () {\n      var _a, inheritByChildren, namespace, res;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            _a = options || {}, inheritByChildren = _a.inheritByChildren, namespace = _a.namespace;\n            return [4\n            /*yield*/\n            , addPolicyAssignments(this.graphqlClient, this.tokenProvider, {\n              policies: policies,\n              targetType: targetType,\n              targetIdentifiers: targetIdentifiers,\n              inheritByChildren: inheritByChildren,\n              namespace: namespace\n            })];\n\n          case 1:\n            res = _b.sent();\n            return [2\n            /*return*/\n            , res.addPolicyAssignments];\n        }\n      });\n    });\n  };\n  /**\n   * @name removeAssignments\n   * @name_zh 撤销策略授权\n   * @description 撤销策略授权，此接口可以进行批量操作。\n   *\n   * @param {string[]} policies 策略 code 列表\n   * @param {PolicyAssignmentTargetType} targetType 可选值为 USER (用户) 和 ROLE (角色)\n   * @param {string[]} targetIdentifiers 用户 id 列表和角色 code 列表\n   *\n   * @example\n   *\n   * import { PolicyAssignmentTargetType } from \"authing-js-sdk\"\n   *\n   * await managementClient.policies.removeAssignments(\n   *   [\"code1\", \"code2\"],\n   *   PolicyAssignmentTargetType.User,\n   *   ['USERID']\n   * );\n   *\n   * await managementClient.policies.removeAssignments(\n   *   [\"code1\", \"code2\"],\n   *   PolicyAssignmentTargetType.Role,\n   *   ['ROLE_CODE']\n   * );\n   *\n   * @returns {Promise<CommonMessage>}\n   * @memberof PoliciesManagementClient\n   */\n\n\n  PoliciesManagementClient.prototype.removeAssignments = function (policies, targetType, targetIdentifiers, namespace) {\n    return __awaiter(this, void 0, void 0, function () {\n      var res;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , removePolicyAssignments(this.graphqlClient, this.tokenProvider, {\n              policies: policies,\n              targetType: targetType,\n              targetIdentifiers: targetIdentifiers,\n              namespace: namespace\n            })];\n\n          case 1:\n            res = _a.sent();\n            return [2\n            /*return*/\n            , res.removePolicyAssignments];\n        }\n      });\n    });\n  };\n  /**\n   * @name enableAssignment\n   * @name_zh 设置策略授权状态为开启\n   * @description 开启授权，处于未开启状态的策略授权不会生效\n   *\n   * @param {string} policy 策略 code\n   * @param {PolicyAssignmentTargetType} targetType 可选值为 USER (用户), ROLE (角色), GROUP（分组）, ORG（组织机构）\n   * @param {string} targetIdentifier 用户 id 、角色 code、分组 code、组织机构节点 ID\n   *\n   * @example\n   *\n   * import { PolicyAssignmentTargetType } from \"authing-js-sdk\"\n   *\n   * await managementClient.policies.enableAssignment(\n   *   \"code1\",\n   *   PolicyAssignmentTargetType.User,\n   *   'USERID'\n   * );\n   *\n   * @returns {Promise<CommonMessage>}\n   * @memberof PoliciesManagementClient\n   */\n\n\n  PoliciesManagementClient.prototype.enableAssignment = function (policy, targetType, targetIdentifier, namespace) {\n    return __awaiter(this, void 0, void 0, function () {\n      var res;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , enablePolicyAssignment(this.graphqlClient, this.tokenProvider, {\n              policy: policy,\n              targetType: targetType,\n              targetIdentifier: targetIdentifier,\n              namespace: namespace\n            })];\n\n          case 1:\n            res = _a.sent();\n            return [2\n            /*return*/\n            , res.enablePolicyAssignment];\n        }\n      });\n    });\n  };\n  /**\n   * @name disableAssignment\n   * @name_zh 设置策略授权状态为关闭\n   * @description 关闭策略授权，处于未开启状态的策略授权不会生效\n   *\n   * @param {string} policy 策略 code\n   * @param {PolicyAssignmentTargetType} targetType 可选值为 USER (用户), ROLE (角色), GROUP（分组）, ORG（组织机构）\n   * @param {string} targetIdentifier 用户 id 、角色 code、分组 code、组织机构节点 ID\n   *\n   * @example\n   *\n   * import { PolicyAssignmentTargetType } from \"authing-js-sdk\"\n   *\n   * await managementClient.policies.disableAssignment(\n   *   \"code1\",\n   *   PolicyAssignmentTargetType.User,\n   *   'USERID'\n   * );\n   *\n   * @returns {Promise<CommonMessage>}\n   * @memberof PoliciesManagementClient\n   */\n\n\n  PoliciesManagementClient.prototype.disableAssignment = function (policy, targetType, targetIdentifier, namespace) {\n    return __awaiter(this, void 0, void 0, function () {\n      var res;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , disablePolicyAssignment(this.graphqlClient, this.tokenProvider, {\n              policy: policy,\n              targetType: targetType,\n              targetIdentifier: targetIdentifier,\n              namespace: namespace\n            })];\n\n          case 1:\n            res = _a.sent();\n            return [2\n            /*return*/\n            , res.disbalePolicyAssignment];\n        }\n      });\n    });\n  };\n\n  return PoliciesManagementClient;\n}();\n\nexport { PoliciesManagementClient };","map":{"version":3,"sources":["../../../../src/lib/management/PoliciesManagementClient.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nimport { policies, policy, createPolicy, updatePolicy, deletePolicy, deletePolicies, policyAssignments, addPolicyAssignments, removePolicyAssignments, enablePolicyAssignment, disablePolicyAssignment } from '../graphqlapi';\n/**\n * @class PoliciesManagementClient 管理策略\n * @name PoliciesManagementClient\n * @description Authing 的访问控制与权限管理模型核心围绕着两个点来设计：**资源（Resource）**和**策略（Policy）**。策略定义了对某个（类）资源的某个（些）操作权限，将策略授权给用户（或角色），就能知道用户（或角色）是否具备对某个资源的某个操作具备操作权限。\n *\n * 此模块可以用于对策略进行增删改查，以及管理策略授权，策略可以被授予用户或角色。详细介绍请见 https://docs.authing.co/docs/access-control/index.html\n *\n * @example\n *\n * 请使用以下方式使用该模块：\n * \\`\\`\\`javascript\n * import { ManagementClient } from \"authing-js-sdk\"\n * const managementClient = new ManagementClient({\n *    userPoolId: \"YOUR_USERPOOL_ID\",\n *    secret: \"YOUR_USERPOOL_SECRET\",\n * })\n * managementClient.policies.list // 获取策略列表\n * managementClient.policies.create // 创建策略\n * managementClient.policies.listUsers // 获取策略授权记录\n * \\`\\`\\`\n *\n */\nvar PoliciesManagementClient = /** @class */ (function () {\n    function PoliciesManagementClient(options, graphqlClient, tokenProvider) {\n        this.options = options;\n        this.graphqlClient = graphqlClient;\n        this.tokenProvider = tokenProvider;\n    }\n    /**\n     * @name create\n     * @name_zh 添加策略\n     * @description 添加策略\n     *\n     * @param {string} code 策略唯一标志\n     * @param {PolicyStatement[]} 策略语句，详细格式与说明请见 https://docs.authing.co/docs/access-control/index.html\n     * @param {string} [description] 描述\n     *\n     * @example\n     *\n     * import { PolicyEffect } from \"authing-js-sdk\"\n     *\n     * const statements = [\n     *   {\n     *     resource: 'books:123',\n     *     effect: PolicyEffect.Allow,\n     *     actions: ['books:edit']\n     *   }\n     * ];\n     *\n     * const policy = await managementClient.policies.create(code, statements);\n     *\n     * @returns {Promise<DeepPartial<Policy>>}\n     * @memberof PoliciesManagementClient\n     */\n    PoliciesManagementClient.prototype.create = function (_a) {\n        var code = _a.code, statements = _a.statements, description = _a.description, namespace = _a.namespace;\n        return __awaiter(this, void 0, void 0, function () {\n            var res;\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0: return [4 /*yield*/, createPolicy(this.graphqlClient, this.tokenProvider, {\n                            code: code,\n                            statements: statements,\n                            description: description,\n                            namespace: namespace\n                        })];\n                    case 1:\n                        res = _b.sent();\n                        return [2 /*return*/, res.createPolicy];\n                }\n            });\n        });\n    };\n    /**\n     * @name delete\n     * @name_zh 删除策略\n     * @description 删除策略，系统内置策略由 Authing 官方维护，不能修改和删除。\n     *\n     * @example\n     *\n     * const { code, message } = await managementClient.policies.delete(\"CODE\"); // 通过 code 是否为 200 判断操作是否成功\n     *\n     *\n     * @param {string} code 策略唯一标志\n     * @returns {Promise<CommonMessage>}\n     * @memberof PoliciesManagementClient\n     *\n     */\n    PoliciesManagementClient.prototype.delete = function (code, namespace) {\n        return __awaiter(this, void 0, void 0, function () {\n            var data;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, deletePolicy(this.graphqlClient, this.tokenProvider, {\n                            code: code,\n                            namespace: namespace\n                        })];\n                    case 1:\n                        data = (_a.sent()).deletePolicy;\n                        return [2 /*return*/, data];\n                }\n            });\n        });\n    };\n    /**\n     * @name deleteMany\n     * @name_zh 批量删除策略\n     * @description 批量删除策略，系统内置策略由 Authing 官方维护，不能修改和删除。\n     *\n     * @example\n     *\n     * const { code, message } = await managementClient.policies.deleteMany([\"CODE\"]); // 通过 code 是否为 200 判断操作是否成功\n     *\n     *\n     * @param {string} codeList 策略唯一标志列表\n     * @returns {Promise<CommonMessage>}\n     * @memberof PoliciesManagementClient\n     *\n     */\n    PoliciesManagementClient.prototype.deleteMany = function (codeList, namespace) {\n        return __awaiter(this, void 0, void 0, function () {\n            var data;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, deletePolicies(this.graphqlClient, this.tokenProvider, {\n                            codeList: codeList,\n                            namespace: namespace\n                        })];\n                    case 1:\n                        data = (_a.sent()).deletePolicies;\n                        return [2 /*return*/, data];\n                }\n            });\n        });\n    };\n    /**\n     * @name update\n     * @name_zh 修改策略\n     * @description 修改策略，系统内置策略由 Authing 官方维护，不能修改和删除。\n     *\n     * @param {string} code 策略唯一标志\n     * @param {Object} updates\n     * @param {string} [updates.description] 描述\n     * @param {PolicyStatement[]} [updates.statements] 策略语句，详细格式与说明请见 https://docs.authing.co/docs/access-control/index.html\n     * @param {string} [updates.newCode] 新的唯一标志，如果传入，需要保证其在用户池内是唯一的。\n     *\n     * @example\n     *\n     * const policy = await managementClient.policies.update('CODE', { newCode: 'NEWCODE' });\n     *\n     * @returns {Promise<DeepPartial<Policy>>}\n     * @memberof PoliciesManagementClient\n     *\n     */\n    PoliciesManagementClient.prototype.update = function (code, updates) {\n        return __awaiter(this, void 0, void 0, function () {\n            var description, statements, newCode, namespace, data;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        description = updates.description, statements = updates.statements, newCode = updates.newCode, namespace = updates.namespace;\n                        return [4 /*yield*/, updatePolicy(this.graphqlClient, this.tokenProvider, {\n                                code: code,\n                                description: description,\n                                statements: statements,\n                                newCode: newCode,\n                                namespace: namespace\n                            })];\n                    case 1:\n                        data = (_a.sent()).updatePolicy;\n                        return [2 /*return*/, data];\n                }\n            });\n        });\n    };\n    /**\n     * @name detail\n     * @name_zh 获取策略详情\n     * @description 获取策略详情\n     *\n     * @param {string} code 策略唯一标志\n     *\n     * const policy = await managementClient.policies.detail('CODE');\n     *\n     * @returns {Promise<DeepPartial<Policy>>}\n     * @memberof PoliciesManagementClient\n     */\n    PoliciesManagementClient.prototype.detail = function (code, namespace) {\n        return __awaiter(this, void 0, void 0, function () {\n            var data;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, policy(this.graphqlClient, this.tokenProvider, {\n                            code: code,\n                            namespace: namespace\n                        })];\n                    case 1:\n                        data = (_a.sent()).policy;\n                        return [2 /*return*/, data];\n                }\n            });\n        });\n    };\n    /**\n     * @name list\n     * @name_zh 获取策略列表\n     * @description 获取策略列表\n     *\n     * @param {Object} options\n     * @param {number} [options.page=1]\n     * @param {number} [options.limit=10]\n     * @param {number} [options.namespace='default'] 所属权限组\n     * @param {boolean} [options.excludeDefault=true] 是否排除系统默认资源\n     *\n     * @example\n     *\n     * const { list, totalCount } = await managementClient.policies.list({\n     *   excludeDefault: false // 包含系统默认的策略\n     * });\n     *\n     * @returns {Promise<DeepPartial<PaginatedPolicies>>}\n     * @memberof PoliciesManagementClient\n     */\n    PoliciesManagementClient.prototype.list = function (options) {\n        return __awaiter(this, void 0, void 0, function () {\n            var _a, page, _b, limit, namespace, data;\n            return __generator(this, function (_c) {\n                switch (_c.label) {\n                    case 0:\n                        options = options || {};\n                        _a = options.page, page = _a === void 0 ? 1 : _a, _b = options.limit, limit = _b === void 0 ? 10 : _b, namespace = options.namespace;\n                        return [4 /*yield*/, policies(this.graphqlClient, this.tokenProvider, {\n                                page: page,\n                                limit: limit,\n                                namespace: namespace\n                            })];\n                    case 1:\n                        data = (_c.sent()).policies;\n                        return [2 /*return*/, data];\n                }\n            });\n        });\n    };\n    /**\n     * @name listAssignments\n     * @name_zh 获取策略授权记录\n     * @description 获取策略授权记录\n     *\n     * @param {string} code 策略唯一标志\n     * @param {number} [page=1]\n     * @param {number} [limit=10]\n     *\n     * @example\n     *\n     * const { totalCount, list } = await managementClient.policies.listAssignments(\"CODE\");\n     *\n     * // list 数据示例\n     *\n     *[\n     *  {\n     *    code: \"PolicyCode\", // 策略唯一标志\n     *    targetType: 'USER', // 'USER' 表示用户, 'ROLE' 表示角色\n     *    targetIdentifier: '5f8812866795cc0026352fc5' // 用户 ID 或者角色 code\n     *  },\n     *  {\n     *    code: \"PolicyCode\", // 策略唯一标志\n     *    targetType: 'ROLE', // 'USER' 表示用户, 'ROLE' 表示角色\n     *    targetIdentifier: 'ROLE_CODE' // 用户 ID 或者角色 code\n     *  }\n     *]\n     *\n     * @returns {Promise<PaginatedPolicyAssignments>}\n     * @memberof PoliciesManagementClient\n     */\n    PoliciesManagementClient.prototype.listAssignments = function (_a) {\n        var code = _a.code, namespace = _a.namespace, _b = _a.page, page = _b === void 0 ? 1 : _b, _c = _a.limit, limit = _c === void 0 ? 10 : _c;\n        return __awaiter(this, void 0, void 0, function () {\n            var data;\n            return __generator(this, function (_d) {\n                switch (_d.label) {\n                    case 0: return [4 /*yield*/, policyAssignments(this.graphqlClient, this.tokenProvider, {\n                            code: code,\n                            page: page,\n                            limit: limit,\n                            namespace: namespace\n                        })];\n                    case 1:\n                        data = (_d.sent()).policyAssignments;\n                        return [2 /*return*/, data];\n                }\n            });\n        });\n    };\n    /**\n     * @name addAssignments\n     * @name_zh 添加策略授权\n     * @description 添加策略授权，可以将策略授权给用户和角色，授权给角色的策略会被该角色下的所有用户继承 。此接口可以进行批量操作。\n     *\n     * @param {string[]} policies 策略 code 列表\n     * @param {PolicyAssignmentTargetType} targetType 可选值为 USER (用户) 和 ROLE (角色)\n     * @param {string[]} targetIdentifiers 用户 id 列表和角色 code 列表\n     *\n     * @example\n     *\n     * import { PolicyAssignmentTargetType } from \"authing-js-sdk\"\n     *\n     * await managementClient.policies.addAssignments(\n     *   [\"code1\", \"code2\"],\n     *   PolicyAssignmentTargetType.User,\n     *   ['USERID']\n     * );\n     *\n     * await managementClient.policies.addAssignments(\n     *   [\"code1\", \"code2\"],\n     *   PolicyAssignmentTargetType.Role,\n     *   ['ROLE_CODE']\n     * );\n     *\n     * @returns {Promise<CommonMessage>}\n     * @memberof PoliciesManagementClient\n     */\n    PoliciesManagementClient.prototype.addAssignments = function (policies, targetType, targetIdentifiers, options) {\n        return __awaiter(this, void 0, void 0, function () {\n            var _a, inheritByChildren, namespace, res;\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        _a = options || {}, inheritByChildren = _a.inheritByChildren, namespace = _a.namespace;\n                        return [4 /*yield*/, addPolicyAssignments(this.graphqlClient, this.tokenProvider, {\n                                policies: policies,\n                                targetType: targetType,\n                                targetIdentifiers: targetIdentifiers,\n                                inheritByChildren: inheritByChildren,\n                                namespace: namespace\n                            })];\n                    case 1:\n                        res = _b.sent();\n                        return [2 /*return*/, res.addPolicyAssignments];\n                }\n            });\n        });\n    };\n    /**\n     * @name removeAssignments\n     * @name_zh 撤销策略授权\n     * @description 撤销策略授权，此接口可以进行批量操作。\n     *\n     * @param {string[]} policies 策略 code 列表\n     * @param {PolicyAssignmentTargetType} targetType 可选值为 USER (用户) 和 ROLE (角色)\n     * @param {string[]} targetIdentifiers 用户 id 列表和角色 code 列表\n     *\n     * @example\n     *\n     * import { PolicyAssignmentTargetType } from \"authing-js-sdk\"\n     *\n     * await managementClient.policies.removeAssignments(\n     *   [\"code1\", \"code2\"],\n     *   PolicyAssignmentTargetType.User,\n     *   ['USERID']\n     * );\n     *\n     * await managementClient.policies.removeAssignments(\n     *   [\"code1\", \"code2\"],\n     *   PolicyAssignmentTargetType.Role,\n     *   ['ROLE_CODE']\n     * );\n     *\n     * @returns {Promise<CommonMessage>}\n     * @memberof PoliciesManagementClient\n     */\n    PoliciesManagementClient.prototype.removeAssignments = function (policies, targetType, targetIdentifiers, namespace) {\n        return __awaiter(this, void 0, void 0, function () {\n            var res;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, removePolicyAssignments(this.graphqlClient, this.tokenProvider, {\n                            policies: policies,\n                            targetType: targetType,\n                            targetIdentifiers: targetIdentifiers,\n                            namespace: namespace\n                        })];\n                    case 1:\n                        res = _a.sent();\n                        return [2 /*return*/, res.removePolicyAssignments];\n                }\n            });\n        });\n    };\n    /**\n     * @name enableAssignment\n     * @name_zh 设置策略授权状态为开启\n     * @description 开启授权，处于未开启状态的策略授权不会生效\n     *\n     * @param {string} policy 策略 code\n     * @param {PolicyAssignmentTargetType} targetType 可选值为 USER (用户), ROLE (角色), GROUP（分组）, ORG（组织机构）\n     * @param {string} targetIdentifier 用户 id 、角色 code、分组 code、组织机构节点 ID\n     *\n     * @example\n     *\n     * import { PolicyAssignmentTargetType } from \"authing-js-sdk\"\n     *\n     * await managementClient.policies.enableAssignment(\n     *   \"code1\",\n     *   PolicyAssignmentTargetType.User,\n     *   'USERID'\n     * );\n     *\n     * @returns {Promise<CommonMessage>}\n     * @memberof PoliciesManagementClient\n     */\n    PoliciesManagementClient.prototype.enableAssignment = function (policy, targetType, targetIdentifier, namespace) {\n        return __awaiter(this, void 0, void 0, function () {\n            var res;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, enablePolicyAssignment(this.graphqlClient, this.tokenProvider, {\n                            policy: policy,\n                            targetType: targetType,\n                            targetIdentifier: targetIdentifier,\n                            namespace: namespace\n                        })];\n                    case 1:\n                        res = _a.sent();\n                        return [2 /*return*/, res.enablePolicyAssignment];\n                }\n            });\n        });\n    };\n    /**\n     * @name disableAssignment\n     * @name_zh 设置策略授权状态为关闭\n     * @description 关闭策略授权，处于未开启状态的策略授权不会生效\n     *\n     * @param {string} policy 策略 code\n     * @param {PolicyAssignmentTargetType} targetType 可选值为 USER (用户), ROLE (角色), GROUP（分组）, ORG（组织机构）\n     * @param {string} targetIdentifier 用户 id 、角色 code、分组 code、组织机构节点 ID\n     *\n     * @example\n     *\n     * import { PolicyAssignmentTargetType } from \"authing-js-sdk\"\n     *\n     * await managementClient.policies.disableAssignment(\n     *   \"code1\",\n     *   PolicyAssignmentTargetType.User,\n     *   'USERID'\n     * );\n     *\n     * @returns {Promise<CommonMessage>}\n     * @memberof PoliciesManagementClient\n     */\n    PoliciesManagementClient.prototype.disableAssignment = function (policy, targetType, targetIdentifier, namespace) {\n        return __awaiter(this, void 0, void 0, function () {\n            var res;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, disablePolicyAssignment(this.graphqlClient, this.tokenProvider, {\n                            policy: policy,\n                            targetType: targetType,\n                            targetIdentifier: targetIdentifier,\n                            namespace: namespace\n                        })];\n                    case 1:\n                        res = _a.sent();\n                        return [2 /*return*/, res.disbalePolicyAssignment];\n                }\n            });\n        });\n    };\n    return PoliciesManagementClient;\n}());\nexport { PoliciesManagementClient };\n//# sourceMappingURL=PoliciesManagementClient.js.map"]},"metadata":{},"sourceType":"module"}