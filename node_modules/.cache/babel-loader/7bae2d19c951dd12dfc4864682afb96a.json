{"ast":null,"code":"var _jsxFileName = \"/Users/mikey/Desktop/yc-blog/src/admin/components/areaList/AreaList.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useMemo, useEffect } from 'react';\nimport styles from './style.module.scss';\nimport { ReactSortable } from \"react-sortablejs\";\nimport { Button } from \"antd\";\nimport { AreaItem } from \"../areaItem\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet refs = [];\nexport const AreaList = forwardRef(_c = _s((props, ref) => {\n  _s();\n\n  const [children, setChildren] = useState(props.children); // 感知外部 schema 变化 如果children发生了改变 调用 setChildren 外部发生变化 children就发生变化了\n\n  useEffect(() => {\n    setChildren(props.children);\n  }, [props.children]); // 为了每次渲染时候性能高一些 ,不希望它重复的反复的渲染 做一下缓存或者说性能优化 用了 useMemo\n\n  useMemo(() => {\n    refs = children.map(item => createRef());\n  }, [children]); // 增加\n\n  const addItemToChildren = () => {\n    const newChildren = [...children];\n    newChildren.push({});\n    setChildren(newChildren);\n  }; // 更改 给子组件使用 AreaItem 通过组件标签 赋值传递\n\n\n  const changeAreaItem = (item, index) => {\n    const newChildren = [...children];\n    newChildren.splice(index, 1, item);\n    setChildren(newChildren);\n  }; // 删除 这里给 子组件使用 就是 AreaItem 通过子组件标签 赋值传递\n\n\n  const removeItemFromChildren = index => {\n    const newChildren = [...children];\n    newChildren.splice(index, 1);\n    setChildren(newChildren);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"ul\", {\n      className: styles.list,\n      children: /*#__PURE__*/_jsxDEV(ReactSortable, {\n        list: children,\n        setList: setChildren,\n        children: children.map((item, index) => /*#__PURE__*/_jsxDEV(AreaItem, {\n          item: item,\n          index: index,\n          removeItemFromChildren: removeItemFromChildren,\n          changeAreaItem: changeAreaItem,\n          ref: refs[index]\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      type: \"primary\",\n      ghost: true,\n      onClick: addItemToChildren,\n      children: \"\\u65B0\\u589E\\u533A\\u5757\\u6309\\u94AE\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 9\n  }, this);\n}, \"HOLDhT0fVSyS6mvzuR1HvL3V4Us=\"));\n_c2 = AreaList;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"AreaList$forwardRef\");\n$RefreshReg$(_c2, \"AreaList\");","map":{"version":3,"names":["React","useState","useMemo","useEffect","styles","ReactSortable","Button","AreaItem","refs","AreaList","forwardRef","props","ref","children","setChildren","map","item","createRef","addItemToChildren","newChildren","push","changeAreaItem","index","splice","removeItemFromChildren","list"],"sources":["/Users/mikey/Desktop/yc-blog/src/admin/components/areaList/AreaList.jsx"],"sourcesContent":["import React, {useState, useMemo, useEffect} from 'react';\nimport styles from './style.module.scss';\nimport {ReactSortable} from \"react-sortablejs\";\nimport {Button} from \"antd\";\nimport {AreaItem} from \"../areaItem\";\n\nlet refs = [];\n\nexport const AreaList = forwardRef((props, ref) => {\n    const [children, setChildren] = useState(props.children);\n\n    // 感知外部 schema 变化 如果children发生了改变 调用 setChildren 外部发生变化 children就发生变化了\n    useEffect(() => {\n        setChildren(props.children);\n    }, [props.children])\n\n    // 为了每次渲染时候性能高一些 ,不希望它重复的反复的渲染 做一下缓存或者说性能优化 用了 useMemo\n    useMemo(() => {\n        refs = children.map(item => createRef());\n    }, [children])\n\n    // 增加\n    const addItemToChildren = () => {\n        const newChildren = [...children];\n        newChildren.push({});\n        setChildren(newChildren);\n    }\n\n    // 更改 给子组件使用 AreaItem 通过组件标签 赋值传递\n    const changeAreaItem = (item,index) => {\n        const newChildren = [...children];\n        newChildren.splice(index, 1,item);\n        setChildren(newChildren);\n    }\n\n    // 删除 这里给 子组件使用 就是 AreaItem 通过子组件标签 赋值传递\n    const removeItemFromChildren = (index) => {\n        const newChildren = [...children];\n        newChildren.splice(index, 1);\n        setChildren(newChildren);\n    }\n\n    return (\n        <div>\n            <ul className={styles.list}>\n                <ReactSortable list={children} setList={setChildren}>\n                    {children.map((item, index) => (\n                        <AreaItem key={index} item={item} index={index}\n                                  removeItemFromChildren={removeItemFromChildren}\n                                  changeAreaItem = {changeAreaItem}\n                                  ref={refs[index]}\n                        />\n                    ))}\n                </ReactSortable>\n            </ul>\n            <Button type='primary' ghost onClick={addItemToChildren}>新增区块按钮</Button>\n        </div>\n    )\n})"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,OAAzB,EAAkCC,SAAlC,QAAkD,OAAlD;AACA,OAAOC,MAAP,MAAmB,qBAAnB;AACA,SAAQC,aAAR,QAA4B,kBAA5B;AACA,SAAQC,MAAR,QAAqB,MAArB;AACA,SAAQC,QAAR,QAAuB,aAAvB;;AAEA,IAAIC,IAAI,GAAG,EAAX;AAEA,OAAO,MAAMC,QAAQ,GAAGC,UAAU,SAAC,CAACC,KAAD,EAAQC,GAAR,KAAgB;EAAA;;EAC/C,MAAM,CAACC,QAAD,EAAWC,WAAX,IAA0Bb,QAAQ,CAACU,KAAK,CAACE,QAAP,CAAxC,CAD+C,CAG/C;;EACAV,SAAS,CAAC,MAAM;IACZW,WAAW,CAACH,KAAK,CAACE,QAAP,CAAX;EACH,CAFQ,EAEN,CAACF,KAAK,CAACE,QAAP,CAFM,CAAT,CAJ+C,CAQ/C;;EACAX,OAAO,CAAC,MAAM;IACVM,IAAI,GAAGK,QAAQ,CAACE,GAAT,CAAaC,IAAI,IAAIC,SAAS,EAA9B,CAAP;EACH,CAFM,EAEJ,CAACJ,QAAD,CAFI,CAAP,CAT+C,CAa/C;;EACA,MAAMK,iBAAiB,GAAG,MAAM;IAC5B,MAAMC,WAAW,GAAG,CAAC,GAAGN,QAAJ,CAApB;IACAM,WAAW,CAACC,IAAZ,CAAiB,EAAjB;IACAN,WAAW,CAACK,WAAD,CAAX;EACH,CAJD,CAd+C,CAoB/C;;;EACA,MAAME,cAAc,GAAG,CAACL,IAAD,EAAMM,KAAN,KAAgB;IACnC,MAAMH,WAAW,GAAG,CAAC,GAAGN,QAAJ,CAApB;IACAM,WAAW,CAACI,MAAZ,CAAmBD,KAAnB,EAA0B,CAA1B,EAA4BN,IAA5B;IACAF,WAAW,CAACK,WAAD,CAAX;EACH,CAJD,CArB+C,CA2B/C;;;EACA,MAAMK,sBAAsB,GAAIF,KAAD,IAAW;IACtC,MAAMH,WAAW,GAAG,CAAC,GAAGN,QAAJ,CAApB;IACAM,WAAW,CAACI,MAAZ,CAAmBD,KAAnB,EAA0B,CAA1B;IACAR,WAAW,CAACK,WAAD,CAAX;EACH,CAJD;;EAMA,oBACI;IAAA,wBACI;MAAI,SAAS,EAAEf,MAAM,CAACqB,IAAtB;MAAA,uBACI,QAAC,aAAD;QAAe,IAAI,EAAEZ,QAArB;QAA+B,OAAO,EAAEC,WAAxC;QAAA,UACKD,QAAQ,CAACE,GAAT,CAAa,CAACC,IAAD,EAAOM,KAAP,kBACV,QAAC,QAAD;UAAsB,IAAI,EAAEN,IAA5B;UAAkC,KAAK,EAAEM,KAAzC;UACU,sBAAsB,EAAEE,sBADlC;UAEU,cAAc,EAAIH,cAF5B;UAGU,GAAG,EAAEb,IAAI,CAACc,KAAD;QAHnB,GAAeA,KAAf;UAAA;UAAA;UAAA;QAAA,QADH;MADL;QAAA;QAAA;QAAA;MAAA;IADJ;MAAA;MAAA;MAAA;IAAA,QADJ,eAYI,QAAC,MAAD;MAAQ,IAAI,EAAC,SAAb;MAAuB,KAAK,MAA5B;MAA6B,OAAO,EAAEJ,iBAAtC;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAZJ;EAAA;IAAA;IAAA;IAAA;EAAA,QADJ;AAgBH,CAlDiC,kCAA3B;MAAMT,Q"},"metadata":{},"sourceType":"module"}