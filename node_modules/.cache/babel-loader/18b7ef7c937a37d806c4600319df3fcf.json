{"ast":null,"code":"import{produce,original}from'immer';import{CHANGE_SCHEMA,ADD_PAGE_CHILDREN,CHANGE_PAGE_CHILD,DELECT_PAGE_CHILD,CHANGE_PAGE_CHILD_POSITION,CHANGE_PAGE_ATTRIBUTE}from\"./constant\";var initialSchema={name:'page',attributes:{},children:[]};var defaultState={schema:initialSchema};export var homeManagePageReducer=function homeManagePageReducer(){var state=arguments.length>0&&arguments[0]!==undefined?arguments[0]:defaultState;var action=arguments.length>1?arguments[1]:undefined;return produce(state,function(draft){switch(action.type){// 改变 当前的 schema\ncase CHANGE_SCHEMA:draft.schema=action.value;break;// 增加    page children\ncase ADD_PAGE_CHILDREN:draft.schema.children.push(action.value);break;//  改变  就是把当前的删除 在回去之前的\ncase CHANGE_PAGE_CHILD:draft.schema.children.splice(action.index,1,action.value);break;// 删除 把当前的删除\ncase DELECT_PAGE_CHILD:draft.schema.children.splice(action.index,1);break;// 这里比较复杂 因为用到了 react-sortable-hoc 它提供了一个 oldIndex 还有 newIndex. 本质上来说我删除 老内容 添加新内容就好\n// 但是这里又用到了 immer 这个库 打印出来的结果就是 proxy类型的数据. 所以查了文档用 immer提供的 original 先拷贝一份你的children\n// 内容  再去删除children里面的内容 新内容我在添加 copy里的 [action.oldIndex]\ncase CHANGE_PAGE_CHILD_POSITION:var copy=original(draft.schema.children);draft.schema.children.splice(action.oldIndex,1);draft.schema.children.splice(action.newIndex,0,copy[action.oldIndex]);break;case CHANGE_PAGE_ATTRIBUTE:draft.schema.attributes[action.key]=action.value;break;default:break;}});};","map":{"version":3,"names":["produce","original","CHANGE_SCHEMA","ADD_PAGE_CHILDREN","CHANGE_PAGE_CHILD","DELECT_PAGE_CHILD","CHANGE_PAGE_CHILD_POSITION","CHANGE_PAGE_ATTRIBUTE","initialSchema","name","attributes","children","defaultState","schema","homeManagePageReducer","state","action","draft","type","value","push","splice","index","copy","oldIndex","newIndex","key"],"sources":["/Users/mikey/Desktop/yc-blog/src/admin/redux/reducer.js"],"sourcesContent":["import {produce,original} from 'immer';\nimport {\n    CHANGE_SCHEMA,\n    ADD_PAGE_CHILDREN,\n    CHANGE_PAGE_CHILD,\n    DELECT_PAGE_CHILD,\n    CHANGE_PAGE_CHILD_POSITION,\n    CHANGE_PAGE_ATTRIBUTE\n} from \"./constant\";\n\nconst initialSchema = {\n    name: 'page',\n    attributes: {},\n    children: []\n};\n\nconst defaultState = {\n    schema: initialSchema\n};\n\nexport const homeManagePageReducer = (state = defaultState, action) => produce(state, (draft) => {\n    switch (action.type) {\n        // 改变 当前的 schema\n        case CHANGE_SCHEMA:\n            draft.schema = action.value;\n            break;\n        // 增加    page children\n        case ADD_PAGE_CHILDREN:\n            draft.schema.children.push(action.value);\n            break;\n        //  改变  就是把当前的删除 在回去之前的\n        case CHANGE_PAGE_CHILD:\n            draft.schema.children.splice(action.index, 1, action.value);\n            break;\n        // 删除 把当前的删除\n        case DELECT_PAGE_CHILD:\n            draft.schema.children.splice(action.index, 1);\n            break;\n        // 这里比较复杂 因为用到了 react-sortable-hoc 它提供了一个 oldIndex 还有 newIndex. 本质上来说我删除 老内容 添加新内容就好\n        // 但是这里又用到了 immer 这个库 打印出来的结果就是 proxy类型的数据. 所以查了文档用 immer提供的 original 先拷贝一份你的children\n        // 内容  再去删除children里面的内容 新内容我在添加 copy里的 [action.oldIndex]\n        case CHANGE_PAGE_CHILD_POSITION:\n            const copy = original(draft.schema.children);\n            draft.schema.children.splice(action.oldIndex, 1);\n            draft.schema.children.splice(action.newIndex, 0,copy[action.oldIndex]);\n            break;\n        case CHANGE_PAGE_ATTRIBUTE:\n            draft.schema.attributes[action.key]=action.value;\n            break\n        default:\n            break;\n    }\n})\n"],"mappings":"AAAA,OAAQA,OAAR,CAAgBC,QAAhB,KAA+B,OAA/B,CACA,OACIC,aADJ,CAEIC,iBAFJ,CAGIC,iBAHJ,CAIIC,iBAJJ,CAKIC,0BALJ,CAMIC,qBANJ,KAOO,YAPP,CASA,GAAMC,cAAa,CAAG,CAClBC,IAAI,CAAE,MADY,CAElBC,UAAU,CAAE,EAFM,CAGlBC,QAAQ,CAAE,EAHQ,CAAtB,CAMA,GAAMC,aAAY,CAAG,CACjBC,MAAM,CAAEL,aADS,CAArB,CAIA,MAAO,IAAMM,sBAAqB,CAAG,QAAxBA,sBAAwB,MAACC,MAAD,2DAASH,YAAT,IAAuBI,OAAvB,iDAAkChB,QAAO,CAACe,KAAD,CAAQ,SAACE,KAAD,CAAW,CAC7F,OAAQD,MAAM,CAACE,IAAf,EACI;AACA,IAAKhB,cAAL,CACIe,KAAK,CAACJ,MAAN,CAAeG,MAAM,CAACG,KAAtB,CACA,MACJ;AACA,IAAKhB,kBAAL,CACIc,KAAK,CAACJ,MAAN,CAAaF,QAAb,CAAsBS,IAAtB,CAA2BJ,MAAM,CAACG,KAAlC,EACA,MACJ;AACA,IAAKf,kBAAL,CACIa,KAAK,CAACJ,MAAN,CAAaF,QAAb,CAAsBU,MAAtB,CAA6BL,MAAM,CAACM,KAApC,CAA2C,CAA3C,CAA8CN,MAAM,CAACG,KAArD,EACA,MACJ;AACA,IAAKd,kBAAL,CACIY,KAAK,CAACJ,MAAN,CAAaF,QAAb,CAAsBU,MAAtB,CAA6BL,MAAM,CAACM,KAApC,CAA2C,CAA3C,EACA,MACJ;AACA;AACA;AACA,IAAKhB,2BAAL,CACI,GAAMiB,KAAI,CAAGtB,QAAQ,CAACgB,KAAK,CAACJ,MAAN,CAAaF,QAAd,CAArB,CACAM,KAAK,CAACJ,MAAN,CAAaF,QAAb,CAAsBU,MAAtB,CAA6BL,MAAM,CAACQ,QAApC,CAA8C,CAA9C,EACAP,KAAK,CAACJ,MAAN,CAAaF,QAAb,CAAsBU,MAAtB,CAA6BL,MAAM,CAACS,QAApC,CAA8C,CAA9C,CAAgDF,IAAI,CAACP,MAAM,CAACQ,QAAR,CAApD,EACA,MACJ,IAAKjB,sBAAL,CACIU,KAAK,CAACJ,MAAN,CAAaH,UAAb,CAAwBM,MAAM,CAACU,GAA/B,EAAoCV,MAAM,CAACG,KAA3C,CACA,MACJ,QACI,MA7BR,CA+BH,CAhC6E,CAAzC,EAA9B"},"metadata":{},"sourceType":"module"}