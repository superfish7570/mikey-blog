{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function sent() {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) {\n      try {\n        if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n        if (y = 0, t) op = [op[0] & 2, t.value];\n\n        switch (op[0]) {\n          case 0:\n          case 1:\n            t = op;\n            break;\n\n          case 4:\n            _.label++;\n            return {\n              value: op[1],\n              done: false\n            };\n\n          case 5:\n            _.label++;\n            y = op[1];\n            op = [0];\n            continue;\n\n          case 7:\n            op = _.ops.pop();\n\n            _.trys.pop();\n\n            continue;\n\n          default:\n            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n              _ = 0;\n              continue;\n            }\n\n            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n              _.label = op[1];\n              break;\n            }\n\n            if (op[0] === 6 && _.label < t[1]) {\n              _.label = t[1];\n              t = op;\n              break;\n            }\n\n            if (t && _.label < t[2]) {\n              _.label = t[2];\n\n              _.ops.push(op);\n\n              break;\n            }\n\n            if (t[2]) _.ops.pop();\n\n            _.trys.pop();\n\n            continue;\n        }\n\n        op = body.call(thisArg, _);\n      } catch (e) {\n        op = [6, e];\n        y = 0;\n      } finally {\n        f = t = 0;\n      }\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nimport { AuthenticationTokenProvider } from './AuthenticationTokenProvider';\nimport sha256 from 'crypto-js/sha256';\nimport CryptoJS from 'crypto-js';\nimport { bindEmail, bindPhone, checkLoginStatus, checkPasswordStrength, getUserDepartments, getUserRoles, isUserExists, listUserAuthorizedResources, loginByEmail, loginByPhoneCode, loginByPhonePassword, loginBySubAccount, loginByUsername, refreshToken, registerByEmail, registerByPhoneCode, registerByUsername, removeUdv, resetPassword, resetPasswordByFirstLoginToken, resetPasswordByForceResetToken, sendEmail, setUdv, setUdvBatch, udv, unbindEmail, unbindPhone, updateEmail, updatePassword, updatePhone, updateUser, user } from '../graphqlapi';\nimport { GraphqlClient } from '../common/GraphqlClient';\nimport { PasswordSecurityLevel } from './types';\nimport { UdfTargetType } from '../../types/graphql.v2';\nimport { QrCodeAuthenticationClient } from './QrCodeAuthenticationClient';\nimport { MfaAuthenticationClient } from './MfaAuthenticationClient';\nimport { HttpClient, NaiveHttpClient } from '../common/HttpClient';\nimport { convertObjectToKeyValueList, convertUdv, convertUdvToKeyValuePair, encrypt, formatAuthorizedResources, generateRandomString, serialize, uploadFile } from '../utils';\nimport jwtDecode from 'jwt-decode';\nimport { SocialAuthenticationClient } from './SocialAuthenticationClient';\nimport { PublicKeyManager } from '../common/PublicKeyManager';\nimport { EnterpriseAuthenticationClient } from './EnterpriseAuthenticationClient';\nimport { BaseAuthenticationClient } from './BaseAuthenticationClient';\nimport { PrincipalAuthenticationClient } from './PrincipalAuthentication';\nvar DEFAULT_OPTIONS = {\n  appId: undefined,\n  tenantId: undefined,\n  appHost: undefined,\n  protocol: 'oidc',\n  tokenEndPointAuthMethod: 'client_secret_post',\n  introspectionEndPointAuthMethod: 'client_secret_post',\n  revocationEndPointAuthMethod: 'client_secret_post',\n  timeout: 10000,\n  onError: function onError(code, message, data) {\n    throw {\n      code: code,\n      message: message,\n      data: data\n    };\n  },\n  requestFrom: 'sdk',\n  encryptFunction: encrypt,\n  host: 'https://core.authing.cn',\n  headers: {\n    'userpool-id': 'x-authing-userpool-id',\n    'app-id': 'x-authing-app-id',\n    'request-from': 'x-authing-request-from',\n    'sdk-version': 'x-authing-sdk-version',\n    'tenant-id': 'x-authing-app-tenant-id',\n    lang: 'x-authing-lang'\n  },\n  lang: 'zh-CN'\n};\n/**\n * @class AuthenticationClient 认证核心模块\n * @description 此模块包含注册登录、重置手机号邮箱、修改账号信息等方法，是以你的终端用户（End User）的身份进行请求，适合在需要验证用户身份的情况下使用。\n *\n * @example\n *\n * 使用方法：\n *\n * \\`\\`\\`javascript\n * import { AuthenticationClient } from \"authing-js-sdk\"\n * const authenticationClient = new AuthenticationClient({\n *    appId: \"YOUR_APP_ID\",\n * })\n * authenticationClient.registerByEmail // 使用邮箱注册\n * authenticationClient.loginByEmail // 使用邮箱登录\n * \\`\\`\\`\n *\n *\n * @name AuthenticationClient\n */\n\nvar AuthenticationClient =\n/** @class */\nfunction () {\n  function AuthenticationClient(options) {\n    Object.keys(options).forEach(function (i) {\n      return !options[i] && delete options[i];\n    });\n    this.options = Object.assign({}, DEFAULT_OPTIONS, options);\n    this.baseClient = new BaseAuthenticationClient(this.options);\n    var graphqlEndpoint = this.baseClient.appHost + \"/graphql/v2\"; // 子模块初始化顺序: GraphqlClient -> ManagementTokenProvider -> Others\n\n    this.graphqlClient = new (this.options.graphqlClient || GraphqlClient)(graphqlEndpoint, this.options);\n    this.tokenProvider = new (this.options.tokenProvider || AuthenticationTokenProvider)(this.options);\n    this.httpClient = new (this.options.httpClient || HttpClient)(this.options, this.tokenProvider);\n    this.naiveHttpClient = new NaiveHttpClient(this.options, this.tokenProvider);\n    this.publicKeyManager = new PublicKeyManager(this.options, this.httpClient);\n    this.wxqrcode = new QrCodeAuthenticationClient(this.options, this.tokenProvider, this.httpClient, 'WXAPP_AUTH');\n    this.qrcode = new QrCodeAuthenticationClient(this.options, this.tokenProvider, this.httpClient, 'APP_AUTH');\n    this.wechatmpqrcode = new QrCodeAuthenticationClient(this.options, this.tokenProvider, this.httpClient, 'WECHATMP_AUTH');\n    this.mfa = new MfaAuthenticationClient(this.options, this.tokenProvider, this.httpClient);\n    this.social = new SocialAuthenticationClient(this.options, this.tokenProvider, this.httpClient);\n    this.enterprise = new EnterpriseAuthenticationClient(this.options, this.tokenProvider, this.httpClient);\n    this.principal = new PrincipalAuthenticationClient(this.options, this.tokenProvider, this.httpClient);\n\n    if (this.options.token) {\n      this.setToken(this.options.token);\n    }\n  }\n\n  AuthenticationClient.prototype.checkLoggedIn = function () {\n    var _a;\n\n    var user = this.tokenProvider.getUser();\n\n    if (user) {\n      return user.id;\n    }\n\n    var token = this.tokenProvider.getToken();\n\n    if (!token) {\n      throw new Error('请先登录！');\n    }\n\n    var decoded = jwtDecode(token);\n    var userId = decoded.sub || ((_a = decoded.data) === null || _a === void 0 ? void 0 : _a.id);\n\n    if (!userId) {\n      throw new Error('不合法的 accessToken');\n    }\n\n    return userId;\n  };\n\n  AuthenticationClient.prototype.setCurrentUser = function (user) {\n    this.tokenProvider.setUser(user);\n  };\n\n  AuthenticationClient.prototype.setToken = function (token) {\n    this.tokenProvider.setToken(token);\n  };\n\n  AuthenticationClient.prototype.setRequestFrom = function (requestFrom) {\n    this.options.requestFrom = requestFrom;\n    this.graphqlClient.setOptions(this.options);\n    this.httpClient.setOptions(this.options);\n  };\n  /**\n   * @name registerByEmail\n   * @name_zh 使用邮箱注册\n   * @description 使用邮箱注册，此接口不要求用户对邮箱进行验证，用户注册之后 emailVerified 字段会为 false 。如果你希望邮箱未验证的用户不能进行登录，可以使用 pipeline 对此类请求进行拦截。\n   *\n   * @param {string} email 邮箱\n   * @param {string} password 密码\n   * @param {RegisterProfile} [profile] 用户资料\n   * @param {Object} [options]\n   * @param {boolean} [options.forceLogin] 是否走一遍完整的登录的，会触发登录前后的 pipeline 函数以及登录事件 webhook ，同时该用户的累计登录次数会加 1 。默认为 false 。\n   * @param {boolean} [options.generateToken] 是否为该用户生成 token，不会触发登录后的完整流程，用户的累计登录次数不会加 1。默认为 false 。\n   * @param {string} [options.clientIp] 客户端真实 IP，如果你在服务器端调用此接口，请务必将此参数设置为终端用户的真实 IP。\n   *\n   * @example\n   *\n   * authenticationClient.registerByEmail(\n   *  'test@example.com',\n   *  'passw0rd',\n   *  {\n   *    nickname: 'Nick'\n   *  },\n   *  {\n   *    generateToken: true\n   *  }\n   * )\n   *\n   * @example\n   * authenticationClient.registerByEmail('test@example.com', 'passw0rd')\n   *\n   *\n   * @returns {Promise<User>}\n   * @memberof AuthenticationClient\n   */\n\n\n  AuthenticationClient.prototype.registerByEmail = function (email, password, profile, options) {\n    return __awaiter(this, void 0, void 0, function () {\n      var _a, forceLogin, _b, generateToken, clientIp, params, context, customData, phoneToken, _c, _d, _e, extraParams, extraContext, user;\n\n      return __generator(this, function (_f) {\n        switch (_f.label) {\n          case 0:\n            options = options || {};\n            profile = profile || {};\n            _a = options.forceLogin, forceLogin = _a === void 0 ? false : _a, _b = options.generateToken, generateToken = _b === void 0 ? false : _b, clientIp = options.clientIp, params = options.params, context = options.context, customData = options.customData, phoneToken = options.phoneToken;\n            _d = (_c = this.options).encryptFunction;\n            _e = [password];\n            return [4\n            /*yield*/\n            , this.publicKeyManager.getPublicKey()];\n\n          case 1:\n            return [4\n            /*yield*/\n            , _d.apply(_c, _e.concat([_f.sent(), this.options.encryption]))];\n\n          case 2:\n            password = _f.sent();\n            extraParams = null;\n\n            if (customData) {\n              extraParams = JSON.stringify(convertObjectToKeyValueList(customData));\n            } else if (params) {\n              extraParams = JSON.stringify(params);\n            }\n\n            extraContext = null;\n\n            if (context) {\n              extraContext = JSON.stringify(context);\n            }\n\n            return [4\n            /*yield*/\n            , registerByEmail(this.graphqlClient, this.tokenProvider, {\n              input: {\n                email: email,\n                password: password,\n                profile: profile,\n                forceLogin: forceLogin,\n                generateToken: generateToken,\n                clientIp: clientIp,\n                params: extraParams,\n                context: extraContext,\n                phoneToken: phoneToken\n              }\n            })];\n\n          case 3:\n            user = _f.sent().registerByEmail;\n            this.setCurrentUser(user);\n            return [2\n            /*return*/\n            , user];\n        }\n      });\n    });\n  };\n\n  AuthenticationClient.prototype.registerByEmailCode = function (email, code, profile, options) {\n    return __awaiter(this, void 0, void 0, function () {\n      var api, params, data;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            api = this.baseClient.appHost + \"/api/v2/register/email-code\";\n            params = __assign({\n              email: email,\n              code: code,\n              profile: profile\n            }, options);\n            return [4\n            /*yield*/\n            , this.httpClient.request({\n              method: 'POST',\n              url: api,\n              data: params\n            })];\n\n          case 1:\n            data = _a.sent();\n            return [2\n            /*return*/\n            , data];\n        }\n      });\n    });\n  };\n  /**\n   * @name registerByUsername\n   * @name_zh 使用用户名注册\n   * @description 使用用户名注册\n   *\n   * @param {string} username 用户名\n   * @param {string} password 密码\n   * @param {RegisterProfile} [profile] 用户资料\n   * @param {Object} [options]\n   * @param {boolean} [options.forceLogin] 是否走一遍完整的登录的，会触发登录前后的 pipeline 函数以及登录事件 webhook ，同时该用户的累计登录次数会加 1 。默认为 false 。\n   * @param {boolean} [options.generateToken] 是否为该用户生成 token，不会触发登录后的完整流程，用户的累计登录次数不会加 1。默认为 false 。\n   * @param {string} [options.clientIp] 客户端真实 IP，如果你在服务器端调用此接口，请务必将此参数设置为终端用户的真实 IP。\n   *\n   *\n   * @example\n   *\n   * authenticationClient.registerByUsername(\n   *  'bob',\n   *  'passw0rd',\n   *  {\n   *    nickname: 'Nick'\n   *  },\n   *  {\n   *    generateToken: true\n   *  }\n   * )\n   *\n   * @example\n   * authenticationClient.registerByUsername('bob', 'passw0rd')\n   *\n   *\n   * @returns {Promise<User>}\n   * @memberof AuthenticationClient\n   */\n\n\n  AuthenticationClient.prototype.registerByUsername = function (username, password, profile, options) {\n    return __awaiter(this, void 0, void 0, function () {\n      var _a, forceLogin, _b, generateToken, clientIp, params, context, customData, phoneToken, emailToken, _c, _d, _e, extraParams, extraContext, user;\n\n      return __generator(this, function (_f) {\n        switch (_f.label) {\n          case 0:\n            options = options || {};\n            profile = profile || {};\n            _a = options.forceLogin, forceLogin = _a === void 0 ? false : _a, _b = options.generateToken, generateToken = _b === void 0 ? false : _b, clientIp = options.clientIp, params = options.params, context = options.context, customData = options.customData, phoneToken = options.phoneToken, emailToken = options.emailToken;\n            _d = (_c = this.options).encryptFunction;\n            _e = [password];\n            return [4\n            /*yield*/\n            , this.publicKeyManager.getPublicKey()];\n\n          case 1:\n            return [4\n            /*yield*/\n            , _d.apply(_c, _e.concat([_f.sent(), this.options.encryption]))];\n\n          case 2:\n            password = _f.sent();\n            extraParams = null;\n\n            if (customData) {\n              extraParams = JSON.stringify(convertObjectToKeyValueList(customData));\n            } else if (params) {\n              extraParams = JSON.stringify(params);\n            }\n\n            extraContext = null;\n\n            if (context) {\n              extraContext = JSON.stringify(context);\n            }\n\n            return [4\n            /*yield*/\n            , registerByUsername(this.graphqlClient, this.tokenProvider, {\n              input: {\n                username: username,\n                password: password,\n                profile: profile,\n                forceLogin: forceLogin,\n                generateToken: generateToken,\n                clientIp: clientIp,\n                params: extraParams,\n                context: extraContext,\n                phoneToken: phoneToken,\n                emailToken: emailToken\n              }\n            })];\n\n          case 3:\n            user = _f.sent().registerByUsername;\n            this.setCurrentUser(user);\n            return [2\n            /*return*/\n            , user];\n        }\n      });\n    });\n  };\n  /**\n   * @name registerByPhoneCode\n   * @name_zh 使用手机号注册\n   * @description 使用手机号注册，你可以同时设置该账号的初始密码。发送短信的接口请见 sendSmsCode\n   *\n   * @param {string} phone 手机号\n   * @param {string} code 短信验证码\n   * @param {string} password 初始密码\n   * @param {RegisterProfile} [profile] 用户资料\n   * @param {Object} [options]\n   * @param {boolean} [options.forceLogin] 是否走一遍完整的登录的，会触发登录前后的 pipeline 函数以及登录事件 webhook ，同时该用户的累计登录次数会加 1 。默认为 false 。\n   * @param {boolean} [options.generateToken] 是否为该用户生成 token，不会触发登录后的完整流程，用户的累计登录次数不会加 1。默认为 false 。\n   * @param {string} [options.clientIp] 客户端真实 IP，如果你在服务器端调用此接口，请务必将此参数设置为终端用户的真实 IP。\n   *\n   * @example\n   *\n   * authenticationClient.registerByPhoneCode(\n   *  '176xxxx7041',\n   *  '1234',\n   *  'passw0rd',\n   *  {\n   *    nickname: 'Nick'\n   *  },\n   *  {\n   *    generateToken: true\n   *  }\n   * )\n   *\n   * @example\n   * authenticationClient.registerByPhoneCode('176xxxx7041', '1234')\n   *\n   *\n   * @returns {Promise<User>}\n   * @memberof AuthenticationClient\n   */\n\n\n  AuthenticationClient.prototype.registerByPhoneCode = function (phone, code, password, profile, options) {\n    return __awaiter(this, void 0, void 0, function () {\n      var _a, forceLogin, _b, generateToken, clientIp, params, context, customData, phoneCountryCode, emailToken, _c, _d, _e, extraParams, extraContext, user;\n\n      return __generator(this, function (_f) {\n        switch (_f.label) {\n          case 0:\n            options = options || {};\n            profile = profile || {};\n            _a = options.forceLogin, forceLogin = _a === void 0 ? false : _a, _b = options.generateToken, generateToken = _b === void 0 ? false : _b, clientIp = options.clientIp, params = options.params, context = options.context, customData = options.customData, phoneCountryCode = options.phoneCountryCode, emailToken = options.emailToken;\n            if (!password) return [3\n            /*break*/\n            , 3];\n            _d = (_c = this.options).encryptFunction;\n            _e = [password];\n            return [4\n            /*yield*/\n            , this.publicKeyManager.getPublicKey()];\n\n          case 1:\n            return [4\n            /*yield*/\n            , _d.apply(_c, _e.concat([_f.sent(), this.options.encryption]))];\n\n          case 2:\n            password = _f.sent();\n            _f.label = 3;\n\n          case 3:\n            extraParams = null;\n\n            if (customData) {\n              extraParams = JSON.stringify(convertObjectToKeyValueList(customData));\n            } else if (params) {\n              extraParams = JSON.stringify(params);\n            }\n\n            extraContext = null;\n\n            if (context) {\n              extraContext = JSON.stringify(context);\n            }\n\n            return [4\n            /*yield*/\n            , registerByPhoneCode(this.graphqlClient, this.tokenProvider, {\n              input: {\n                phone: phone,\n                code: code,\n                phoneCountryCode: phoneCountryCode,\n                password: password,\n                profile: profile,\n                forceLogin: forceLogin,\n                generateToken: generateToken,\n                clientIp: clientIp,\n                params: extraParams,\n                context: extraContext,\n                emailToken: emailToken\n              }\n            })];\n\n          case 4:\n            user = _f.sent().registerByPhoneCode;\n            this.setCurrentUser(user);\n            return [2\n            /*return*/\n            , user];\n        }\n      });\n    });\n  };\n  /**\n   * @name checkPasswordStrength\n   * @name_zh 检查密码强度\n   * @description 检查密码强度，详情请见: https://docs.authing.co/v2/guides/security/config-password.html\n   *\n   * @param {string} password\n   * @example\n   * authenticationClient.checkPasswordStrength('weak')\n   *\n   * @example\n   * authenticationClient.checkPasswordStrength('strongPassw0rd!')\n   *\n   * @returns {Promise<CheckPasswordStrengthResult>}\n   * @memberof AuthenticationClient\n   */\n\n\n  AuthenticationClient.prototype.checkPasswordStrength = function (password) {\n    return __awaiter(this, void 0, void 0, function () {\n      var result;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , checkPasswordStrength(this.graphqlClient, this.tokenProvider, {\n              password: password\n            })];\n\n          case 1:\n            result = _a.sent().checkPasswordStrength;\n            return [2\n            /*return*/\n            , result];\n        }\n      });\n    });\n  };\n  /**\n   * @name sendSmsCode\n   * @name_zh 发送短信验证码\n   * @description 发送短信验证码, 短信验证码的有效时间为 60 s。\n   *\n   * @param {string} phone\n   * @example\n   * authenticationClient.sendSmsCode('176xxxx6754')\n   *\n   * @returns {Promise<CommonMessage>}\n   * @memberof AuthenticationClient\n   */\n\n\n  AuthenticationClient.prototype.sendSmsCode = function (phone, phoneCountryCode, scene) {\n    return __awaiter(this, void 0, void 0, function () {\n      var api, params, data;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            api = this.baseClient.appHost + \"/api/v2/sms/send\";\n            params = {\n              phone: phone\n            };\n\n            if (phoneCountryCode) {\n              params.phoneCountryCode = phoneCountryCode;\n            }\n\n            if (scene) {\n              params.scene = scene;\n            }\n\n            return [4\n            /*yield*/\n            , this.httpClient.request({\n              method: 'POST',\n              url: api,\n              data: params\n            })];\n\n          case 1:\n            data = _a.sent();\n            return [2\n            /*return*/\n            , data];\n        }\n      });\n    });\n  };\n  /**\n   * @name loginByEmail\n   * @name_zh 使用邮箱登录\n   * @description 使用邮箱登录，该接口默认不会限制未验证的邮箱进行登录，如果你希望邮箱未验证的用户不能进行登录，可以使用 pipeline 对此类请求进行拦截。\n   *\n   * 如果你的用户池配置了登录失败检测，当同一  IP 下登录多次失败的时候会要求用户输入图形验证码（code 为 2000)。\n   *\n   * @param {string} email 邮箱\n   * @param {string} password 密码\n   * @param {Object} [options]\n   * @param {boolean} [options.autoRegister] 是否自动注册。如果检测到用户不存在，会根据登录账密自动创建一个账号。\n   * @param {string} [options.captchaCode] 图形验证码\n   * @param {string} [options.clientIp] 客户端真实 IP，如果你在服务器端调用此接口，请务必将此参数设置为终端用户的真实 IP。\n   *\n   * @example\n   *\n   * authenticationClient.loginByEmail(\n   *  'test@example.com',\n   *  'passw0rd',\n   *  {\n   *    autoRegister: true，\n   *    captchaCode: 'xj72'\n   *  }\n   * )\n   *\n   * @example\n   * authenticationClient.loginByEmail('test@example.com', 'passw0rd')\n   *\n   *\n   * @returns {Promise<User>}\n   * @memberof AuthenticationClient\n   */\n\n\n  AuthenticationClient.prototype.loginByEmail = function (email, password, options) {\n    return __awaiter(this, void 0, void 0, function () {\n      var _a, autoRegister, captchaCode, clientIp, params, context, customData, _b, _c, _d, extraParams, extraContext, user;\n\n      return __generator(this, function (_e) {\n        switch (_e.label) {\n          case 0:\n            options = options || {};\n            _a = options.autoRegister, autoRegister = _a === void 0 ? false : _a, captchaCode = options.captchaCode, clientIp = options.clientIp, params = options.params, context = options.context, customData = options.customData;\n            _c = (_b = this.options).encryptFunction;\n            _d = [password];\n            return [4\n            /*yield*/\n            , this.publicKeyManager.getPublicKey()];\n\n          case 1:\n            return [4\n            /*yield*/\n            , _c.apply(_b, _d.concat([_e.sent(), this.options.encryption]))];\n\n          case 2:\n            password = _e.sent();\n            extraParams = null;\n\n            if (customData) {\n              extraParams = JSON.stringify(convertObjectToKeyValueList(customData));\n            } else if (params) {\n              extraParams = JSON.stringify(params);\n            }\n\n            extraContext = null;\n\n            if (context) {\n              extraContext = JSON.stringify(context);\n            }\n\n            return [4\n            /*yield*/\n            , loginByEmail(this.graphqlClient, this.tokenProvider, {\n              input: {\n                email: email,\n                password: password,\n                autoRegister: autoRegister,\n                captchaCode: captchaCode,\n                clientIp: clientIp,\n                params: extraParams,\n                context: extraContext\n              }\n            })];\n\n          case 3:\n            user = _e.sent().loginByEmail;\n\n            if (user.customData) {\n              // @ts-ignore\n              user.customData = convertUdvToKeyValuePair(user.customData);\n            }\n\n            this.setCurrentUser(user);\n            return [2\n            /*return*/\n            , user];\n        }\n      });\n    });\n  };\n  /**\n   * @name loginByUsername\n   * @name_zh 使用用户名登录\n   * @description 使用用户名登录。\n   *\n   * 如果你的用户池配置了登录失败检测，当同一  IP 下登录多次失败的时候会要求用户输入图形验证码（code 为 2000)。\n   *\n   * @param {string} username 用户名\n   * @param {string} password 密码\n   * @param {Object} [options]\n   * @param {boolean} [options.autoRegister] 是否自动注册。如果检测到用户不存在，会根据登录账密自动创建一个账号。\n   * @param {string} [options.captchaCode] 图形验证码\n   * @param {string} [options.clientIp] 客户端真实 IP，如果你在服务器端调用此接口，请务必将此参数设置为终端用户的真实 IP。\n   *\n   *\n   * @example\n   *\n   * authenticationClient.loginByEmail(\n   *  'test@example.com',\n   *  'passw0rd',\n   *  {\n   *    autoRegister: true，\n   *    captchaCode: 'xj72'\n   *  }\n   * )\n   *\n   * @example\n   * authenticationClient.loginByEmail('test@example.com', 'passw0rd')\n   *\n   *\n   * @returns {Promise<User>}\n   * @memberof AuthenticationClient\n   */\n\n\n  AuthenticationClient.prototype.loginByUsername = function (username, password, options) {\n    return __awaiter(this, void 0, void 0, function () {\n      var _a, autoRegister, captchaCode, clientIp, params, context, customData, _b, _c, _d, extraParams, extraContext, user;\n\n      return __generator(this, function (_e) {\n        switch (_e.label) {\n          case 0:\n            options = options || {};\n            _a = options.autoRegister, autoRegister = _a === void 0 ? false : _a, captchaCode = options.captchaCode, clientIp = options.clientIp, params = options.params, context = options.context, customData = options.customData;\n            _c = (_b = this.options).encryptFunction;\n            _d = [password];\n            return [4\n            /*yield*/\n            , this.publicKeyManager.getPublicKey()];\n\n          case 1:\n            return [4\n            /*yield*/\n            , _c.apply(_b, _d.concat([_e.sent(), this.options.encryption]))];\n\n          case 2:\n            password = _e.sent();\n            extraParams = null;\n\n            if (customData) {\n              extraParams = JSON.stringify(convertObjectToKeyValueList(customData));\n            } else if (params) {\n              extraParams = JSON.stringify(params);\n            }\n\n            extraContext = null;\n\n            if (context) {\n              extraContext = JSON.stringify(context);\n            }\n\n            return [4\n            /*yield*/\n            , loginByUsername(this.graphqlClient, this.tokenProvider, {\n              input: {\n                username: username,\n                password: password,\n                autoRegister: autoRegister,\n                captchaCode: captchaCode,\n                clientIp: clientIp,\n                params: extraParams,\n                context: extraContext\n              }\n            })];\n\n          case 3:\n            user = _e.sent().loginByUsername;\n\n            if (user.customData) {\n              // @ts-ignore\n              user.customData = convertUdvToKeyValuePair(user.customData);\n            }\n\n            this.setCurrentUser(user);\n            return [2\n            /*return*/\n            , user];\n        }\n      });\n    });\n  };\n  /**\n   * @name loginByPhoneCode\n   * @name_zh 使用手机号验证码登录\n   * @description 使用手机号验证码登录。\n   *\n   *\n   * @param {string} phone 手机号\n   * @param {string} code 短信验证码\n   * @param {string} [options.clientIp] 客户端真实 IP，如果你在服务器端调用此接口，请务必将此参数设置为终端用户的真实 IP。\n   *\n   * @example\n   *\n   * authenticationClient.loginByPhoneCode(\n   *  '176xxxx7041',\n   *  '1234',\n   * )\n   *\n   *\n   * @returns {Promise<User>}\n   * @memberof AuthenticationClient\n   */\n\n\n  AuthenticationClient.prototype.loginByPhoneCode = function (phone, code, options) {\n    return __awaiter(this, void 0, void 0, function () {\n      var clientIp, params, context, customData, phoneCountryCode, extraParams, extraContext, user;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            options = options || {};\n            clientIp = options.clientIp, params = options.params, context = options.context, customData = options.customData, phoneCountryCode = options.phoneCountryCode;\n            extraParams = null;\n\n            if (customData) {\n              extraParams = JSON.stringify(convertObjectToKeyValueList(customData));\n            } else if (params) {\n              extraParams = JSON.stringify(params);\n            }\n\n            extraContext = null;\n\n            if (context) {\n              extraContext = JSON.stringify(context);\n            }\n\n            return [4\n            /*yield*/\n            , loginByPhoneCode(this.graphqlClient, this.tokenProvider, {\n              input: {\n                phone: phone,\n                code: code,\n                phoneCountryCode: phoneCountryCode,\n                clientIp: clientIp,\n                params: extraParams,\n                context: extraContext\n              }\n            })];\n\n          case 1:\n            user = _a.sent().loginByPhoneCode;\n\n            if (user.customData) {\n              // @ts-ignore\n              user.customData = convertUdvToKeyValuePair(user.customData);\n            }\n\n            this.setCurrentUser(user);\n            return [2\n            /*return*/\n            , user];\n        }\n      });\n    });\n  };\n  /**\n   * @name loginByEmailCode\n   * @name_zh 使用邮箱号验证码登录\n   * @description 使用邮箱号验证码登录。\n   *\n   *\n   * @param {string} email 邮箱\n   * @param {string} code 邮箱验证码\n   * @param {string} [options.clientIp] 客户端真实 IP，如果你在服务器端调用此接口，请务必将此参数设置为终端用户的真实 IP。\n   *\n   * @example\n   *\n   * authenticationClient.loginByPhoneCode(\n   *  'sunxxxxx@authing.cn',\n   *  '1234',\n   * )\n   *\n   *\n   * @returns {Promise<User>}\n   * @memberof AuthenticationClient\n   */\n\n\n  AuthenticationClient.prototype.loginByEmailCode = function (email, code, options) {\n    var _a;\n\n    return __awaiter(this, void 0, void 0, function () {\n      var clientIp, params, context, customData, phoneCountryCode, extraParams, extraContext, url, user;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            options = options || {};\n            clientIp = options.clientIp, params = options.params, context = options.context, customData = options.customData, phoneCountryCode = options.phoneCountryCode;\n            extraParams = null;\n\n            if (customData) {\n              extraParams = JSON.stringify(convertObjectToKeyValueList(customData));\n            } else if (params) {\n              extraParams = JSON.stringify(params);\n            }\n\n            extraContext = null;\n\n            if (context) {\n              extraContext = JSON.stringify(context);\n            }\n\n            url = ((_a = this.options.appHost) !== null && _a !== void 0 ? _a : \"\") + \"/api/v2/login/email-code\";\n            return [4\n            /*yield*/\n            , this.httpClient.request({\n              method: 'POST',\n              url: url,\n              data: {\n                email: email,\n                code: code,\n                phoneCountryCode: phoneCountryCode,\n                clientIp: clientIp,\n                params: extraParams,\n                context: extraContext\n              },\n              unSetToken: true\n            })];\n\n          case 1:\n            user = _b.sent();\n\n            if (user.customData) {\n              // @ts-ignore\n              user.customData = convertUdvToKeyValuePair(user.customData);\n            }\n\n            this.setCurrentUser(user);\n            return [2\n            /*return*/\n            , user];\n        }\n      });\n    });\n  };\n  /**\n   * @name loginByPhonePassword\n   * @name_zh 使用手机号密码登录\n   * @description 使用手机号密码登录。\n   *\n   *\n   * @param {string} phone 手机号\n   * @param {string} password 密码\n   * @param {Object} [options]\n   * @param {string} [options.captchaCode] 图形验证码\n   * @param {string} [options.clientIp] 客户端真实 IP，如果你在服务器端调用此接口，请务必将此参数设置为终端用户的真实 IP。\n   *\n   * @example\n   *\n   * authenticationClient.loginByPhonePassword(\n   *  '176xxxx7041',\n   *  'passw0rd',\n   *  {\n   *    captchaCode: 'xj72'\n   *  }\n   * )\n   *\n   * @example\n   * authenticationClient.loginByPhonePassword('176xxxx7041', 'passw0rd')\n   *\n   *\n   * @returns {Promise<User>}\n   * @memberof AuthenticationClient\n   */\n\n\n  AuthenticationClient.prototype.loginByPhonePassword = function (phone, password, options) {\n    return __awaiter(this, void 0, void 0, function () {\n      var captchaCode, _a, autoRegister, clientIp, params, context, customData, _b, _c, _d, extraParams, extraContext, user;\n\n      return __generator(this, function (_e) {\n        switch (_e.label) {\n          case 0:\n            options = options || {};\n            captchaCode = options.captchaCode, _a = options.autoRegister, autoRegister = _a === void 0 ? false : _a, clientIp = options.clientIp, params = options.params, context = options.context, customData = options.customData;\n            _c = (_b = this.options).encryptFunction;\n            _d = [password];\n            return [4\n            /*yield*/\n            , this.publicKeyManager.getPublicKey()];\n\n          case 1:\n            return [4\n            /*yield*/\n            , _c.apply(_b, _d.concat([_e.sent(), this.options.encryption]))];\n\n          case 2:\n            password = _e.sent();\n            extraParams = null;\n\n            if (customData) {\n              extraParams = JSON.stringify(convertObjectToKeyValueList(customData));\n            } else if (params) {\n              extraParams = JSON.stringify(params);\n            }\n\n            extraContext = null;\n\n            if (context) {\n              extraContext = JSON.stringify(context);\n            }\n\n            return [4\n            /*yield*/\n            , loginByPhonePassword(this.graphqlClient, this.tokenProvider, {\n              input: {\n                phone: phone,\n                password: password,\n                captchaCode: captchaCode,\n                autoRegister: autoRegister,\n                clientIp: clientIp,\n                params: extraParams,\n                context: extraContext\n              }\n            })];\n\n          case 3:\n            user = _e.sent().loginByPhonePassword;\n\n            if (user.customData) {\n              // @ts-ignore\n              user.customData = convertUdvToKeyValuePair(user.customData);\n            }\n\n            this.setCurrentUser(user);\n            return [2\n            /*return*/\n            , user];\n        }\n      });\n    });\n  };\n\n  AuthenticationClient.prototype.loginBySubAccount = function (account, password, options) {\n    return __awaiter(this, void 0, void 0, function () {\n      var captchaCode, clientIp, _a, _b, _c, user;\n\n      return __generator(this, function (_d) {\n        switch (_d.label) {\n          case 0:\n            options = options || {};\n            captchaCode = options.captchaCode, clientIp = options.clientIp;\n            _b = (_a = this.options).encryptFunction;\n            _c = [password];\n            return [4\n            /*yield*/\n            , this.publicKeyManager.getPublicKey()];\n\n          case 1:\n            return [4\n            /*yield*/\n            , _b.apply(_a, _c.concat([_d.sent(), this.options.encryption]))];\n\n          case 2:\n            password = _d.sent();\n            return [4\n            /*yield*/\n            , loginBySubAccount(this.graphqlClient, this.tokenProvider, {\n              account: account,\n              password: password,\n              captchaCode: captchaCode,\n              clientIp: clientIp\n            })];\n\n          case 3:\n            user = _d.sent().loginBySubAccount;\n            this.setCurrentUser(user);\n            return [2\n            /*return*/\n            , user];\n        }\n      });\n    });\n  };\n  /**\n   * @name checkLoginStatus\n   * @name_zh 检测 Token 登录状态\n   * @description 检测 Token 登录状态\n   *\n   * @param {string} token 用户的登录凭证 token\n   *\n   * @example\n   *\n   * authenticationClient.checkLoginStatus('TOKEN')\n   *\n   * @returns {Promise<JwtTokenStatus>}\n   * @memberof AuthenticationClient\n   */\n\n\n  AuthenticationClient.prototype.checkLoginStatus = function (token) {\n    return __awaiter(this, void 0, void 0, function () {\n      var res;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , checkLoginStatus(this.graphqlClient, this.tokenProvider, {\n              token: token\n            })];\n\n          case 1:\n            res = _a.sent();\n            return [2\n            /*return*/\n            , res.checkLoginStatus];\n        }\n      });\n    });\n  };\n  /**\n   * @name sendEmail\n   * @name_zh 发送邮件\n   * @description 发送邮件\n   *\n   * @param {string} email 邮箱\n   * @param {EmailScene} scene 发送场景，可选值为 RESET_PASSWORD（发送重置密码邮件，邮件中包含验证码）、VerifyEmail（发送验证邮箱的邮件）、ChangeEmail（发送修改邮箱邮件，邮件中包含验证码）\n   *\n   * @example\n   *\n   * import { EmailScene } from \"authing-js-sdk\"\n   * authenticationClient.sendEmail('test@example.com', EmailScene.RESET_PASSWORD)\n   *\n   * @returns {Promise<CommonMessage>}\n   * @memberof AuthenticationClient\n   */\n\n\n  AuthenticationClient.prototype.sendEmail = function (email, scene) {\n    return __awaiter(this, void 0, void 0, function () {\n      var data;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , sendEmail(this.graphqlClient, this.tokenProvider, {\n              email: email,\n              scene: scene\n            })];\n\n          case 1:\n            data = _a.sent().sendEmail;\n            return [2\n            /*return*/\n            , data];\n        }\n      });\n    });\n  };\n  /**\n   * @name resetPasswordByPhoneCode\n   * @name_zh 通过短信验证码重置密码\n   * @description 通过短信验证码重置密码，你需要先调用 sendSmsCode 接口发送重置密码邮件。\n   *\n   * @param {string} phone 手机号\n   * @param {string} code 验证码\n   * @param {string} newPassword 新的密码\n   *\n   * @example\n   *\n   * authenticationClient.resetPasswordByPhoneCode('176xxxx7041', '1234', 'passw0rd')\n   *\n   * @returns {Promise<CommonMessage>}\n   * @memberof AuthenticationClient\n   */\n\n\n  AuthenticationClient.prototype.resetPasswordByPhoneCode = function (phone, code, newPassword, phoneCountryCode) {\n    return __awaiter(this, void 0, void 0, function () {\n      var _a, _b, _c, data;\n\n      return __generator(this, function (_d) {\n        switch (_d.label) {\n          case 0:\n            _b = (_a = this.options).encryptFunction;\n            _c = [newPassword];\n            return [4\n            /*yield*/\n            , this.publicKeyManager.getPublicKey()];\n\n          case 1:\n            return [4\n            /*yield*/\n            , _b.apply(_a, _c.concat([_d.sent(), this.options.encryption]))];\n\n          case 2:\n            newPassword = _d.sent();\n            return [4\n            /*yield*/\n            , resetPassword(this.graphqlClient, this.tokenProvider, {\n              phone: phone,\n              code: code,\n              newPassword: newPassword,\n              phoneCountryCode: phoneCountryCode\n            })];\n\n          case 3:\n            data = _d.sent().resetPassword;\n            return [2\n            /*return*/\n            , data];\n        }\n      });\n    });\n  };\n  /**\n   * @name resetPasswordByEmailCode\n   * @name_zh 通过邮件验证码重置密码\n   * @description 通过邮件验证码重置密码，你需要先调用 sendEmail 接口发送重置密码邮件。\n   *\n   * @param {string} phone 手机号\n   * @param {string} code 验证码\n   * @param {string} newPassword 新的密码\n   *\n   * @example\n   *\n   * authenticationClient.resetPasswordByEmailCode('test@example.com', '1234', 'passw0rd')\n   *\n   * @returns {Promise<CommonMessage>}\n   * @memberof AuthenticationClient\n   */\n\n\n  AuthenticationClient.prototype.resetPasswordByEmailCode = function (email, code, newPassword) {\n    return __awaiter(this, void 0, void 0, function () {\n      var _a, _b, _c, data;\n\n      return __generator(this, function (_d) {\n        switch (_d.label) {\n          case 0:\n            _b = (_a = this.options).encryptFunction;\n            _c = [newPassword];\n            return [4\n            /*yield*/\n            , this.publicKeyManager.getPublicKey()];\n\n          case 1:\n            return [4\n            /*yield*/\n            , _b.apply(_a, _c.concat([_d.sent(), this.options.encryption]))];\n\n          case 2:\n            newPassword = _d.sent();\n            return [4\n            /*yield*/\n            , resetPassword(this.graphqlClient, this.tokenProvider, {\n              email: email,\n              code: code,\n              newPassword: newPassword\n            })];\n\n          case 3:\n            data = _d.sent().resetPassword;\n            return [2\n            /*return*/\n            , data];\n        }\n      });\n    });\n  };\n\n  AuthenticationClient.prototype.resetPasswordByFirstLoginToken = function (params) {\n    return __awaiter(this, void 0, void 0, function () {\n      var token, password, _a, _b, _c, data;\n\n      return __generator(this, function (_d) {\n        switch (_d.label) {\n          case 0:\n            token = params.token, password = params.password;\n            _b = (_a = this.options).encryptFunction;\n            _c = [password];\n            return [4\n            /*yield*/\n            , this.publicKeyManager.getPublicKey()];\n\n          case 1:\n            return [4\n            /*yield*/\n            , _b.apply(_a, _c.concat([_d.sent(), this.options.encryption]))];\n\n          case 2:\n            password = _d.sent();\n            return [4\n            /*yield*/\n            , resetPasswordByFirstLoginToken(this.graphqlClient, this.tokenProvider, {\n              token: token,\n              password: password\n            })];\n\n          case 3:\n            data = _d.sent().resetPasswordByFirstLoginToken;\n            return [2\n            /*return*/\n            , data];\n        }\n      });\n    });\n  };\n\n  AuthenticationClient.prototype.resetPasswordByForceResetToken = function (params) {\n    return __awaiter(this, void 0, void 0, function () {\n      var token, newPassword, oldPassword, _a, _b, _c, _d, _e, _f, data;\n\n      return __generator(this, function (_g) {\n        switch (_g.label) {\n          case 0:\n            token = params.token, newPassword = params.newPassword, oldPassword = params.oldPassword;\n            _b = (_a = this.options).encryptFunction;\n            _c = [newPassword];\n            return [4\n            /*yield*/\n            , this.publicKeyManager.getPublicKey()];\n\n          case 1:\n            return [4\n            /*yield*/\n            , _b.apply(_a, _c.concat([_g.sent(), this.options.encryption]))];\n\n          case 2:\n            newPassword = _g.sent();\n            _e = (_d = this.options).encryptFunction;\n            _f = [oldPassword];\n            return [4\n            /*yield*/\n            , this.publicKeyManager.getPublicKey()];\n\n          case 3:\n            return [4\n            /*yield*/\n            , _e.apply(_d, _f.concat([_g.sent(), this.options.encryption]))];\n\n          case 4:\n            oldPassword = _g.sent();\n            return [4\n            /*yield*/\n            , resetPasswordByForceResetToken(this.graphqlClient, this.tokenProvider, {\n              token: token,\n              oldPassword: oldPassword,\n              newPassword: newPassword\n            })];\n\n          case 5:\n            data = _g.sent().resetPasswordByForceResetToken;\n            return [2\n            /*return*/\n            , data];\n        }\n      });\n    });\n  };\n  /**\n   * @name updateProfile\n   * @name_zh 修改用户资料\n   * @description 修改用户资料，此接口不能用于修改手机号、邮箱、密码，如果需要请调用 updatePhone、updateEmail、updatePassword 接口。\n   *\n   * @param {UpdateUserInput} updates 修改的用户资料\n   * @param {string} updates.username 用户名\n   * @param {string} updates.nickname 昵称\n   * @param {string} updates.photo 头像\n   * @param {string} updates.company 公司\n   * @param {string} updates.browser 浏览器\n   * @param {string} updates.device 设备\n   * @param {string} updates.lastIP 最近登录的 IP\n   * @param {string} updates.name Name\n   * @param {string} updates.givenName Given Name\n   * @param {string} updates.familyName Family Name\n   * @param {string} updates.middleName Middle Name\n   * @param {string} updates.profile Profile Url\n   * @param {string} updates.preferredUsername Preferred Name\n   * @param {string} updates.website 个人网站\n   * @param {string} updates.gender 性别, F 表示男性、W 表示女性、未知表示 U\n   * @param {string} updates.birthdate 生日\n   * @param {string} updates.zoneinfo 时区\n   * @param {string} updates.locale 语言\n   * @param {string} updates.address 地址\n   * @param {string} updates.streetAddress 街道地址\n   * @param {string} updates.locality\n   * @param {string} updates.region 地域\n   * @param {string} updates.postalCode 邮编\n   * @param {string} updates.city 城市\n   * @param {string} updates.province 省份\n   * @param {string} updates.country 国家\n   *\n   * @example\n   *\n   * authenticationClient.updateProfile({\n   *  nickname: \"Nick\",\n   *  lastIp: \"111.111.111.111\"\n   * })\n   *\n   * @returns {Promise<User>}\n   * @memberof AuthenticationClient\n   */\n\n\n  AuthenticationClient.prototype.updateProfile = function (updates, options) {\n    return __awaiter(this, void 0, void 0, function () {\n      var userId, _a, emailToken, phoneToken, updated;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            userId = this.checkLoggedIn();\n            _a = options || {}, emailToken = _a.emailToken, phoneToken = _a.phoneToken;\n\n            if (updates && updates.password) {\n              delete updates.password;\n            }\n\n            return [4\n            /*yield*/\n            , updateUser(this.graphqlClient, this.tokenProvider, {\n              id: userId,\n              input: updates,\n              emailToken: emailToken,\n              phoneToken: phoneToken\n            })];\n\n          case 1:\n            updated = _b.sent().updateUser;\n            this.setCurrentUser(updated);\n            return [2\n            /*return*/\n            , updated];\n        }\n      });\n    });\n  };\n  /**\n   * @name updatePassword\n   * @name_zh 更新用户密码\n   * @description 更新用户密码\n   *\n   * @param {string} newPassword 新密码\n   * @param {string} [oldPassword] 旧密码，如果用户没有设置密码，可以不填。\n   *\n   * @example\n   *\n   * authenticationClient.updatePassword('passw0rd') // 由手机号、社会化登录等其他方式注册的，首次没有设置密码，oldPassword 留空。\n   *\n   * @example\n   *\n   * authenticationClient.updatePassword('passw0rd', 'oldPassw0rd') // 用户之前设置了密码\n   *\n   * @returns {Promise<User>}\n   * @memberof AuthenticationClient\n   */\n\n\n  AuthenticationClient.prototype.updatePassword = function (newPassword, oldPassword) {\n    return __awaiter(this, void 0, void 0, function () {\n      var _a, _b, _c, _d, _e, _f, _g, _h, user;\n\n      return __generator(this, function (_j) {\n        switch (_j.label) {\n          case 0:\n            _a = newPassword;\n            if (!_a) return [3\n            /*break*/\n            , 3];\n            _c = (_b = this.options).encryptFunction;\n            _d = [newPassword];\n            return [4\n            /*yield*/\n            , this.publicKeyManager.getPublicKey()];\n\n          case 1:\n            return [4\n            /*yield*/\n            , _c.apply(_b, _d.concat([_j.sent(), this.options.encryption]))];\n\n          case 2:\n            _a = _j.sent();\n            _j.label = 3;\n\n          case 3:\n            newPassword = _a;\n            _e = oldPassword;\n            if (!_e) return [3\n            /*break*/\n            , 6];\n            _g = (_f = this.options).encryptFunction;\n            _h = [oldPassword];\n            return [4\n            /*yield*/\n            , this.publicKeyManager.getPublicKey()];\n\n          case 4:\n            return [4\n            /*yield*/\n            , _g.apply(_f, _h.concat([_j.sent(), this.options.encryption]))];\n\n          case 5:\n            _e = _j.sent();\n            _j.label = 6;\n\n          case 6:\n            oldPassword = _e;\n            return [4\n            /*yield*/\n            , updatePassword(this.graphqlClient, this.tokenProvider, {\n              newPassword: newPassword,\n              oldPassword: oldPassword\n            })];\n\n          case 7:\n            user = _j.sent().updatePassword;\n            return [2\n            /*return*/\n            , user];\n        }\n      });\n    });\n  };\n  /**\n   * @name updatePhone\n   * @name_zh 更新用户手机号\n   * @description 更新用户手机号。和修改邮箱一样，默认情况下，如果用户当前已经绑定了手机号，需要同时验证原有手机号（目前账号绑定的手机号）和当前邮箱（将要绑定的手机号）。\n   * 也就是说，用户 A 当前绑定的手机号为 15888888888，想修改为 15899999999，那么就需要同时验证这两个手机号。\n   * 开发者也可以选择不开启 “验证原有手机号“ ，可以在 Authing 控制台 的 设置目录下的安全信息模块进行关闭。\n   * 用户首次绑定手机号请使用 bindPhone 接口。\n   *\n   * @param {string} phone 新手机号\n   * @param {string} phoneCode 新手机号的验证码\n   * @param {string} [oldPhone] 旧手机号\n   * @param {string} [oldPhoneCode] 旧手机号的验证码\n   *\n   * @example\n   *\n   * authenticationClient.updatePhone('176xxxx7041', '1234') // 关闭了“验证原有手机号“选项\n   *\n   * @example\n   *\n   * authenticationClient.updatePhone('176xxxx7041', '1234', '156xxxx9876', '1234') // 开启了“验证原有手机号“选项\n   *\n   *\n   * @returns {Promise<User>}\n   * @memberof AuthenticationClient\n   */\n\n\n  AuthenticationClient.prototype.updatePhone = function (phone, phoneCode, oldPhone, oldPhoneCode, phoneCountryCode, oldPhoneCountryCode) {\n    return __awaiter(this, void 0, void 0, function () {\n      var user;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , updatePhone(this.graphqlClient, this.tokenProvider, {\n              phone: phone,\n              phoneCode: phoneCode,\n              oldPhone: oldPhone,\n              oldPhoneCode: oldPhoneCode,\n              phoneCountryCode: phoneCountryCode,\n              oldPhoneCountryCode: oldPhoneCountryCode\n            })];\n\n          case 1:\n            user = _a.sent().updatePhone;\n            return [2\n            /*return*/\n            , user];\n        }\n      });\n    });\n  };\n  /**\n   * @name updateEmail\n   * @name_zh 更新用户邮箱\n   * @description 如果用户已经绑定了邮箱，默认情况下，需要同时验证原有邮箱（目前账号绑定的邮箱）和当前邮箱（将要绑定的邮箱）。也就是说，用户 A 当前绑定的邮箱为 123456@qq.com，想修改为 1234567@qq.com，那么就需要同时验证这两个邮箱。\n   * 开发者也可以选择不开启 “验证原有邮箱“ ，可以在 Authing 控制台 的 设置目录下的安全信息模块进行关闭。\n   * 用户首次绑定手机号请使用 bindEmail 接口。\n   *\n   * @param {string} email 新邮箱\n   * @param {string} emailCode 新邮箱的验证码\n   * @param {string} [oldEmail] 旧邮箱\n   * @param {string} [oldEmailCode] 旧邮箱的验证码\n   *\n   * @example\n   *\n   * authenticationClient.updateEmail('test@example.com', '1234') // 关闭了“验证原有邮箱“选项\n   *\n   * @example\n   *\n   * authenticationClient.updateEmail('test@example.com', '1234', 'test2@example.com', '1234') // 开启了“验证原有邮箱“选项\n   *\n   *\n   * @returns {Promise<User>}\n   * @memberof AuthenticationClient\n   */\n\n\n  AuthenticationClient.prototype.updateEmail = function (email, emailCode, oldEmail, oldEmailCode) {\n    return __awaiter(this, void 0, void 0, function () {\n      var user;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , updateEmail(this.graphqlClient, this.tokenProvider, {\n              email: email,\n              emailCode: emailCode,\n              oldEmail: oldEmail,\n              oldEmailCode: oldEmailCode\n            })];\n\n          case 1:\n            user = _a.sent().updateEmail;\n            return [2\n            /*return*/\n            , user];\n        }\n      });\n    });\n  };\n  /**\n   * @name refreshToken\n   * @name_zh 刷新当前用户的 token\n   * @description 刷新当前用户的 token，调用此接口要求先登录。\n   *\n   * @example\n   *\n   * authenticationClient.updateEmail()\n   *\n   * @returns {Promise<RefreshToken>}\n   * @memberof AuthenticationClient\n   */\n\n\n  AuthenticationClient.prototype.refreshToken = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var data;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , refreshToken(this.graphqlClient, this.tokenProvider, {})];\n\n          case 1:\n            data = _a.sent().refreshToken;\n            this.setToken(data.token);\n            return [2\n            /*return*/\n            , data];\n        }\n      });\n    });\n  };\n  /**\n   * @name linkAccount\n   * @name_zh 关联账号\n   * @description 将社交账号绑定到主账号（手机号、邮箱账号）。\n   *\n   * @param {Object} options\n   * @param {string} options.primaryUserToken 主账号 Token\n   * @param {string} options.secondaryUserToken 社交账号 Token\n   *\n   * @example\n   *\n   * authenticationClient.linkAccount({ primaryUserToken: '', secondaryUserToken: '' })\n   *\n   * @returns {{code: 200, message: \"绑定成功\"}}\n   * @memberof AuthenticationClient\n   */\n\n\n  AuthenticationClient.prototype.linkAccount = function (options) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.httpClient.request({\n              method: 'POST',\n              url: this.baseClient.appHost + \"/api/v2/users/link\",\n              data: {\n                primaryUserToken: options.primaryUserToken,\n                secondaryUserToken: options.secondaryUserToken\n              }\n            })];\n\n          case 1:\n            _a.sent();\n\n            return [2\n            /*return*/\n            , {\n              code: 200,\n              message: '绑定成功'\n            }];\n        }\n      });\n    });\n  };\n  /**\n   * @name unLinkAccount\n   * @name_zh 解除账号绑定\n   * @description 将社交账号从主账号（手机号、邮箱账号）解绑。\n   *\n   * @param {Object} options\n   * @param {string} options.primaryUserToken 主账号 Token\n   * @param {string} options.provider 社交账号的提供商名称\n   *\n   * @example\n   *\n   * authenticationClient.unLinkAccount({ primaryUserToken: '', provider: 'wechat:pc' })\n   *\n   * @returns {{code: 200, message: \"解绑成功\"}}\n   * @memberof AuthenticationClient\n   */\n\n\n  AuthenticationClient.prototype.unLinkAccount = function (options) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.httpClient.request({\n              method: 'POST',\n              url: this.baseClient.appHost + \"/api/v2/users/unlink\",\n              data: {\n                primaryUserToken: options.primaryUserToken,\n                provider: options.provider\n              }\n            })];\n\n          case 1:\n            _a.sent();\n\n            return [2\n            /*return*/\n            , {\n              code: 200,\n              message: '解绑成功'\n            }];\n        }\n      });\n    });\n  };\n  /**\n   * @name bindPhone\n   * @name_zh 绑定手机号\n   * @description 用户初次绑定手机号，如果需要修改手机号请使用 updatePhone 接口。\n   *\n   * @param {string} phone\n   * @param {string} phoneCode\n   *\n   * @example\n   *\n   * authenticationClient.bindPhone('176xxxx7041', '1234')\n   *\n   * @returns {Promise<User>}\n   * @memberof AuthenticationClient\n   */\n\n\n  AuthenticationClient.prototype.bindPhone = function (phone, phoneCode, phoneCountryCode) {\n    return __awaiter(this, void 0, void 0, function () {\n      var user;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , bindPhone(this.graphqlClient, this.tokenProvider, {\n              phone: phone,\n              phoneCode: phoneCode,\n              phoneCountryCode: phoneCountryCode\n            })];\n\n          case 1:\n            user = _a.sent().bindPhone;\n            this.setCurrentUser(user);\n            return [2\n            /*return*/\n            , user];\n        }\n      });\n    });\n  };\n  /**\n   * @name unbindPhone\n   * @name_zh 解绑手机号\n   * @description 用户解绑手机号\n   *\n   * @example\n   *\n   * authenticationClient.unbindPhone()\n   *\n   * @returns {Promise<User>}\n   * @memberof AuthenticationClient\n   */\n\n\n  AuthenticationClient.prototype.unbindPhone = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var user;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , unbindPhone(this.graphqlClient, this.tokenProvider, {})];\n\n          case 1:\n            user = _a.sent().unbindPhone;\n            this.setCurrentUser(user);\n            return [2\n            /*return*/\n            , user];\n        }\n      });\n    });\n  };\n  /**\n   * @name bindEmail\n   * @name_zh 绑定邮箱号\n   * @description 用户邮箱号\n   *\n   * @param {string} email\n   * @param {string} emailCode\n   *\n   * @example\n   *\n   * authenticationClient.bindEmail('test@example.com', '1234')\n   *\n   * @returns {Promise<User>}\n   * @memberof AuthenticationClient\n   */\n\n\n  AuthenticationClient.prototype.bindEmail = function (email, emailCode) {\n    return __awaiter(this, void 0, void 0, function () {\n      var user;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , bindEmail(this.graphqlClient, this.tokenProvider, {\n              email: email,\n              emailCode: emailCode\n            })];\n\n          case 1:\n            user = _a.sent().bindEmail;\n            this.setCurrentUser(user);\n            return [2\n            /*return*/\n            , user];\n        }\n      });\n    });\n  };\n  /**\n   * @name unbindEmail\n   * @name_zh 解绑邮箱号\n   * @description 用户解绑邮箱号\n   *\n   * @example\n   *\n   * authenticationClient.unbindPhone()\n   *\n   * @returns {Promise<User>}\n   * @memberof AuthenticationClient\n   */\n\n\n  AuthenticationClient.prototype.unbindEmail = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var user;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , unbindEmail(this.graphqlClient, this.tokenProvider, {})];\n\n          case 1:\n            user = _a.sent().unbindEmail;\n            this.setCurrentUser(user);\n            return [2\n            /*return*/\n            , user];\n        }\n      });\n    });\n  };\n  /**\n   * @name getCurrentUser\n   * @name_zh 获取当前登录的用户信息\n   * @description 获取当前登录的用户信息\n   *\n   * @example\n   *\n   * authenticationClient.getCurrentUser()\n   *\n   * @returns {Promise<User>}\n   * @memberof AuthenticationClient\n   */\n\n\n  AuthenticationClient.prototype.getCurrentUser = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var data, _a;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            _b.trys.push([0, 2,, 3]);\n\n            return [4\n            /*yield*/\n            , user(this.graphqlClient, this.tokenProvider, {})];\n\n          case 1:\n            data = _b.sent().user;\n\n            if (data.customData) {\n              // @ts-ignore\n              data.customData = convertUdvToKeyValuePair(data.customData);\n            }\n\n            this.setCurrentUser(data);\n            return [2\n            /*return*/\n            , data];\n\n          case 2:\n            _a = _b.sent();\n            return [2\n            /*return*/\n            , null];\n\n          case 3:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * @name logout\n   * @name_zh 退出登录\n   * @description 退出登录，清空 localStorage 里的 user 和 token\n   *\n   * @example\n   *\n   * authenticationClient.logout()\n   *\n   * @returns {null}\n   * @memberof AuthenticationClient\n   */\n\n\n  AuthenticationClient.prototype.logout = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.httpClient.request({\n              method: 'GET',\n              url: this.baseClient.appHost + \"/api/v2/logout?app_id=\" + this.options.appId,\n              withCredentials: true\n            })];\n\n          case 1:\n            _a.sent();\n\n            this.tokenProvider.clearUser();\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * @name listUdv\n   * @name_zh 获取当前用户的自定义数据列表\n   * @description 获取当前用户的自定义数据列表\n   * @deprecated use getUdfValue instead\n   *\n   * @example\n   *\n   * authenticationClient.listUdv()\n   *\n   * @returns {Promise<Array<UserDefinedData>>}\n   * @memberof AuthenticationClient\n   */\n\n\n  AuthenticationClient.prototype.listUdv = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var userId, list;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            userId = this.checkLoggedIn();\n            return [4\n            /*yield*/\n            , udv(this.graphqlClient, this.tokenProvider, {\n              targetType: UdfTargetType.User,\n              targetId: userId\n            })];\n\n          case 1:\n            list = _a.sent().udv;\n            return [2\n            /*return*/\n            , convertUdv(list)];\n        }\n      });\n    });\n  };\n  /**\n   * @name setUdv\n   * @name_zh 添加自定义数据\n   * @description 添加自定义数据\n   *\n   * @param {string} key 自定义字段的 key\n   * @param {any} value 自定义数据的值，值的类型必须要和用户池定义的自定义字段类型一致。\n   *\n   * @example\n   *\n   * authenticationClient.setUdv('school', '清华大学') // 要求用户必须定义了 school 这个字段。\n   *\n   * @returns {Promise<Array<UserDefinedData>>}\n   * @memberof AuthenticationClient\n   */\n\n\n  AuthenticationClient.prototype.setUdv = function (key, value) {\n    return __awaiter(this, void 0, void 0, function () {\n      var userId, list;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            userId = this.checkLoggedIn();\n            value = JSON.stringify(value);\n            return [4\n            /*yield*/\n            , setUdv(this.graphqlClient, this.tokenProvider, {\n              targetType: UdfTargetType.User,\n              targetId: userId,\n              key: key,\n              value: value\n            })];\n\n          case 1:\n            list = _a.sent().setUdv;\n            return [2\n            /*return*/\n            , convertUdv(list)];\n        }\n      });\n    });\n  };\n  /**\n   * @name removeUdv\n   * @name_zh 删除自定义数据\n   * @description 删除自定义数据\n   *\n   * @param key 自定义字段的 key\n   *\n   * @example\n   *\n   * authenticationClient.removeUdv('school')\n   *\n   *\n   * @returns {Promise<Array<UserDefinedData>>}\n   * @memberof AuthenticationClient\n   */\n\n\n  AuthenticationClient.prototype.removeUdv = function (key) {\n    return __awaiter(this, void 0, void 0, function () {\n      var userId, list;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            userId = this.checkLoggedIn();\n            return [4\n            /*yield*/\n            , removeUdv(this.graphqlClient, this.tokenProvider, {\n              targetType: UdfTargetType.User,\n              targetId: userId,\n              key: key\n            })];\n\n          case 1:\n            list = _a.sent().removeUdv;\n            return [2\n            /*return*/\n            , convertUdv(list)];\n        }\n      });\n    });\n  };\n  /**\n   * @name listOrg\n   * @name_zh 获取用户所在组织机构\n   * @description 获取用户所在的组织机构立碑，以及他所属的节点在此组织机构内的完整路径。\n   *\n   * @example\n   *\n   * const data = await authenticationClient.listOrgs();\n   *\n   * @returns {Promise<UserOrgList>}\n   *\n   * @memberof AuthenticationClient\n   */\n\n\n  AuthenticationClient.prototype.listOrgs = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.httpClient.request({\n              method: 'GET',\n              url: this.baseClient.appHost + \"/api/v2/users/me/orgs\"\n            })];\n\n          case 1:\n            return [2\n            /*return*/\n            , _a.sent()];\n        }\n      });\n    });\n  };\n  /**\n   * @description 获取用户\n   *\n   */\n\n\n  AuthenticationClient.prototype.listDepartments = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var userId, departments;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            userId = this.checkLoggedIn();\n            return [4\n            /*yield*/\n            , getUserDepartments(this.graphqlClient, this.tokenProvider, {\n              id: userId\n            })];\n\n          case 1:\n            departments = _a.sent().user.departments;\n            return [2\n            /*return*/\n            , departments];\n        }\n      });\n    });\n  };\n  /**\n   * @name loginByLdap\n   * @name_zh 使用 LDAP 用户名登录\n   * @description 使用 LDAP 用户名登录。\n   *\n   * 如果你的用户池配置了登录失败检测，当同一  IP 下登录多次失败的时候会要求用户输入图形验证码（code 为 2000)。\n   *\n   * @param {string} username 用户名\n   * @param {string} password 密码\n   * @param {Object} [options]\n   * @param {boolean} [options.autoRegister] 是否自动注册。如果检测到用户不存在，会根据登录账密自动创建一个账号。\n   * @param {string} [options.captchaCode] 图形验证码\n   * @param {string} [options.clientIp] 客户端真实 IP，如果你在服务器端调用此接口，请务必将此参数设置为终端用户的真实 IP。\n   *\n   *\n   * @example\n   * const authenticationClient = new AuthenticationClient({\n   *   appId: '应用 ID'\n   * })\n   *\n   * authenticationClient.loginByLdap(\n   *  'admin',\n   *  'admin',\n   * )\n   *\n   *\n   * @returns {Promise<User>}\n   * @memberof AuthenticationClient\n   */\n\n\n  AuthenticationClient.prototype.loginByLdap = function (username, password, options) {\n    return __awaiter(this, void 0, void 0, function () {\n      var clientIp, withCustomData, api, user;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            options = options || {};\n            clientIp = options.clientIp, withCustomData = options.withCustomData;\n            api = this.baseClient.appHost + \"/api/v2/ldap/verify-user\";\n            return [4\n            /*yield*/\n            , this.httpClient.request({\n              method: 'POST',\n              url: api,\n              data: {\n                username: username,\n                password: password,\n                clientIp: clientIp,\n                withCustomData: withCustomData\n              }\n            })];\n\n          case 1:\n            user = _a.sent();\n            this.setCurrentUser(user);\n            return [2\n            /*return*/\n            , user];\n        }\n      });\n    });\n  };\n  /**\n   * @name loginByAd\n   * @name_zh 使用 AD 用户名登录\n   * @description 使用 AD 用户名登录。\n   *\n   * @param {string} username 用户名\n   * @param {string} password 密码\n   *\n   *\n   * @example\n   * const authenticationClient = new AuthenticationClient({\n   *   appId: '应用 ID'\n   * })\n   *\n   * authenticationClient.loginByAd(\n   *  'admin',\n   *  'admin',\n   * )\n   *\n   * @returns {Promise<User>}\n   * @memberof AuthenticationClient\n   */\n\n\n  AuthenticationClient.prototype.loginByAd = function (username, password, options) {\n    return __awaiter(this, void 0, void 0, function () {\n      var clientIp, withCustomData, firstLevelDomain, websocketHost, api, user;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            options = options || {};\n            clientIp = options.clientIp, withCustomData = options.withCustomData;\n            firstLevelDomain = new URL(this.baseClient.appHost).hostname.split('.').slice(1).join('.');\n            websocketHost = this.options.websocketHost || \"https://ws.\" + firstLevelDomain;\n            api = websocketHost + \"/api/v2/ad/verify-user\";\n            return [4\n            /*yield*/\n            , this.httpClient.request({\n              method: 'POST',\n              url: api,\n              data: {\n                username: username,\n                password: password,\n                clientIp: clientIp,\n                withCustomData: withCustomData\n              }\n            })];\n\n          case 1:\n            user = _a.sent();\n            this.setCurrentUser(user);\n            return [2\n            /*return*/\n            , user];\n        }\n      });\n    });\n  };\n  /**\n   * @description 上传图片\n   */\n\n\n  AuthenticationClient.prototype.uploadPhoto = function (accept, cb) {\n    accept = accept || 'image/*';\n    var authing = this;\n    uploadFile({\n      accept: accept,\n      url: this.baseClient.appHost + \"/api/v2/upload?folder=avatar\"\n    }).then(function (_a) {\n      var url = _a.url;\n      return cb(url);\n    }).catch(function (_a) {\n      var code = _a.code,\n          message = _a.message;\n      return authing.options.onError(code, message);\n    });\n  };\n  /**\n   * @deprecated use uploadAvatar instead\n   * @description 更新用户头像\n   */\n\n\n  AuthenticationClient.prototype.updateAvatar = function (options) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.uploadAvatar(options)];\n\n          case 1:\n            return [2\n            /*return*/\n            , _a.sent()];\n        }\n      });\n    });\n  };\n  /**\n   * @description 一键上传图片并更新用户头像\n   *\n   * @param {Object} options\n   * @param {string} options.accept 支持的图片格式，默认为 'image/*'\n   *\n   * @example\n   * const authenticationClient = new AuthenticationClient({\n   *   appId: 'APP_ID',\n   *   appHost: 'https://xxx.authing.cn'\n   * })\n   *\n   * // 会自动打开浏览器文件上传框，并自动完成图片文件上传 CDN、修改用户头像操作。\n   * authenticationClient.uploadAvatar()\n   *\n   * // 只支持 png 格式图片\n   * authenticationClient.uploadAvatar({\n   *   accept: '.png'\n   * })\n   *\n   * @returns\n   */\n\n\n  AuthenticationClient.prototype.uploadAvatar = function (options) {\n    return __awaiter(this, void 0, void 0, function () {\n      var accept, task, src, user;\n\n      var _this = this;\n\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            accept = (options || {}).accept;\n            this.checkLoggedIn();\n            task = new Promise(function (resolve) {\n              _this.uploadPhoto(accept, function (src) {\n                resolve(src);\n              });\n            });\n            return [4\n            /*yield*/\n            , task];\n\n          case 1:\n            src = _a.sent();\n            return [4\n            /*yield*/\n            , this.updateProfile({\n              photo: src\n            })];\n\n          case 2:\n            user = _a.sent();\n            this.setCurrentUser(user);\n            return [2\n            /*return*/\n            , user];\n        }\n      });\n    });\n  };\n  /**\n   * @description 获取当前用户的所有自定义数据\n   *\n   */\n\n\n  AuthenticationClient.prototype.getUdfValue = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var userId, list;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            userId = this.checkLoggedIn();\n            return [4\n            /*yield*/\n            , udv(this.graphqlClient, this.tokenProvider, {\n              targetType: UdfTargetType.User,\n              targetId: userId\n            })];\n\n          case 1:\n            list = _a.sent().udv;\n            return [2\n            /*return*/\n            , convertUdvToKeyValuePair(list)];\n        }\n      });\n    });\n  };\n  /**\n   * @description 设置自定义字段值\n   *\n   */\n\n\n  AuthenticationClient.prototype.setUdfValue = function (data) {\n    return __awaiter(this, void 0, void 0, function () {\n      var userId, result;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (Object.keys(data).length === 0) {\n              throw new Error('empty udf value list');\n            }\n\n            userId = this.checkLoggedIn();\n            return [4\n            /*yield*/\n            , setUdvBatch(this.graphqlClient, this.tokenProvider, {\n              targetType: UdfTargetType.User,\n              targetId: userId,\n              udvList: Object.keys(data).map(function (key) {\n                return {\n                  key: key,\n                  value: JSON.stringify(data[key])\n                };\n              })\n            })];\n\n          case 1:\n            result = _a.sent().setUdvBatch;\n            return [2\n            /*return*/\n            , result];\n        }\n      });\n    });\n  };\n  /**\n   * @description 删除用户自定义数据\n   */\n\n\n  AuthenticationClient.prototype.removeUdfValue = function (key) {\n    return __awaiter(this, void 0, void 0, function () {\n      var userId;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            userId = this.checkLoggedIn();\n            return [4\n            /*yield*/\n            , removeUdv(this.graphqlClient, this.tokenProvider, {\n              targetType: UdfTargetType.User,\n              targetId: userId,\n              key: key\n            })];\n\n          case 1:\n            _a.sent();\n\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * @name getSecurityLevel\n   * @name_zh 用户安全等级\n   * @description 获取用户的安全等级评分\n   *\n   * @example\n   *\n   * const data = await authenticationClient.getSecurityLevel();\n   *\n   * @returns {Promise<SecurityLevel>}\n   *\n   * @memberof AuthenticationClient\n   */\n\n\n  AuthenticationClient.prototype.getSecurityLevel = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.httpClient.request({\n              method: 'GET',\n              url: this.baseClient.appHost + \"/api/v2/users/me/security-level\"\n            })];\n\n          case 1:\n            return [2\n            /*return*/\n            , _a.sent()];\n        }\n      });\n    });\n  };\n  /**\n   * @description 获取用户被授权的所有资源\n   *\n   * @param userId\n   * @param namespace\n   */\n\n\n  AuthenticationClient.prototype.listAuthorizedResources = function (namespace, options) {\n    return __awaiter(this, void 0, void 0, function () {\n      var userId, resourceType, user, _a, list, totalCount;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            userId = this.checkLoggedIn();\n            resourceType = (options || {}).resourceType;\n            return [4\n            /*yield*/\n            , listUserAuthorizedResources(this.graphqlClient, this.tokenProvider, {\n              id: userId,\n              namespace: namespace,\n              resourceType: resourceType\n            })];\n\n          case 1:\n            user = _b.sent().user;\n\n            if (!user) {\n              throw new Error('用户不存在');\n            }\n\n            _a = user.authorizedResources, list = _a.list, totalCount = _a.totalCount;\n            list = formatAuthorizedResources(list);\n            return [2\n            /*return*/\n            , {\n              list: list,\n              totalCount: totalCount\n            }];\n        }\n      });\n    });\n  };\n  /**\n   * @description 检查用户是否存在\n   */\n\n\n  AuthenticationClient.prototype.isUserExists = function (options) {\n    return __awaiter(this, void 0, void 0, function () {\n      var username, email, phone, externalId, data;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            username = options.username, email = options.email, phone = options.phone, externalId = options.externalId;\n            return [4\n            /*yield*/\n            , isUserExists(this.graphqlClient, this.tokenProvider, {\n              username: username,\n              email: email,\n              phone: phone,\n              externalId: externalId\n            })];\n\n          case 1:\n            data = _a.sent().isUserExists;\n            return [2\n            /*return*/\n            , data];\n        }\n      });\n    });\n  };\n  /**\n   * @name computedPasswordSecurityLevel\n   * @name_zh 计算密码安全等级\n   * @description 计算密码安全等级\n   *\n   * @example\n   *\n   * const data = authenticationClient.computedPasswordSecurityLevel('xxxxxxxx');\n   *\n   * @returns {PasswordSecurityLevel}\n   *\n   * @memberof AuthenticationClient\n   */\n\n\n  AuthenticationClient.prototype.computedPasswordSecurityLevel = function (password) {\n    if (typeof password !== 'string') {\n      throw 'password must be a `string`';\n    }\n\n    var highLevel = new RegExp(/^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)[^]{12,}$/g);\n    var middleLevel = new RegExp(/^(?=.*[a-zA-Z])(?=.*\\d)[^]{8,}$/g);\n\n    if (password.match(highLevel) !== null) {\n      return PasswordSecurityLevel.HIGH;\n    }\n\n    if (password.match(middleLevel) !== null) {\n      return PasswordSecurityLevel.MIDDLE;\n    }\n\n    return PasswordSecurityLevel.LOW;\n  };\n\n  AuthenticationClient.prototype._generateTokenRequest = function (params) {\n    var ret = {}; // 删掉所有 undefined 的 kv\n\n    Object.keys(params).map(function (key) {\n      if (typeof params[key] !== 'undefined') {\n        ret[key] = params[key];\n      }\n    });\n    var p = new URLSearchParams(ret);\n    return p.toString();\n  };\n\n  AuthenticationClient.prototype._generateBasicAuthToken = function (appId, secret) {\n    var id = appId || this.options.appId;\n    var s = secret || this.options.secret;\n    var token = 'Basic ' + Buffer.from(id + ':' + s).toString('base64');\n    return token;\n  };\n  /**\n   * @param {string} code 授权码 code\n   * @param {string} codeVerifier 校验码 codeVerifier\n   */\n\n\n  AuthenticationClient.prototype._getAccessTokenByCodeWithClientSecretPost = function (code, codeVerifier) {\n    return __awaiter(this, void 0, void 0, function () {\n      var qstr, api, tokenSet;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            qstr = this._generateTokenRequest({\n              client_id: this.options.appId,\n              client_secret: this.options.secret,\n              grant_type: 'authorization_code',\n              code: code,\n              redirect_uri: this.options.redirectUri,\n              code_verifier: codeVerifier\n            });\n            api = '';\n\n            if (this.options.protocol === 'oidc') {\n              api = this.baseClient.appHost + \"/oidc/token\";\n            } else if (this.options.protocol === 'oauth') {\n              api = this.baseClient.appHost + \"/oauth/token\";\n            }\n\n            return [4\n            /*yield*/\n            , this.naiveHttpClient.request({\n              method: 'POST',\n              url: api,\n              data: qstr,\n              headers: {\n                'Content-Type': 'application/x-www-form-urlencoded'\n              }\n            })];\n\n          case 1:\n            tokenSet = _a.sent();\n            return [2\n            /*return*/\n            , tokenSet];\n        }\n      });\n    });\n  };\n  /**\n   * @param {string} code 授权码 code\n   * @param {string} codeVerifier 校验码 codeVerifier\n   */\n\n\n  AuthenticationClient.prototype._getAccessTokenByCodeWithClientSecretBasic = function (code, codeVerifier) {\n    return __awaiter(this, void 0, void 0, function () {\n      var api, qstr, tokenSet;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            api = '';\n\n            if (this.options.protocol === 'oidc') {\n              api = this.baseClient.appHost + \"/oidc/token\";\n            } else if (this.options.protocol === 'oauth') {\n              api = this.baseClient.appHost + \"/oauth/token\";\n            }\n\n            qstr = this._generateTokenRequest({\n              grant_type: 'authorization_code',\n              code: code,\n              redirect_uri: this.options.redirectUri,\n              code_verifier: codeVerifier\n            });\n            return [4\n            /*yield*/\n            , this.naiveHttpClient.request({\n              data: qstr,\n              method: 'POST',\n              url: api,\n              headers: {\n                Authorization: this._generateBasicAuthToken()\n              }\n            })];\n\n          case 1:\n            tokenSet = _a.sent();\n            return [2\n            /*return*/\n            , tokenSet];\n        }\n      });\n    });\n  };\n  /**\n   * @param {string} code 授权码 code\n   * @param {string} codeVerifier 校验码 codeVerifier\n   */\n\n\n  AuthenticationClient.prototype._getAccessTokenByCodeWithNone = function (code, codeVerifier) {\n    return __awaiter(this, void 0, void 0, function () {\n      var api, qstr, tokenSet;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            api = '';\n\n            if (this.options.protocol === 'oidc') {\n              api = this.baseClient.appHost + \"/oidc/token\";\n            } else if (this.options.protocol === 'oauth') {\n              api = this.baseClient.appHost + \"/oauth/token\";\n            }\n\n            qstr = this._generateTokenRequest({\n              client_id: this.options.appId,\n              grant_type: 'authorization_code',\n              code: code,\n              redirect_uri: this.options.redirectUri,\n              code_verifier: codeVerifier\n            });\n            return [4\n            /*yield*/\n            , this.naiveHttpClient.request({\n              method: 'POST',\n              url: api,\n              data: qstr\n            })];\n\n          case 1:\n            tokenSet = _a.sent();\n            return [2\n            /*return*/\n            , tokenSet];\n        }\n      });\n    });\n  };\n\n  AuthenticationClient.prototype.getAccessTokenByCode = function (code, options) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (!['oauth', 'oidc'].includes(this.options.protocol)) {\n              throw new Error('初始化 AuthenticationClient 时传入的 protocol 参数必须为 oauth 或 oidc，请检查参数');\n            }\n\n            if (!this.options.secret && this.options.tokenEndPointAuthMethod !== 'none') {\n              throw new Error('请在初始化 AuthenticationClient 时传入 appId 和 secret 参数');\n            }\n\n            if (!(this.options.tokenEndPointAuthMethod === 'client_secret_post')) return [3\n            /*break*/\n            , 2];\n            return [4\n            /*yield*/\n            , this._getAccessTokenByCodeWithClientSecretPost(code, options === null || options === void 0 ? void 0 : options.codeVerifier)];\n\n          case 1:\n            return [2\n            /*return*/\n            , _a.sent()];\n\n          case 2:\n            if (!(this.options.tokenEndPointAuthMethod === 'client_secret_basic')) return [3\n            /*break*/\n            , 4];\n            return [4\n            /*yield*/\n            , this._getAccessTokenByCodeWithClientSecretBasic(code, options === null || options === void 0 ? void 0 : options.codeVerifier)];\n\n          case 3:\n            return [2\n            /*return*/\n            , _a.sent()];\n\n          case 4:\n            if (!(this.options.tokenEndPointAuthMethod === 'none')) return [3\n            /*break*/\n            , 6];\n            return [4\n            /*yield*/\n            , this._getAccessTokenByCodeWithNone(code, options === null || options === void 0 ? void 0 : options.codeVerifier)];\n\n          case 5:\n            return [2\n            /*return*/\n            , _a.sent()];\n\n          case 6:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  AuthenticationClient.prototype.generateCodeChallenge = function () {\n    return generateRandomString(43);\n  };\n\n  AuthenticationClient.prototype.getCodeChallengeDigest = function (options) {\n    if (!options) {\n      throw new Error('请提供 options 参数，options.codeChallenge 为一个长度大于等于 43 的字符串，options.method 可选值为 S256、plain');\n    }\n\n    if (!options.codeChallenge) {\n      throw new Error('请提供 options.codeChallenge，值为一个长度大于等于 43 的字符串');\n    }\n\n    var _a = options.method,\n        method = _a === void 0 ? 'S256' : _a;\n\n    if (method === 'S256') {\n      // url safe base64\n      return sha256(options.codeChallenge).toString(CryptoJS.enc.Base64).replace(/\\+/g, '-').replace(/\\//g, '_').replace(/=/g, '');\n    }\n\n    if (method === 'plain') {\n      return options.codeChallenge;\n    }\n\n    throw new Error('不支持的 options.method，可选值为 S256、plain');\n  };\n\n  AuthenticationClient.prototype.getAccessTokenByClientCredentials = function (scope, options) {\n    return __awaiter(this, void 0, void 0, function () {\n      var i, s, qstr, api, tokenSet;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (!scope) {\n              throw new Error('请传入 scope 参数，请看文档：https://docs.authing.cn/v2/guides/authorization/m2m-authz.html');\n            }\n\n            if (!options) {\n              throw new Error('请在调用本方法时传入 { accessKey: string, accessSecret: string }，请看文档：https://docs.authing.cn/v2/guides/authorization/m2m-authz.html' // '请在初始化 AuthenticationClient 时传入 appId 和 secret 参数或者在调用本方法时传入 { accessKey: string, accessSecret: string }，请看文档：https://docs.authing.cn/v2/guides/authorization/m2m-authz.html'\n              );\n            }\n\n            i = (options === null || options === void 0 ? void 0 : options.accessKey) || this.options.appId;\n            s = (options === null || options === void 0 ? void 0 : options.accessSecret) || this.options.secret;\n            qstr = this._generateTokenRequest({\n              client_id: i,\n              client_secret: s,\n              grant_type: 'client_credentials',\n              scope: scope\n            });\n            api = '';\n\n            if (this.options.protocol === 'oidc') {\n              api = this.baseClient.appHost + \"/oidc/token\";\n            } else if (this.options.protocol === 'oauth') {\n              api = this.baseClient.appHost + \"/oauth/token\";\n            }\n\n            return [4\n            /*yield*/\n            , this.naiveHttpClient.request({\n              method: 'POST',\n              url: api,\n              data: qstr,\n              headers: {\n                'Content-Type': 'application/x-www-form-urlencoded'\n              }\n            })];\n\n          case 1:\n            tokenSet = _a.sent();\n            return [2\n            /*return*/\n            , tokenSet];\n        }\n      });\n    });\n  };\n\n  AuthenticationClient.prototype.getUserInfoByAccessToken = function (accessToken, options) {\n    return __awaiter(this, void 0, void 0, function () {\n      var api, userInfo, userInfo, userInfo, userInfo, userInfo, userInfo;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (options) {\n              if (options.method && !['POST', 'GET'].includes(options.method)) {\n                throw new Error('options.method 参数的可选值为 POST、GET，请检查输入');\n              }\n\n              if (options.tokenPlace && !['query', 'header', 'body'].includes(options.tokenPlace)) {\n                throw new Error('options.tokenPlace 参数的可选值为 query、header、body，请检查输入');\n              }\n\n              if (options.method === 'GET' && options.tokenPlace === 'body') {\n                throw new Error('options.method 参数为 GET 时，options.tokenPlace 参数不能为 body');\n              }\n\n              options.method = options.method || 'GET';\n              options.tokenPlace = options.tokenPlace || 'query';\n            }\n\n            api = '';\n\n            if (this.options.protocol === 'oidc') {\n              api = this.baseClient.appHost + \"/oidc/me\";\n            } else if (this.options.protocol === 'oauth') {\n              api = this.baseClient.appHost + \"/oauth/me\";\n            }\n\n            if (!((options === null || options === void 0 ? void 0 : options.method) === 'POST')) return [3\n            /*break*/\n            , 7];\n            if (!((options === null || options === void 0 ? void 0 : options.tokenPlace) === 'header')) return [3\n            /*break*/\n            , 2];\n            return [4\n            /*yield*/\n            , this.naiveHttpClient.request({\n              method: 'POST',\n              url: api,\n              headers: {\n                Authorization: 'Bearer ' + accessToken\n              }\n            })];\n\n          case 1:\n            userInfo = _a.sent();\n            return [2\n            /*return*/\n            , userInfo];\n\n          case 2:\n            if (!((options === null || options === void 0 ? void 0 : options.tokenPlace) === 'query')) return [3\n            /*break*/\n            , 4];\n            return [4\n            /*yield*/\n            , this.naiveHttpClient.request({\n              method: 'POST',\n              url: api,\n              params: {\n                access_token: accessToken\n              }\n            })];\n\n          case 3:\n            userInfo = _a.sent();\n            return [2\n            /*return*/\n            , userInfo];\n\n          case 4:\n            if (!((options === null || options === void 0 ? void 0 : options.tokenPlace) === 'body')) return [3\n            /*break*/\n            , 6];\n            return [4\n            /*yield*/\n            , this.naiveHttpClient.request({\n              method: 'POST',\n              url: api,\n              data: serialize({\n                access_token: accessToken\n              })\n            })];\n\n          case 5:\n            userInfo = _a.sent();\n            return [2\n            /*return*/\n            , userInfo];\n\n          case 6:\n            return [3\n            /*break*/\n            , 14];\n\n          case 7:\n            if (!((options === null || options === void 0 ? void 0 : options.method) === 'GET')) return [3\n            /*break*/\n            , 12];\n            if (!((options === null || options === void 0 ? void 0 : options.tokenPlace) === 'header')) return [3\n            /*break*/\n            , 9];\n            return [4\n            /*yield*/\n            , this.naiveHttpClient.request({\n              method: 'GET',\n              url: api,\n              headers: {\n                Authorization: 'Bearer ' + accessToken\n              }\n            })];\n\n          case 8:\n            userInfo = _a.sent();\n            return [2\n            /*return*/\n            , userInfo];\n\n          case 9:\n            if (!((options === null || options === void 0 ? void 0 : options.tokenPlace) === 'query')) return [3\n            /*break*/\n            , 11];\n            return [4\n            /*yield*/\n            , this.naiveHttpClient.request({\n              method: 'GET',\n              url: api,\n              params: {\n                access_token: accessToken\n              }\n            })];\n\n          case 10:\n            userInfo = _a.sent();\n            return [2\n            /*return*/\n            , userInfo];\n\n          case 11:\n            return [3\n            /*break*/\n            , 14];\n\n          case 12:\n            return [4\n            /*yield*/\n            , this.naiveHttpClient.request({\n              method: 'GET',\n              url: api,\n              params: {\n                access_token: accessToken\n              }\n            })];\n\n          case 13:\n            userInfo = _a.sent();\n            return [2\n            /*return*/\n            , userInfo];\n\n          case 14:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  AuthenticationClient.prototype.buildAuthorizeUrl = function (options) {\n    if (!this.baseClient.appHost) {\n      throw new Error('请在初始化 AuthenticationClient 时传入应用域名 appHost 参数，形如：https://app1.authing.cn');\n    }\n\n    if (this.options.protocol === 'oidc') {\n      return this._buildOidcAuthorizeUrl(options);\n    }\n\n    if (this.options.protocol === 'oauth') {\n      return this._buildOauthAuthorizeUrl(options);\n    }\n\n    if (this.options.protocol === 'saml') {\n      return this._buildSamlAuthorizeUrl();\n    }\n\n    if (this.options.protocol === 'cas') {\n      return this._buildCasAuthorizeUrl(options);\n    }\n\n    throw new Error('不支持的协议类型，请在初始化 AuthenticationClient 时传入 protocol 参数，可选值为 oidc、oauth、saml、cas');\n  };\n\n  AuthenticationClient.prototype._buildOidcAuthorizeUrl = function (options) {\n    var map = {\n      appId: 'client_id',\n      scope: 'scope',\n      state: 'state',\n      nonce: 'nonce',\n      responseMode: 'response_mode',\n      responseType: 'response_type',\n      redirectUri: 'redirect_uri',\n      codeChallenge: 'code_challenge',\n      codeChallengeMethod: 'code_challenge_method',\n      tenantId: 'tenant_id'\n    };\n    var res = {\n      nonce: Math.random().toString().slice(2),\n      state: Math.random().toString().slice(2),\n      scope: 'openid profile email phone address',\n      client_id: this.options.appId,\n      redirect_uri: this.options.redirectUri,\n      response_type: 'code'\n    };\n    Object.keys(map).forEach(function (k) {\n      if (options && options[k]) {\n        if (k === 'scope' && options.scope.includes('offline_access')) {\n          res.prompt = 'consent';\n        }\n\n        res[map[k]] = options[k];\n      }\n    });\n    var params = new URLSearchParams(res);\n    var authorizeUrl = this.baseClient.appHost + '/oidc/auth?' + params.toString();\n    return authorizeUrl;\n  };\n\n  AuthenticationClient.prototype._buildOauthAuthorizeUrl = function (options) {\n    var map = {\n      appId: 'client_id',\n      scope: 'scope',\n      state: 'state',\n      responseType: 'response_type',\n      redirectUri: 'redirect_uri'\n    };\n    var res = {\n      state: Math.random().toString().slice(2),\n      scope: 'user',\n      client_id: this.options.appId,\n      redirect_uri: this.options.redirectUri,\n      response_type: 'code'\n    };\n    Object.keys(map).forEach(function (k) {\n      if (options && options[k]) {\n        res[map[k]] = options[k];\n      }\n    });\n    var params = new URLSearchParams(res);\n    var authorizeUrl = this.baseClient.appHost + '/oauth/auth?' + params.toString();\n    return authorizeUrl;\n  };\n\n  AuthenticationClient.prototype._buildSamlAuthorizeUrl = function () {\n    return this.baseClient.appHost + '/api/v2/saml-idp/' + this.options.appId;\n  };\n\n  AuthenticationClient.prototype._buildCasAuthorizeUrl = function (options) {\n    if (options === null || options === void 0 ? void 0 : options.service) {\n      return this.baseClient.appHost + \"/cas-idp/\" + this.options.appId + \"?service=\" + (options === null || options === void 0 ? void 0 : options.service);\n    }\n\n    return this.baseClient.appHost + \"/cas-idp/\" + this.options.appId;\n  };\n\n  AuthenticationClient.prototype._buildCasLogoutUrl = function (options) {\n    if (options === null || options === void 0 ? void 0 : options.redirectUri) {\n      return this.baseClient.appHost + '/cas-idp/logout?url=' + options.redirectUri;\n    }\n\n    return this.baseClient.appHost + \"/cas-idp/logout\";\n  };\n\n  AuthenticationClient.prototype._buildOidcLogoutUrl = function (options) {\n    if (options && !(options.idToken && options.redirectUri)) {\n      throw new Error('必须同时传入 idToken 和 redirectUri 参数，或者同时都不传入');\n    }\n\n    if (options === null || options === void 0 ? void 0 : options.redirectUri) {\n      return this.baseClient.appHost + \"/oidc/session/end?id_token_hint=\" + options.idToken + \"&post_logout_redirect_uri=\" + options.redirectUri;\n    }\n\n    return this.baseClient.appHost + \"/oidc/session/end\";\n  };\n\n  AuthenticationClient.prototype._buildEasyLogoutUrl = function (options) {\n    if (options === null || options === void 0 ? void 0 : options.redirectUri) {\n      return this.baseClient.appHost + \"/login/profile/logout?redirect_uri=\" + options.redirectUri;\n    }\n\n    return this.baseClient.appHost + \"/login/profile/logout\";\n  };\n\n  AuthenticationClient.prototype.buildLogoutUrl = function (options) {\n    if (this.options.protocol === 'cas') {\n      return this._buildCasLogoutUrl(options);\n    }\n\n    if (this.options.protocol === 'oidc' && (options === null || options === void 0 ? void 0 : options.expert)) {\n      return this._buildOidcLogoutUrl(options);\n    }\n\n    return this._buildEasyLogoutUrl(options);\n  };\n\n  AuthenticationClient.prototype._getNewAccessTokenByRefreshTokenWithClientSecretPost = function (refreshToken) {\n    return __awaiter(this, void 0, void 0, function () {\n      var qstr, api, tokenSet;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            qstr = this._generateTokenRequest({\n              client_id: this.options.appId,\n              client_secret: this.options.secret,\n              grant_type: 'refresh_token',\n              refresh_token: refreshToken\n            });\n            api = '';\n\n            if (this.options.protocol === 'oidc') {\n              api = this.baseClient.appHost + \"/oidc/token\";\n            } else if (this.options.protocol === 'oauth') {\n              api = this.baseClient.appHost + \"/oauth/token\";\n            }\n\n            return [4\n            /*yield*/\n            , this.naiveHttpClient.request({\n              method: 'POST',\n              url: api,\n              data: qstr,\n              headers: {\n                'Content-Type': 'application/x-www-form-urlencoded'\n              }\n            })];\n\n          case 1:\n            tokenSet = _a.sent();\n            return [2\n            /*return*/\n            , tokenSet];\n        }\n      });\n    });\n  };\n\n  AuthenticationClient.prototype._getNewAccessTokenByRefreshTokenWithClientSecretBasic = function (refreshToken) {\n    return __awaiter(this, void 0, void 0, function () {\n      var api, qstr, tokenSet;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            api = '';\n\n            if (this.options.protocol === 'oidc') {\n              api = this.baseClient.appHost + \"/oidc/token\";\n            } else if (this.options.protocol === 'oauth') {\n              api = this.baseClient.appHost + \"/oauth/token\";\n            }\n\n            qstr = this._generateTokenRequest({\n              grant_type: 'refresh_token',\n              refresh_token: refreshToken\n            });\n            return [4\n            /*yield*/\n            , this.naiveHttpClient.request({\n              data: qstr,\n              method: 'POST',\n              url: api,\n              headers: {\n                Authorization: this._generateBasicAuthToken()\n              }\n            })];\n\n          case 1:\n            tokenSet = _a.sent();\n            return [2\n            /*return*/\n            , tokenSet];\n        }\n      });\n    });\n  };\n\n  AuthenticationClient.prototype._getNewAccessTokenByRefreshTokenWithNone = function (refreshToken) {\n    return __awaiter(this, void 0, void 0, function () {\n      var api, qstr, tokenSet;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            api = '';\n\n            if (this.options.protocol === 'oidc') {\n              api = this.baseClient.appHost + \"/oidc/token\";\n            } else if (this.options.protocol === 'oauth') {\n              api = this.baseClient.appHost + \"/oauth/token\";\n            }\n\n            qstr = this._generateTokenRequest({\n              client_id: this.options.appId,\n              grant_type: 'refresh_token',\n              refresh_token: refreshToken\n            });\n            return [4\n            /*yield*/\n            , this.naiveHttpClient.request({\n              method: 'POST',\n              url: api,\n              data: qstr\n            })];\n\n          case 1:\n            tokenSet = _a.sent();\n            return [2\n            /*return*/\n            , tokenSet];\n        }\n      });\n    });\n  };\n\n  AuthenticationClient.prototype.getNewAccessTokenByRefreshToken = function (refreshToken) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (!['oauth', 'oidc'].includes(this.options.protocol)) {\n              throw new Error('初始化 AuthenticationClient 时传入的 protocol 参数必须为 oauth 或 oidc，请检查参数');\n            }\n\n            if (!this.options.secret && this.options.tokenEndPointAuthMethod !== 'none') {\n              throw new Error('请在初始化 AuthenticationClient 时传入 appId 和 secret 参数');\n            }\n\n            if (!(this.options.tokenEndPointAuthMethod === 'client_secret_post')) return [3\n            /*break*/\n            , 2];\n            return [4\n            /*yield*/\n            , this._getNewAccessTokenByRefreshTokenWithClientSecretPost(refreshToken)];\n\n          case 1:\n            return [2\n            /*return*/\n            , _a.sent()];\n\n          case 2:\n            if (!(this.options.tokenEndPointAuthMethod === 'client_secret_basic')) return [3\n            /*break*/\n            , 4];\n            return [4\n            /*yield*/\n            , this._getNewAccessTokenByRefreshTokenWithClientSecretBasic(refreshToken)];\n\n          case 3:\n            return [2\n            /*return*/\n            , _a.sent()];\n\n          case 4:\n            if (!(this.options.tokenEndPointAuthMethod === 'none')) return [3\n            /*break*/\n            , 6];\n            return [4\n            /*yield*/\n            , this._getNewAccessTokenByRefreshTokenWithNone(refreshToken)];\n\n          case 5:\n            return [2\n            /*return*/\n            , _a.sent()];\n\n          case 6:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  AuthenticationClient.prototype._revokeTokenWithClientSecretPost = function (token) {\n    return __awaiter(this, void 0, void 0, function () {\n      var qstr, api, tokenSet;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            qstr = this._generateTokenRequest({\n              client_id: this.options.appId,\n              client_secret: this.options.secret,\n              token: token\n            });\n            api = '';\n\n            if (this.options.protocol === 'oidc') {\n              api = this.baseClient.appHost + \"/oidc/token/revocation\";\n            } else if (this.options.protocol === 'oauth') {\n              api = this.baseClient.appHost + \"/oauth/token/revocation\";\n            }\n\n            return [4\n            /*yield*/\n            , this.naiveHttpClient.request({\n              method: 'POST',\n              url: api,\n              data: qstr,\n              headers: {\n                'Content-Type': 'application/x-www-form-urlencoded'\n              }\n            })];\n\n          case 1:\n            tokenSet = _a.sent();\n            return [2\n            /*return*/\n            , tokenSet];\n        }\n      });\n    });\n  };\n\n  AuthenticationClient.prototype._revokeTokenWithClientSecretBasic = function (token) {\n    return __awaiter(this, void 0, void 0, function () {\n      var api, qstr, result;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            api = '';\n\n            if (this.options.protocol === 'oidc') {\n              api = this.baseClient.appHost + \"/oidc/token/revocation\";\n            } else if (this.options.protocol === 'oauth') {\n              throw new Error('OAuth 2.0 暂不支持用 client_secret_basic 模式身份验证撤回 Token');\n              api = this.baseClient.appHost + \"/oauth/token/revocation\";\n            }\n\n            qstr = this._generateTokenRequest({\n              token: token\n            });\n            return [4\n            /*yield*/\n            , this.naiveHttpClient.request({\n              data: qstr,\n              method: 'POST',\n              url: api,\n              headers: {\n                Authorization: this._generateBasicAuthToken()\n              }\n            })];\n\n          case 1:\n            result = _a.sent();\n            return [2\n            /*return*/\n            , result];\n        }\n      });\n    });\n  };\n\n  AuthenticationClient.prototype._revokeTokenWithNone = function (token) {\n    return __awaiter(this, void 0, void 0, function () {\n      var api, qstr, result;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            api = '';\n\n            if (this.options.protocol === 'oidc') {\n              api = this.baseClient.appHost + \"/oidc/token/revocation\";\n            } else if (this.options.protocol === 'oauth') {\n              api = this.baseClient.appHost + \"/oauth/token/revocation\";\n            }\n\n            qstr = this._generateTokenRequest({\n              client_id: this.options.appId,\n              token: token\n            });\n            return [4\n            /*yield*/\n            , this.naiveHttpClient.request({\n              method: 'POST',\n              url: api,\n              data: qstr\n            })];\n\n          case 1:\n            result = _a.sent();\n            return [2\n            /*return*/\n            , result];\n        }\n      });\n    });\n  };\n\n  AuthenticationClient.prototype.revokeToken = function (token) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (!['oauth', 'oidc'].includes(this.options.protocol)) {\n              throw new Error('初始化 AuthenticationClient 时传入的 protocol 参数必须为 oauth 或 oidc，请检查参数');\n            }\n\n            if (!this.options.secret && this.options.revocationEndPointAuthMethod !== 'none') {\n              throw new Error('请在初始化 AuthenticationClient 时传入 appId 和 secret 参数');\n            }\n\n            if (!(this.options.revocationEndPointAuthMethod === 'client_secret_post')) return [3\n            /*break*/\n            , 2];\n            return [4\n            /*yield*/\n            , this._revokeTokenWithClientSecretPost(token)];\n\n          case 1:\n            _a.sent();\n\n            return [2\n            /*return*/\n            , true];\n\n          case 2:\n            if (!(this.options.revocationEndPointAuthMethod === 'client_secret_basic')) return [3\n            /*break*/\n            , 4];\n            return [4\n            /*yield*/\n            , this._revokeTokenWithClientSecretBasic(token)];\n\n          case 3:\n            _a.sent();\n\n            return [2\n            /*return*/\n            , true];\n\n          case 4:\n            if (!(this.options.revocationEndPointAuthMethod === 'none')) return [3\n            /*break*/\n            , 6];\n            return [4\n            /*yield*/\n            , this._revokeTokenWithNone(token)];\n\n          case 5:\n            _a.sent();\n\n            return [2\n            /*return*/\n            , true];\n\n          case 6:\n            throw new Error('初始化 AuthenticationClient 时传入的 revocationEndPointAuthMethod 参数可选值为 client_secret_base、client_secret_post、none，请检查参数');\n        }\n      });\n    });\n  };\n\n  AuthenticationClient.prototype._introspectTokenWithClientSecretPost = function (token) {\n    return __awaiter(this, void 0, void 0, function () {\n      var qstr, api, tokenSet;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            qstr = this._generateTokenRequest({\n              client_id: this.options.appId,\n              client_secret: this.options.secret,\n              token: token\n            });\n            api = '';\n\n            if (this.options.protocol === 'oidc') {\n              api = this.baseClient.appHost + \"/oidc/token/introspection\";\n            } else if (this.options.protocol === 'oauth') {\n              api = this.baseClient.appHost + \"/oauth/token/introspection\";\n            }\n\n            return [4\n            /*yield*/\n            , this.naiveHttpClient.request({\n              method: 'POST',\n              url: api,\n              data: qstr,\n              headers: {\n                'Content-Type': 'application/x-www-form-urlencoded'\n              }\n            })];\n\n          case 1:\n            tokenSet = _a.sent();\n            return [2\n            /*return*/\n            , tokenSet];\n        }\n      });\n    });\n  };\n\n  AuthenticationClient.prototype._introspectTokenWithClientSecretBasic = function (token) {\n    return __awaiter(this, void 0, void 0, function () {\n      var api, qstr, result;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            api = '';\n\n            if (this.options.protocol === 'oidc') {\n              api = this.baseClient.appHost + \"/oidc/token/introspection\";\n            } else if (this.options.protocol === 'oauth') {\n              api = this.baseClient.appHost + \"/oauth/token/introspection\";\n            }\n\n            qstr = this._generateTokenRequest({\n              token: token\n            });\n            return [4\n            /*yield*/\n            , this.naiveHttpClient.request({\n              data: qstr,\n              method: 'POST',\n              url: api,\n              headers: {\n                Authorization: this._generateBasicAuthToken()\n              }\n            })];\n\n          case 1:\n            result = _a.sent();\n            return [2\n            /*return*/\n            , result];\n        }\n      });\n    });\n  };\n\n  AuthenticationClient.prototype._introspectTokenWithNone = function (token) {\n    return __awaiter(this, void 0, void 0, function () {\n      var api, qstr, result;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            api = '';\n\n            if (this.options.protocol === 'oidc') {\n              api = this.baseClient.appHost + \"/oidc/token/introspection\";\n            } else if (this.options.protocol === 'oauth') {\n              api = this.baseClient.appHost + \"/oauth/token/introspection\";\n            }\n\n            qstr = this._generateTokenRequest({\n              client_id: this.options.appId,\n              token: token\n            });\n            return [4\n            /*yield*/\n            , this.naiveHttpClient.request({\n              method: 'POST',\n              url: api,\n              data: qstr\n            })];\n\n          case 1:\n            result = _a.sent();\n            return [2\n            /*return*/\n            , result];\n        }\n      });\n    });\n  };\n\n  AuthenticationClient.prototype.introspectToken = function (token) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (!['oauth', 'oidc'].includes(this.options.protocol)) {\n              throw new Error('初始化 AuthenticationClient 时传入的 protocol 参数必须为 oauth 或 oidc，请检查参数');\n            }\n\n            if (!this.options.secret && this.options.introspectionEndPointAuthMethod !== 'none') {\n              throw new Error('请在初始化 AuthenticationClient 时传入 appId 和 secret 参数');\n            }\n\n            if (!(this.options.introspectionEndPointAuthMethod === 'client_secret_post')) return [3\n            /*break*/\n            , 2];\n            return [4\n            /*yield*/\n            , this._introspectTokenWithClientSecretPost(token)];\n\n          case 1:\n            return [2\n            /*return*/\n            , _a.sent()];\n\n          case 2:\n            if (!(this.options.introspectionEndPointAuthMethod === 'client_secret_basic')) return [3\n            /*break*/\n            , 4];\n            return [4\n            /*yield*/\n            , this._introspectTokenWithClientSecretBasic(token)];\n\n          case 3:\n            return [2\n            /*return*/\n            , _a.sent()];\n\n          case 4:\n            if (!(this.options.introspectionEndPointAuthMethod === 'none')) return [3\n            /*break*/\n            , 6];\n            return [4\n            /*yield*/\n            , this._introspectTokenWithNone(token)];\n\n          case 5:\n            return [2\n            /*return*/\n            , _a.sent()];\n\n          case 6:\n            throw new Error('初始化 AuthenticationClient 时传入的 introspectionEndPointAuthMethod 参数可选值为 client_secret_base、client_secret_post、none，请检查参数');\n        }\n      });\n    });\n  };\n\n  AuthenticationClient.prototype.validateTicketV1 = function (ticket, service) {\n    return __awaiter(this, void 0, void 0, function () {\n      var api, result, valid;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            api = this.baseClient.appHost + \"/cas-idp/\" + this.options.appId + \"/validate\";\n            return [4\n            /*yield*/\n            , this.naiveHttpClient.request({\n              method: 'GET',\n              url: api,\n              params: {\n                service: service,\n                ticket: ticket\n              }\n            })];\n\n          case 1:\n            result = _a.sent();\n            valid = result.split('\\n')[0];\n            return [2\n            /*return*/\n            , __assign({\n              valid: valid === 'yes'\n            }, valid !== 'yes' && {\n              message: 'ticket 不合法'\n            })];\n        }\n      });\n    });\n  };\n\n  AuthenticationClient.prototype.validateTicketV2 = function (ticket, service, format) {\n    if (format === void 0) {\n      format = 'JSON';\n    }\n\n    return __awaiter(this, void 0, void 0, function () {\n      var api, result;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (!ticket) {\n              throw new Error('请传入 ticket 一次性票据');\n            }\n\n            if (!service) {\n              throw new Error('请传入 service 服务地址');\n            }\n\n            if (format !== 'XML' && format !== 'JSON') {\n              throw new Error('format 参数可选值为 XML、JSON，请检查输入');\n            }\n\n            api = this.baseClient.appHost + \"/cas-idp/\" + this.options.appId + \"/serviceValidate\";\n            return [4\n            /*yield*/\n            , this.naiveHttpClient.request({\n              method: 'GET',\n              url: api,\n              params: {\n                service: service,\n                ticket: ticket,\n                format: format\n              }\n            })];\n\n          case 1:\n            result = _a.sent();\n            return [2\n            /*return*/\n            , result];\n        }\n      });\n    });\n  };\n  /**\n   * 判断 \"我\" 是否有某个角色\n   * @param roleCode 角色 Code\n   * @param namespace 权限分组 ID\n   */\n\n\n  AuthenticationClient.prototype.hasRole = function (roleCode, namespace) {\n    return __awaiter(this, void 0, void 0, function () {\n      var user, roleList, hasRole;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , getUserRoles(this.graphqlClient, this.tokenProvider, {\n              id: this.checkLoggedIn(),\n              namespace: namespace\n            })];\n\n          case 1:\n            user = _a.sent().user;\n\n            if (!user) {\n              return [2\n              /*return*/\n              , false];\n            }\n\n            roleList = user.roles;\n\n            if (roleList.totalCount < 1) {\n              return [2\n              /*return*/\n              , false];\n            }\n\n            hasRole = false;\n            roleList.list.forEach(function (item) {\n              if (item.code === roleCode) {\n                hasRole = true;\n              }\n            });\n            return [2\n            /*return*/\n            , hasRole];\n        }\n      });\n    });\n  };\n  /**\n   * @description 获取当前用户能够访问的应用\n   */\n\n\n  AuthenticationClient.prototype.listApplications = function (params) {\n    return __awaiter(this, void 0, void 0, function () {\n      var _a, _b, page, _c, limit, data;\n\n      return __generator(this, function (_d) {\n        switch (_d.label) {\n          case 0:\n            _a = params || {}, _b = _a.page, page = _b === void 0 ? 1 : _b, _c = _a.limit, limit = _c === void 0 ? 10 : _c;\n            return [4\n            /*yield*/\n            , this.httpClient.request({\n              url: this.baseClient.appHost + \"/api/v2/users/me/applications/allowed?page=\" + page + \"&limit=\" + limit,\n              method: 'GET'\n            })];\n\n          case 1:\n            data = _d.sent();\n            return [2\n            /*return*/\n            , data];\n        }\n      });\n    });\n  };\n  /**\n   * @description 检验 idToken 或 accessToken\n   */\n\n\n  AuthenticationClient.prototype.validateToken = function (options) {\n    return __awaiter(this, void 0, void 0, function () {\n      var data, data;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (!options) {\n              throw new Error('请在传入的参数对象中包含 accessToken 或 idToken 字段');\n            }\n\n            if (options.accessToken && options.idToken) {\n              throw new Error('accessToken 和 idToken 只能传入一个，不能同时传入');\n            }\n\n            if (!options.idToken) return [3\n            /*break*/\n            , 2];\n            return [4\n            /*yield*/\n            , this.naiveHttpClient.request({\n              url: this.baseClient.appHost + \"/api/v2/oidc/validate_token\",\n              method: 'GET',\n              params: {\n                id_token: options.idToken\n              }\n            })];\n\n          case 1:\n            data = _a.sent();\n            return [2\n            /*return*/\n            , data];\n\n          case 2:\n            if (!options.accessToken) return [3\n            /*break*/\n            , 4];\n            return [4\n            /*yield*/\n            , this.naiveHttpClient.request({\n              url: this.baseClient.appHost + \"/api/v2/oidc/validate_token\",\n              method: 'GET',\n              params: {\n                access_token: options.accessToken\n              }\n            })];\n\n          case 3:\n            data = _a.sent();\n            return [2\n            /*return*/\n            , data];\n\n          case 4:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * @description sso 检测登录态\n   */\n\n\n  AuthenticationClient.prototype.trackSession = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var data;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.naiveHttpClient.request({\n              url: this.baseClient.appHost + \"/cas/session\",\n              method: 'GET'\n            })];\n\n          case 1:\n            data = _a.sent();\n            return [2\n            /*return*/\n            , data];\n        }\n      });\n    });\n  };\n  /*\n   * 在本地检验 ID Token 或 Access Token 的有效性，并返回其包含的内容。\n   * 如果签名模式是 HS256，必须在初始化参数中传入 appSecret。\n   * 如果开启了 Token 加密功能，请使用 decryptTokenLocally。\n   * @param token 待检验的 Token\n   * @returns Token 的内容\n   */\n  // async validateTokenLocally(token: string) {\n  //   const { payload } = await compactVerify(token, (header: any) =>\n  //     this.keyManager.getKeyFor({\n  //       alg: header.alg,\n  //       kid: header.kid\n  //     })\n  //   );\n  //   return JSON.parse(new TextDecoder().decode(payload));\n  // }\n\n  /**\n   * 在本地利用私钥解密 ID Token 或 Access Token ，检验其有效性并返回包含的内容。\n   * 只在开启 Token 加密功能的情况下使用，反之请使用 validateTokenLocally。\n   * 必须在初始化参数中传入 privateKeys。\n   * @param token 待检验的 Token\n   * @returns Token 的内容\n   */\n  // async decryptTokenLocally(token: string) {\n  //   const { plaintext } = await compactDecrypt(token, (header: any) =>\n  //     this.keyManager.getKeyFor({\n  //       alg: header.alg,\n  //       kid: header.kid\n  //     })\n  //   );\n  //   return this.validateTokenLocally(new TextDecoder().decode(plaintext));\n  // }\n\n  /**\n   * @description 设置语言\n   */\n\n\n  AuthenticationClient.prototype.setLang = function (lang) {\n    this.options.lang = lang;\n  };\n\n  return AuthenticationClient;\n}();\n\nexport { AuthenticationClient };","map":{"version":3,"sources":["../../../../src/lib/authentication/AuthenticationClient.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nimport { AuthenticationTokenProvider } from './AuthenticationTokenProvider';\nimport sha256 from 'crypto-js/sha256';\nimport CryptoJS from 'crypto-js';\nimport { bindEmail, bindPhone, checkLoginStatus, checkPasswordStrength, getUserDepartments, getUserRoles, isUserExists, listUserAuthorizedResources, loginByEmail, loginByPhoneCode, loginByPhonePassword, loginBySubAccount, loginByUsername, refreshToken, registerByEmail, registerByPhoneCode, registerByUsername, removeUdv, resetPassword, resetPasswordByFirstLoginToken, resetPasswordByForceResetToken, sendEmail, setUdv, setUdvBatch, udv, unbindEmail, unbindPhone, updateEmail, updatePassword, updatePhone, updateUser, user } from '../graphqlapi';\nimport { GraphqlClient } from '../common/GraphqlClient';\nimport { PasswordSecurityLevel } from './types';\nimport { UdfTargetType } from '../../types/graphql.v2';\nimport { QrCodeAuthenticationClient } from './QrCodeAuthenticationClient';\nimport { MfaAuthenticationClient } from './MfaAuthenticationClient';\nimport { HttpClient, NaiveHttpClient } from '../common/HttpClient';\nimport { convertObjectToKeyValueList, convertUdv, convertUdvToKeyValuePair, encrypt, formatAuthorizedResources, generateRandomString, serialize, uploadFile } from '../utils';\nimport jwtDecode from 'jwt-decode';\nimport { SocialAuthenticationClient } from './SocialAuthenticationClient';\nimport { PublicKeyManager } from '../common/PublicKeyManager';\nimport { EnterpriseAuthenticationClient } from './EnterpriseAuthenticationClient';\nimport { BaseAuthenticationClient } from './BaseAuthenticationClient';\nimport { PrincipalAuthenticationClient } from './PrincipalAuthentication';\nvar DEFAULT_OPTIONS = {\n    appId: undefined,\n    tenantId: undefined,\n    appHost: undefined,\n    protocol: 'oidc',\n    tokenEndPointAuthMethod: 'client_secret_post',\n    introspectionEndPointAuthMethod: 'client_secret_post',\n    revocationEndPointAuthMethod: 'client_secret_post',\n    timeout: 10000,\n    onError: function (code, message, data) {\n        throw { code: code, message: message, data: data };\n    },\n    requestFrom: 'sdk',\n    encryptFunction: encrypt,\n    host: 'https://core.authing.cn',\n    headers: {\n        'userpool-id': 'x-authing-userpool-id',\n        'app-id': 'x-authing-app-id',\n        'request-from': 'x-authing-request-from',\n        'sdk-version': 'x-authing-sdk-version',\n        'tenant-id': 'x-authing-app-tenant-id',\n        lang: 'x-authing-lang'\n    },\n    lang: 'zh-CN'\n};\n/**\n * @class AuthenticationClient 认证核心模块\n * @description 此模块包含注册登录、重置手机号邮箱、修改账号信息等方法，是以你的终端用户（End User）的身份进行请求，适合在需要验证用户身份的情况下使用。\n *\n * @example\n *\n * 使用方法：\n *\n * \\`\\`\\`javascript\n * import { AuthenticationClient } from \"authing-js-sdk\"\n * const authenticationClient = new AuthenticationClient({\n *    appId: \"YOUR_APP_ID\",\n * })\n * authenticationClient.registerByEmail // 使用邮箱注册\n * authenticationClient.loginByEmail // 使用邮箱登录\n * \\`\\`\\`\n *\n *\n * @name AuthenticationClient\n */\nvar AuthenticationClient = /** @class */ (function () {\n    function AuthenticationClient(options) {\n        Object.keys(options).forEach(function (i) { return !options[i] && delete options[i]; });\n        this.options = Object.assign({}, DEFAULT_OPTIONS, options);\n        this.baseClient = new BaseAuthenticationClient(this.options);\n        var graphqlEndpoint = this.baseClient.appHost + \"/graphql/v2\";\n        // 子模块初始化顺序: GraphqlClient -> ManagementTokenProvider -> Others\n        this.graphqlClient = new (this.options.graphqlClient || GraphqlClient)(graphqlEndpoint, this.options);\n        this.tokenProvider = new (this.options.tokenProvider ||\n            AuthenticationTokenProvider)(this.options);\n        this.httpClient = new (this.options.httpClient || HttpClient)(this.options, this.tokenProvider);\n        this.naiveHttpClient = new NaiveHttpClient(this.options, this.tokenProvider);\n        this.publicKeyManager = new PublicKeyManager(this.options, this.httpClient);\n        this.wxqrcode = new QrCodeAuthenticationClient(this.options, this.tokenProvider, this.httpClient, 'WXAPP_AUTH');\n        this.qrcode = new QrCodeAuthenticationClient(this.options, this.tokenProvider, this.httpClient, 'APP_AUTH');\n        this.wechatmpqrcode = new QrCodeAuthenticationClient(this.options, this.tokenProvider, this.httpClient, 'WECHATMP_AUTH');\n        this.mfa = new MfaAuthenticationClient(this.options, this.tokenProvider, this.httpClient);\n        this.social = new SocialAuthenticationClient(this.options, this.tokenProvider, this.httpClient);\n        this.enterprise = new EnterpriseAuthenticationClient(this.options, this.tokenProvider, this.httpClient);\n        this.principal = new PrincipalAuthenticationClient(this.options, this.tokenProvider, this.httpClient);\n        if (this.options.token) {\n            this.setToken(this.options.token);\n        }\n    }\n    AuthenticationClient.prototype.checkLoggedIn = function () {\n        var _a;\n        var user = this.tokenProvider.getUser();\n        if (user) {\n            return user.id;\n        }\n        var token = this.tokenProvider.getToken();\n        if (!token) {\n            throw new Error('请先登录！');\n        }\n        var decoded = jwtDecode(token);\n        var userId = decoded.sub || ((_a = decoded.data) === null || _a === void 0 ? void 0 : _a.id);\n        if (!userId) {\n            throw new Error('不合法的 accessToken');\n        }\n        return userId;\n    };\n    AuthenticationClient.prototype.setCurrentUser = function (user) {\n        this.tokenProvider.setUser(user);\n    };\n    AuthenticationClient.prototype.setToken = function (token) {\n        this.tokenProvider.setToken(token);\n    };\n    AuthenticationClient.prototype.setRequestFrom = function (requestFrom) {\n        this.options.requestFrom = requestFrom;\n        this.graphqlClient.setOptions(this.options);\n        this.httpClient.setOptions(this.options);\n    };\n    /**\n     * @name registerByEmail\n     * @name_zh 使用邮箱注册\n     * @description 使用邮箱注册，此接口不要求用户对邮箱进行验证，用户注册之后 emailVerified 字段会为 false 。如果你希望邮箱未验证的用户不能进行登录，可以使用 pipeline 对此类请求进行拦截。\n     *\n     * @param {string} email 邮箱\n     * @param {string} password 密码\n     * @param {RegisterProfile} [profile] 用户资料\n     * @param {Object} [options]\n     * @param {boolean} [options.forceLogin] 是否走一遍完整的登录的，会触发登录前后的 pipeline 函数以及登录事件 webhook ，同时该用户的累计登录次数会加 1 。默认为 false 。\n     * @param {boolean} [options.generateToken] 是否为该用户生成 token，不会触发登录后的完整流程，用户的累计登录次数不会加 1。默认为 false 。\n     * @param {string} [options.clientIp] 客户端真实 IP，如果你在服务器端调用此接口，请务必将此参数设置为终端用户的真实 IP。\n     *\n     * @example\n     *\n     * authenticationClient.registerByEmail(\n     *  'test@example.com',\n     *  'passw0rd',\n     *  {\n     *    nickname: 'Nick'\n     *  },\n     *  {\n     *    generateToken: true\n     *  }\n     * )\n     *\n     * @example\n     * authenticationClient.registerByEmail('test@example.com', 'passw0rd')\n     *\n     *\n     * @returns {Promise<User>}\n     * @memberof AuthenticationClient\n     */\n    AuthenticationClient.prototype.registerByEmail = function (email, password, profile, options) {\n        return __awaiter(this, void 0, void 0, function () {\n            var _a, forceLogin, _b, generateToken, clientIp, params, context, customData, phoneToken, _c, _d, _e, extraParams, extraContext, user;\n            return __generator(this, function (_f) {\n                switch (_f.label) {\n                    case 0:\n                        options = options || {};\n                        profile = profile || {};\n                        _a = options.forceLogin, forceLogin = _a === void 0 ? false : _a, _b = options.generateToken, generateToken = _b === void 0 ? false : _b, clientIp = options.clientIp, params = options.params, context = options.context, customData = options.customData, phoneToken = options.phoneToken;\n                        _d = (_c = this.options).encryptFunction;\n                        _e = [password];\n                        return [4 /*yield*/, this.publicKeyManager.getPublicKey()];\n                    case 1: return [4 /*yield*/, _d.apply(_c, _e.concat([_f.sent(), this.options.encryption]))];\n                    case 2:\n                        password = _f.sent();\n                        extraParams = null;\n                        if (customData) {\n                            extraParams = JSON.stringify(convertObjectToKeyValueList(customData));\n                        }\n                        else if (params) {\n                            extraParams = JSON.stringify(params);\n                        }\n                        extraContext = null;\n                        if (context) {\n                            extraContext = JSON.stringify(context);\n                        }\n                        return [4 /*yield*/, registerByEmail(this.graphqlClient, this.tokenProvider, {\n                                input: {\n                                    email: email,\n                                    password: password,\n                                    profile: profile,\n                                    forceLogin: forceLogin,\n                                    generateToken: generateToken,\n                                    clientIp: clientIp,\n                                    params: extraParams,\n                                    context: extraContext,\n                                    phoneToken: phoneToken\n                                }\n                            })];\n                    case 3:\n                        user = (_f.sent()).registerByEmail;\n                        this.setCurrentUser(user);\n                        return [2 /*return*/, user];\n                }\n            });\n        });\n    };\n    AuthenticationClient.prototype.registerByEmailCode = function (email, code, profile, options) {\n        return __awaiter(this, void 0, void 0, function () {\n            var api, params, data;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        api = this.baseClient.appHost + \"/api/v2/register/email-code\";\n                        params = __assign({ email: email, code: code, profile: profile }, options);\n                        return [4 /*yield*/, this.httpClient.request({\n                                method: 'POST',\n                                url: api,\n                                data: params\n                            })];\n                    case 1:\n                        data = _a.sent();\n                        return [2 /*return*/, data];\n                }\n            });\n        });\n    };\n    /**\n     * @name registerByUsername\n     * @name_zh 使用用户名注册\n     * @description 使用用户名注册\n     *\n     * @param {string} username 用户名\n     * @param {string} password 密码\n     * @param {RegisterProfile} [profile] 用户资料\n     * @param {Object} [options]\n     * @param {boolean} [options.forceLogin] 是否走一遍完整的登录的，会触发登录前后的 pipeline 函数以及登录事件 webhook ，同时该用户的累计登录次数会加 1 。默认为 false 。\n     * @param {boolean} [options.generateToken] 是否为该用户生成 token，不会触发登录后的完整流程，用户的累计登录次数不会加 1。默认为 false 。\n     * @param {string} [options.clientIp] 客户端真实 IP，如果你在服务器端调用此接口，请务必将此参数设置为终端用户的真实 IP。\n     *\n     *\n     * @example\n     *\n     * authenticationClient.registerByUsername(\n     *  'bob',\n     *  'passw0rd',\n     *  {\n     *    nickname: 'Nick'\n     *  },\n     *  {\n     *    generateToken: true\n     *  }\n     * )\n     *\n     * @example\n     * authenticationClient.registerByUsername('bob', 'passw0rd')\n     *\n     *\n     * @returns {Promise<User>}\n     * @memberof AuthenticationClient\n     */\n    AuthenticationClient.prototype.registerByUsername = function (username, password, profile, options) {\n        return __awaiter(this, void 0, void 0, function () {\n            var _a, forceLogin, _b, generateToken, clientIp, params, context, customData, phoneToken, emailToken, _c, _d, _e, extraParams, extraContext, user;\n            return __generator(this, function (_f) {\n                switch (_f.label) {\n                    case 0:\n                        options = options || {};\n                        profile = profile || {};\n                        _a = options.forceLogin, forceLogin = _a === void 0 ? false : _a, _b = options.generateToken, generateToken = _b === void 0 ? false : _b, clientIp = options.clientIp, params = options.params, context = options.context, customData = options.customData, phoneToken = options.phoneToken, emailToken = options.emailToken;\n                        _d = (_c = this.options).encryptFunction;\n                        _e = [password];\n                        return [4 /*yield*/, this.publicKeyManager.getPublicKey()];\n                    case 1: return [4 /*yield*/, _d.apply(_c, _e.concat([_f.sent(), this.options.encryption]))];\n                    case 2:\n                        password = _f.sent();\n                        extraParams = null;\n                        if (customData) {\n                            extraParams = JSON.stringify(convertObjectToKeyValueList(customData));\n                        }\n                        else if (params) {\n                            extraParams = JSON.stringify(params);\n                        }\n                        extraContext = null;\n                        if (context) {\n                            extraContext = JSON.stringify(context);\n                        }\n                        return [4 /*yield*/, registerByUsername(this.graphqlClient, this.tokenProvider, {\n                                input: {\n                                    username: username,\n                                    password: password,\n                                    profile: profile,\n                                    forceLogin: forceLogin,\n                                    generateToken: generateToken,\n                                    clientIp: clientIp,\n                                    params: extraParams,\n                                    context: extraContext,\n                                    phoneToken: phoneToken,\n                                    emailToken: emailToken\n                                }\n                            })];\n                    case 3:\n                        user = (_f.sent()).registerByUsername;\n                        this.setCurrentUser(user);\n                        return [2 /*return*/, user];\n                }\n            });\n        });\n    };\n    /**\n     * @name registerByPhoneCode\n     * @name_zh 使用手机号注册\n     * @description 使用手机号注册，你可以同时设置该账号的初始密码。发送短信的接口请见 sendSmsCode\n     *\n     * @param {string} phone 手机号\n     * @param {string} code 短信验证码\n     * @param {string} password 初始密码\n     * @param {RegisterProfile} [profile] 用户资料\n     * @param {Object} [options]\n     * @param {boolean} [options.forceLogin] 是否走一遍完整的登录的，会触发登录前后的 pipeline 函数以及登录事件 webhook ，同时该用户的累计登录次数会加 1 。默认为 false 。\n     * @param {boolean} [options.generateToken] 是否为该用户生成 token，不会触发登录后的完整流程，用户的累计登录次数不会加 1。默认为 false 。\n     * @param {string} [options.clientIp] 客户端真实 IP，如果你在服务器端调用此接口，请务必将此参数设置为终端用户的真实 IP。\n     *\n     * @example\n     *\n     * authenticationClient.registerByPhoneCode(\n     *  '176xxxx7041',\n     *  '1234',\n     *  'passw0rd',\n     *  {\n     *    nickname: 'Nick'\n     *  },\n     *  {\n     *    generateToken: true\n     *  }\n     * )\n     *\n     * @example\n     * authenticationClient.registerByPhoneCode('176xxxx7041', '1234')\n     *\n     *\n     * @returns {Promise<User>}\n     * @memberof AuthenticationClient\n     */\n    AuthenticationClient.prototype.registerByPhoneCode = function (phone, code, password, profile, options) {\n        return __awaiter(this, void 0, void 0, function () {\n            var _a, forceLogin, _b, generateToken, clientIp, params, context, customData, phoneCountryCode, emailToken, _c, _d, _e, extraParams, extraContext, user;\n            return __generator(this, function (_f) {\n                switch (_f.label) {\n                    case 0:\n                        options = options || {};\n                        profile = profile || {};\n                        _a = options.forceLogin, forceLogin = _a === void 0 ? false : _a, _b = options.generateToken, generateToken = _b === void 0 ? false : _b, clientIp = options.clientIp, params = options.params, context = options.context, customData = options.customData, phoneCountryCode = options.phoneCountryCode, emailToken = options.emailToken;\n                        if (!password) return [3 /*break*/, 3];\n                        _d = (_c = this.options).encryptFunction;\n                        _e = [password];\n                        return [4 /*yield*/, this.publicKeyManager.getPublicKey()];\n                    case 1: return [4 /*yield*/, _d.apply(_c, _e.concat([_f.sent(), this.options.encryption]))];\n                    case 2:\n                        password = _f.sent();\n                        _f.label = 3;\n                    case 3:\n                        extraParams = null;\n                        if (customData) {\n                            extraParams = JSON.stringify(convertObjectToKeyValueList(customData));\n                        }\n                        else if (params) {\n                            extraParams = JSON.stringify(params);\n                        }\n                        extraContext = null;\n                        if (context) {\n                            extraContext = JSON.stringify(context);\n                        }\n                        return [4 /*yield*/, registerByPhoneCode(this.graphqlClient, this.tokenProvider, {\n                                input: {\n                                    phone: phone,\n                                    code: code,\n                                    phoneCountryCode: phoneCountryCode,\n                                    password: password,\n                                    profile: profile,\n                                    forceLogin: forceLogin,\n                                    generateToken: generateToken,\n                                    clientIp: clientIp,\n                                    params: extraParams,\n                                    context: extraContext,\n                                    emailToken: emailToken\n                                }\n                            })];\n                    case 4:\n                        user = (_f.sent()).registerByPhoneCode;\n                        this.setCurrentUser(user);\n                        return [2 /*return*/, user];\n                }\n            });\n        });\n    };\n    /**\n     * @name checkPasswordStrength\n     * @name_zh 检查密码强度\n     * @description 检查密码强度，详情请见: https://docs.authing.co/v2/guides/security/config-password.html\n     *\n     * @param {string} password\n     * @example\n     * authenticationClient.checkPasswordStrength('weak')\n     *\n     * @example\n     * authenticationClient.checkPasswordStrength('strongPassw0rd!')\n     *\n     * @returns {Promise<CheckPasswordStrengthResult>}\n     * @memberof AuthenticationClient\n     */\n    AuthenticationClient.prototype.checkPasswordStrength = function (password) {\n        return __awaiter(this, void 0, void 0, function () {\n            var result;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, checkPasswordStrength(this.graphqlClient, this.tokenProvider, { password: password })];\n                    case 1:\n                        result = (_a.sent()).checkPasswordStrength;\n                        return [2 /*return*/, result];\n                }\n            });\n        });\n    };\n    /**\n     * @name sendSmsCode\n     * @name_zh 发送短信验证码\n     * @description 发送短信验证码, 短信验证码的有效时间为 60 s。\n     *\n     * @param {string} phone\n     * @example\n     * authenticationClient.sendSmsCode('176xxxx6754')\n     *\n     * @returns {Promise<CommonMessage>}\n     * @memberof AuthenticationClient\n     */\n    AuthenticationClient.prototype.sendSmsCode = function (phone, phoneCountryCode, scene) {\n        return __awaiter(this, void 0, void 0, function () {\n            var api, params, data;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        api = this.baseClient.appHost + \"/api/v2/sms/send\";\n                        params = { phone: phone };\n                        if (phoneCountryCode) {\n                            params.phoneCountryCode = phoneCountryCode;\n                        }\n                        if (scene) {\n                            params.scene = scene;\n                        }\n                        return [4 /*yield*/, this.httpClient.request({\n                                method: 'POST',\n                                url: api,\n                                data: params\n                            })];\n                    case 1:\n                        data = _a.sent();\n                        return [2 /*return*/, data];\n                }\n            });\n        });\n    };\n    /**\n     * @name loginByEmail\n     * @name_zh 使用邮箱登录\n     * @description 使用邮箱登录，该接口默认不会限制未验证的邮箱进行登录，如果你希望邮箱未验证的用户不能进行登录，可以使用 pipeline 对此类请求进行拦截。\n     *\n     * 如果你的用户池配置了登录失败检测，当同一  IP 下登录多次失败的时候会要求用户输入图形验证码（code 为 2000)。\n     *\n     * @param {string} email 邮箱\n     * @param {string} password 密码\n     * @param {Object} [options]\n     * @param {boolean} [options.autoRegister] 是否自动注册。如果检测到用户不存在，会根据登录账密自动创建一个账号。\n     * @param {string} [options.captchaCode] 图形验证码\n     * @param {string} [options.clientIp] 客户端真实 IP，如果你在服务器端调用此接口，请务必将此参数设置为终端用户的真实 IP。\n     *\n     * @example\n     *\n     * authenticationClient.loginByEmail(\n     *  'test@example.com',\n     *  'passw0rd',\n     *  {\n     *    autoRegister: true，\n     *    captchaCode: 'xj72'\n     *  }\n     * )\n     *\n     * @example\n     * authenticationClient.loginByEmail('test@example.com', 'passw0rd')\n     *\n     *\n     * @returns {Promise<User>}\n     * @memberof AuthenticationClient\n     */\n    AuthenticationClient.prototype.loginByEmail = function (email, password, options) {\n        return __awaiter(this, void 0, void 0, function () {\n            var _a, autoRegister, captchaCode, clientIp, params, context, customData, _b, _c, _d, extraParams, extraContext, user;\n            return __generator(this, function (_e) {\n                switch (_e.label) {\n                    case 0:\n                        options = options || {};\n                        _a = options.autoRegister, autoRegister = _a === void 0 ? false : _a, captchaCode = options.captchaCode, clientIp = options.clientIp, params = options.params, context = options.context, customData = options.customData;\n                        _c = (_b = this.options).encryptFunction;\n                        _d = [password];\n                        return [4 /*yield*/, this.publicKeyManager.getPublicKey()];\n                    case 1: return [4 /*yield*/, _c.apply(_b, _d.concat([_e.sent(), this.options.encryption]))];\n                    case 2:\n                        password = _e.sent();\n                        extraParams = null;\n                        if (customData) {\n                            extraParams = JSON.stringify(convertObjectToKeyValueList(customData));\n                        }\n                        else if (params) {\n                            extraParams = JSON.stringify(params);\n                        }\n                        extraContext = null;\n                        if (context) {\n                            extraContext = JSON.stringify(context);\n                        }\n                        return [4 /*yield*/, loginByEmail(this.graphqlClient, this.tokenProvider, {\n                                input: {\n                                    email: email,\n                                    password: password,\n                                    autoRegister: autoRegister,\n                                    captchaCode: captchaCode,\n                                    clientIp: clientIp,\n                                    params: extraParams,\n                                    context: extraContext\n                                }\n                            })];\n                    case 3:\n                        user = (_e.sent()).loginByEmail;\n                        if (user.customData) {\n                            // @ts-ignore\n                            user.customData = convertUdvToKeyValuePair(user.customData);\n                        }\n                        this.setCurrentUser(user);\n                        return [2 /*return*/, user];\n                }\n            });\n        });\n    };\n    /**\n     * @name loginByUsername\n     * @name_zh 使用用户名登录\n     * @description 使用用户名登录。\n     *\n     * 如果你的用户池配置了登录失败检测，当同一  IP 下登录多次失败的时候会要求用户输入图形验证码（code 为 2000)。\n     *\n     * @param {string} username 用户名\n     * @param {string} password 密码\n     * @param {Object} [options]\n     * @param {boolean} [options.autoRegister] 是否自动注册。如果检测到用户不存在，会根据登录账密自动创建一个账号。\n     * @param {string} [options.captchaCode] 图形验证码\n     * @param {string} [options.clientIp] 客户端真实 IP，如果你在服务器端调用此接口，请务必将此参数设置为终端用户的真实 IP。\n     *\n     *\n     * @example\n     *\n     * authenticationClient.loginByEmail(\n     *  'test@example.com',\n     *  'passw0rd',\n     *  {\n     *    autoRegister: true，\n     *    captchaCode: 'xj72'\n     *  }\n     * )\n     *\n     * @example\n     * authenticationClient.loginByEmail('test@example.com', 'passw0rd')\n     *\n     *\n     * @returns {Promise<User>}\n     * @memberof AuthenticationClient\n     */\n    AuthenticationClient.prototype.loginByUsername = function (username, password, options) {\n        return __awaiter(this, void 0, void 0, function () {\n            var _a, autoRegister, captchaCode, clientIp, params, context, customData, _b, _c, _d, extraParams, extraContext, user;\n            return __generator(this, function (_e) {\n                switch (_e.label) {\n                    case 0:\n                        options = options || {};\n                        _a = options.autoRegister, autoRegister = _a === void 0 ? false : _a, captchaCode = options.captchaCode, clientIp = options.clientIp, params = options.params, context = options.context, customData = options.customData;\n                        _c = (_b = this.options).encryptFunction;\n                        _d = [password];\n                        return [4 /*yield*/, this.publicKeyManager.getPublicKey()];\n                    case 1: return [4 /*yield*/, _c.apply(_b, _d.concat([_e.sent(), this.options.encryption]))];\n                    case 2:\n                        password = _e.sent();\n                        extraParams = null;\n                        if (customData) {\n                            extraParams = JSON.stringify(convertObjectToKeyValueList(customData));\n                        }\n                        else if (params) {\n                            extraParams = JSON.stringify(params);\n                        }\n                        extraContext = null;\n                        if (context) {\n                            extraContext = JSON.stringify(context);\n                        }\n                        return [4 /*yield*/, loginByUsername(this.graphqlClient, this.tokenProvider, {\n                                input: {\n                                    username: username,\n                                    password: password,\n                                    autoRegister: autoRegister,\n                                    captchaCode: captchaCode,\n                                    clientIp: clientIp,\n                                    params: extraParams,\n                                    context: extraContext\n                                }\n                            })];\n                    case 3:\n                        user = (_e.sent()).loginByUsername;\n                        if (user.customData) {\n                            // @ts-ignore\n                            user.customData = convertUdvToKeyValuePair(user.customData);\n                        }\n                        this.setCurrentUser(user);\n                        return [2 /*return*/, user];\n                }\n            });\n        });\n    };\n    /**\n     * @name loginByPhoneCode\n     * @name_zh 使用手机号验证码登录\n     * @description 使用手机号验证码登录。\n     *\n     *\n     * @param {string} phone 手机号\n     * @param {string} code 短信验证码\n     * @param {string} [options.clientIp] 客户端真实 IP，如果你在服务器端调用此接口，请务必将此参数设置为终端用户的真实 IP。\n     *\n     * @example\n     *\n     * authenticationClient.loginByPhoneCode(\n     *  '176xxxx7041',\n     *  '1234',\n     * )\n     *\n     *\n     * @returns {Promise<User>}\n     * @memberof AuthenticationClient\n     */\n    AuthenticationClient.prototype.loginByPhoneCode = function (phone, code, options) {\n        return __awaiter(this, void 0, void 0, function () {\n            var clientIp, params, context, customData, phoneCountryCode, extraParams, extraContext, user;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        options = options || {};\n                        clientIp = options.clientIp, params = options.params, context = options.context, customData = options.customData, phoneCountryCode = options.phoneCountryCode;\n                        extraParams = null;\n                        if (customData) {\n                            extraParams = JSON.stringify(convertObjectToKeyValueList(customData));\n                        }\n                        else if (params) {\n                            extraParams = JSON.stringify(params);\n                        }\n                        extraContext = null;\n                        if (context) {\n                            extraContext = JSON.stringify(context);\n                        }\n                        return [4 /*yield*/, loginByPhoneCode(this.graphqlClient, this.tokenProvider, {\n                                input: {\n                                    phone: phone,\n                                    code: code,\n                                    phoneCountryCode: phoneCountryCode,\n                                    clientIp: clientIp,\n                                    params: extraParams,\n                                    context: extraContext\n                                }\n                            })];\n                    case 1:\n                        user = (_a.sent()).loginByPhoneCode;\n                        if (user.customData) {\n                            // @ts-ignore\n                            user.customData = convertUdvToKeyValuePair(user.customData);\n                        }\n                        this.setCurrentUser(user);\n                        return [2 /*return*/, user];\n                }\n            });\n        });\n    };\n    /**\n     * @name loginByEmailCode\n     * @name_zh 使用邮箱号验证码登录\n     * @description 使用邮箱号验证码登录。\n     *\n     *\n     * @param {string} email 邮箱\n     * @param {string} code 邮箱验证码\n     * @param {string} [options.clientIp] 客户端真实 IP，如果你在服务器端调用此接口，请务必将此参数设置为终端用户的真实 IP。\n     *\n     * @example\n     *\n     * authenticationClient.loginByPhoneCode(\n     *  'sunxxxxx@authing.cn',\n     *  '1234',\n     * )\n     *\n     *\n     * @returns {Promise<User>}\n     * @memberof AuthenticationClient\n     */\n    AuthenticationClient.prototype.loginByEmailCode = function (email, code, options) {\n        var _a;\n        return __awaiter(this, void 0, void 0, function () {\n            var clientIp, params, context, customData, phoneCountryCode, extraParams, extraContext, url, user;\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        options = options || {};\n                        clientIp = options.clientIp, params = options.params, context = options.context, customData = options.customData, phoneCountryCode = options.phoneCountryCode;\n                        extraParams = null;\n                        if (customData) {\n                            extraParams = JSON.stringify(convertObjectToKeyValueList(customData));\n                        }\n                        else if (params) {\n                            extraParams = JSON.stringify(params);\n                        }\n                        extraContext = null;\n                        if (context) {\n                            extraContext = JSON.stringify(context);\n                        }\n                        url = ((_a = this.options.appHost) !== null && _a !== void 0 ? _a : \"\") + \"/api/v2/login/email-code\";\n                        return [4 /*yield*/, this.httpClient.request({\n                                method: 'POST',\n                                url: url,\n                                data: {\n                                    email: email,\n                                    code: code,\n                                    phoneCountryCode: phoneCountryCode,\n                                    clientIp: clientIp,\n                                    params: extraParams,\n                                    context: extraContext\n                                },\n                                unSetToken: true\n                            })];\n                    case 1:\n                        user = _b.sent();\n                        if (user.customData) {\n                            // @ts-ignore\n                            user.customData = convertUdvToKeyValuePair(user.customData);\n                        }\n                        this.setCurrentUser(user);\n                        return [2 /*return*/, user];\n                }\n            });\n        });\n    };\n    /**\n     * @name loginByPhonePassword\n     * @name_zh 使用手机号密码登录\n     * @description 使用手机号密码登录。\n     *\n     *\n     * @param {string} phone 手机号\n     * @param {string} password 密码\n     * @param {Object} [options]\n     * @param {string} [options.captchaCode] 图形验证码\n     * @param {string} [options.clientIp] 客户端真实 IP，如果你在服务器端调用此接口，请务必将此参数设置为终端用户的真实 IP。\n     *\n     * @example\n     *\n     * authenticationClient.loginByPhonePassword(\n     *  '176xxxx7041',\n     *  'passw0rd',\n     *  {\n     *    captchaCode: 'xj72'\n     *  }\n     * )\n     *\n     * @example\n     * authenticationClient.loginByPhonePassword('176xxxx7041', 'passw0rd')\n     *\n     *\n     * @returns {Promise<User>}\n     * @memberof AuthenticationClient\n     */\n    AuthenticationClient.prototype.loginByPhonePassword = function (phone, password, options) {\n        return __awaiter(this, void 0, void 0, function () {\n            var captchaCode, _a, autoRegister, clientIp, params, context, customData, _b, _c, _d, extraParams, extraContext, user;\n            return __generator(this, function (_e) {\n                switch (_e.label) {\n                    case 0:\n                        options = options || {};\n                        captchaCode = options.captchaCode, _a = options.autoRegister, autoRegister = _a === void 0 ? false : _a, clientIp = options.clientIp, params = options.params, context = options.context, customData = options.customData;\n                        _c = (_b = this.options).encryptFunction;\n                        _d = [password];\n                        return [4 /*yield*/, this.publicKeyManager.getPublicKey()];\n                    case 1: return [4 /*yield*/, _c.apply(_b, _d.concat([_e.sent(), this.options.encryption]))];\n                    case 2:\n                        password = _e.sent();\n                        extraParams = null;\n                        if (customData) {\n                            extraParams = JSON.stringify(convertObjectToKeyValueList(customData));\n                        }\n                        else if (params) {\n                            extraParams = JSON.stringify(params);\n                        }\n                        extraContext = null;\n                        if (context) {\n                            extraContext = JSON.stringify(context);\n                        }\n                        return [4 /*yield*/, loginByPhonePassword(this.graphqlClient, this.tokenProvider, {\n                                input: {\n                                    phone: phone,\n                                    password: password,\n                                    captchaCode: captchaCode,\n                                    autoRegister: autoRegister,\n                                    clientIp: clientIp,\n                                    params: extraParams,\n                                    context: extraContext\n                                }\n                            })];\n                    case 3:\n                        user = (_e.sent()).loginByPhonePassword;\n                        if (user.customData) {\n                            // @ts-ignore\n                            user.customData = convertUdvToKeyValuePair(user.customData);\n                        }\n                        this.setCurrentUser(user);\n                        return [2 /*return*/, user];\n                }\n            });\n        });\n    };\n    AuthenticationClient.prototype.loginBySubAccount = function (account, password, options) {\n        return __awaiter(this, void 0, void 0, function () {\n            var captchaCode, clientIp, _a, _b, _c, user;\n            return __generator(this, function (_d) {\n                switch (_d.label) {\n                    case 0:\n                        options = options || {};\n                        captchaCode = options.captchaCode, clientIp = options.clientIp;\n                        _b = (_a = this.options).encryptFunction;\n                        _c = [password];\n                        return [4 /*yield*/, this.publicKeyManager.getPublicKey()];\n                    case 1: return [4 /*yield*/, _b.apply(_a, _c.concat([_d.sent(), this.options.encryption]))];\n                    case 2:\n                        password = _d.sent();\n                        return [4 /*yield*/, loginBySubAccount(this.graphqlClient, this.tokenProvider, {\n                                account: account,\n                                password: password,\n                                captchaCode: captchaCode,\n                                clientIp: clientIp\n                            })];\n                    case 3:\n                        user = (_d.sent()).loginBySubAccount;\n                        this.setCurrentUser(user);\n                        return [2 /*return*/, user];\n                }\n            });\n        });\n    };\n    /**\n     * @name checkLoginStatus\n     * @name_zh 检测 Token 登录状态\n     * @description 检测 Token 登录状态\n     *\n     * @param {string} token 用户的登录凭证 token\n     *\n     * @example\n     *\n     * authenticationClient.checkLoginStatus('TOKEN')\n     *\n     * @returns {Promise<JwtTokenStatus>}\n     * @memberof AuthenticationClient\n     */\n    AuthenticationClient.prototype.checkLoginStatus = function (token) {\n        return __awaiter(this, void 0, void 0, function () {\n            var res;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, checkLoginStatus(this.graphqlClient, this.tokenProvider, {\n                            token: token\n                        })];\n                    case 1:\n                        res = _a.sent();\n                        return [2 /*return*/, res.checkLoginStatus];\n                }\n            });\n        });\n    };\n    /**\n     * @name sendEmail\n     * @name_zh 发送邮件\n     * @description 发送邮件\n     *\n     * @param {string} email 邮箱\n     * @param {EmailScene} scene 发送场景，可选值为 RESET_PASSWORD（发送重置密码邮件，邮件中包含验证码）、VerifyEmail（发送验证邮箱的邮件）、ChangeEmail（发送修改邮箱邮件，邮件中包含验证码）\n     *\n     * @example\n     *\n     * import { EmailScene } from \"authing-js-sdk\"\n     * authenticationClient.sendEmail('test@example.com', EmailScene.RESET_PASSWORD)\n     *\n     * @returns {Promise<CommonMessage>}\n     * @memberof AuthenticationClient\n     */\n    AuthenticationClient.prototype.sendEmail = function (email, scene) {\n        return __awaiter(this, void 0, void 0, function () {\n            var data;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, sendEmail(this.graphqlClient, this.tokenProvider, { email: email, scene: scene })];\n                    case 1:\n                        data = (_a.sent()).sendEmail;\n                        return [2 /*return*/, data];\n                }\n            });\n        });\n    };\n    /**\n     * @name resetPasswordByPhoneCode\n     * @name_zh 通过短信验证码重置密码\n     * @description 通过短信验证码重置密码，你需要先调用 sendSmsCode 接口发送重置密码邮件。\n     *\n     * @param {string} phone 手机号\n     * @param {string} code 验证码\n     * @param {string} newPassword 新的密码\n     *\n     * @example\n     *\n     * authenticationClient.resetPasswordByPhoneCode('176xxxx7041', '1234', 'passw0rd')\n     *\n     * @returns {Promise<CommonMessage>}\n     * @memberof AuthenticationClient\n     */\n    AuthenticationClient.prototype.resetPasswordByPhoneCode = function (phone, code, newPassword, phoneCountryCode) {\n        return __awaiter(this, void 0, void 0, function () {\n            var _a, _b, _c, data;\n            return __generator(this, function (_d) {\n                switch (_d.label) {\n                    case 0:\n                        _b = (_a = this.options).encryptFunction;\n                        _c = [newPassword];\n                        return [4 /*yield*/, this.publicKeyManager.getPublicKey()];\n                    case 1: return [4 /*yield*/, _b.apply(_a, _c.concat([_d.sent(), this.options.encryption]))];\n                    case 2:\n                        newPassword = _d.sent();\n                        return [4 /*yield*/, resetPassword(this.graphqlClient, this.tokenProvider, {\n                                phone: phone,\n                                code: code,\n                                newPassword: newPassword,\n                                phoneCountryCode: phoneCountryCode\n                            })];\n                    case 3:\n                        data = (_d.sent()).resetPassword;\n                        return [2 /*return*/, data];\n                }\n            });\n        });\n    };\n    /**\n     * @name resetPasswordByEmailCode\n     * @name_zh 通过邮件验证码重置密码\n     * @description 通过邮件验证码重置密码，你需要先调用 sendEmail 接口发送重置密码邮件。\n     *\n     * @param {string} phone 手机号\n     * @param {string} code 验证码\n     * @param {string} newPassword 新的密码\n     *\n     * @example\n     *\n     * authenticationClient.resetPasswordByEmailCode('test@example.com', '1234', 'passw0rd')\n     *\n     * @returns {Promise<CommonMessage>}\n     * @memberof AuthenticationClient\n     */\n    AuthenticationClient.prototype.resetPasswordByEmailCode = function (email, code, newPassword) {\n        return __awaiter(this, void 0, void 0, function () {\n            var _a, _b, _c, data;\n            return __generator(this, function (_d) {\n                switch (_d.label) {\n                    case 0:\n                        _b = (_a = this.options).encryptFunction;\n                        _c = [newPassword];\n                        return [4 /*yield*/, this.publicKeyManager.getPublicKey()];\n                    case 1: return [4 /*yield*/, _b.apply(_a, _c.concat([_d.sent(), this.options.encryption]))];\n                    case 2:\n                        newPassword = _d.sent();\n                        return [4 /*yield*/, resetPassword(this.graphqlClient, this.tokenProvider, {\n                                email: email,\n                                code: code,\n                                newPassword: newPassword\n                            })];\n                    case 3:\n                        data = (_d.sent()).resetPassword;\n                        return [2 /*return*/, data];\n                }\n            });\n        });\n    };\n    AuthenticationClient.prototype.resetPasswordByFirstLoginToken = function (params) {\n        return __awaiter(this, void 0, void 0, function () {\n            var token, password, _a, _b, _c, data;\n            return __generator(this, function (_d) {\n                switch (_d.label) {\n                    case 0:\n                        token = params.token, password = params.password;\n                        _b = (_a = this.options).encryptFunction;\n                        _c = [password];\n                        return [4 /*yield*/, this.publicKeyManager.getPublicKey()];\n                    case 1: return [4 /*yield*/, _b.apply(_a, _c.concat([_d.sent(), this.options.encryption]))];\n                    case 2:\n                        password = _d.sent();\n                        return [4 /*yield*/, resetPasswordByFirstLoginToken(this.graphqlClient, this.tokenProvider, {\n                                token: token,\n                                password: password\n                            })];\n                    case 3:\n                        data = (_d.sent()).resetPasswordByFirstLoginToken;\n                        return [2 /*return*/, data];\n                }\n            });\n        });\n    };\n    AuthenticationClient.prototype.resetPasswordByForceResetToken = function (params) {\n        return __awaiter(this, void 0, void 0, function () {\n            var token, newPassword, oldPassword, _a, _b, _c, _d, _e, _f, data;\n            return __generator(this, function (_g) {\n                switch (_g.label) {\n                    case 0:\n                        token = params.token, newPassword = params.newPassword, oldPassword = params.oldPassword;\n                        _b = (_a = this.options).encryptFunction;\n                        _c = [newPassword];\n                        return [4 /*yield*/, this.publicKeyManager.getPublicKey()];\n                    case 1: return [4 /*yield*/, _b.apply(_a, _c.concat([_g.sent(), this.options.encryption]))];\n                    case 2:\n                        newPassword = _g.sent();\n                        _e = (_d = this.options).encryptFunction;\n                        _f = [oldPassword];\n                        return [4 /*yield*/, this.publicKeyManager.getPublicKey()];\n                    case 3: return [4 /*yield*/, _e.apply(_d, _f.concat([_g.sent(), this.options.encryption]))];\n                    case 4:\n                        oldPassword = _g.sent();\n                        return [4 /*yield*/, resetPasswordByForceResetToken(this.graphqlClient, this.tokenProvider, {\n                                token: token,\n                                oldPassword: oldPassword,\n                                newPassword: newPassword\n                            })];\n                    case 5:\n                        data = (_g.sent()).resetPasswordByForceResetToken;\n                        return [2 /*return*/, data];\n                }\n            });\n        });\n    };\n    /**\n     * @name updateProfile\n     * @name_zh 修改用户资料\n     * @description 修改用户资料，此接口不能用于修改手机号、邮箱、密码，如果需要请调用 updatePhone、updateEmail、updatePassword 接口。\n     *\n     * @param {UpdateUserInput} updates 修改的用户资料\n     * @param {string} updates.username 用户名\n     * @param {string} updates.nickname 昵称\n     * @param {string} updates.photo 头像\n     * @param {string} updates.company 公司\n     * @param {string} updates.browser 浏览器\n     * @param {string} updates.device 设备\n     * @param {string} updates.lastIP 最近登录的 IP\n     * @param {string} updates.name Name\n     * @param {string} updates.givenName Given Name\n     * @param {string} updates.familyName Family Name\n     * @param {string} updates.middleName Middle Name\n     * @param {string} updates.profile Profile Url\n     * @param {string} updates.preferredUsername Preferred Name\n     * @param {string} updates.website 个人网站\n     * @param {string} updates.gender 性别, F 表示男性、W 表示女性、未知表示 U\n     * @param {string} updates.birthdate 生日\n     * @param {string} updates.zoneinfo 时区\n     * @param {string} updates.locale 语言\n     * @param {string} updates.address 地址\n     * @param {string} updates.streetAddress 街道地址\n     * @param {string} updates.locality\n     * @param {string} updates.region 地域\n     * @param {string} updates.postalCode 邮编\n     * @param {string} updates.city 城市\n     * @param {string} updates.province 省份\n     * @param {string} updates.country 国家\n     *\n     * @example\n     *\n     * authenticationClient.updateProfile({\n     *  nickname: \"Nick\",\n     *  lastIp: \"111.111.111.111\"\n     * })\n     *\n     * @returns {Promise<User>}\n     * @memberof AuthenticationClient\n     */\n    AuthenticationClient.prototype.updateProfile = function (updates, options) {\n        return __awaiter(this, void 0, void 0, function () {\n            var userId, _a, emailToken, phoneToken, updated;\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        userId = this.checkLoggedIn();\n                        _a = options || {}, emailToken = _a.emailToken, phoneToken = _a.phoneToken;\n                        if (updates && updates.password) {\n                            delete updates.password;\n                        }\n                        return [4 /*yield*/, updateUser(this.graphqlClient, this.tokenProvider, {\n                                id: userId,\n                                input: updates,\n                                emailToken: emailToken,\n                                phoneToken: phoneToken\n                            })];\n                    case 1:\n                        updated = (_b.sent()).updateUser;\n                        this.setCurrentUser(updated);\n                        return [2 /*return*/, updated];\n                }\n            });\n        });\n    };\n    /**\n     * @name updatePassword\n     * @name_zh 更新用户密码\n     * @description 更新用户密码\n     *\n     * @param {string} newPassword 新密码\n     * @param {string} [oldPassword] 旧密码，如果用户没有设置密码，可以不填。\n     *\n     * @example\n     *\n     * authenticationClient.updatePassword('passw0rd') // 由手机号、社会化登录等其他方式注册的，首次没有设置密码，oldPassword 留空。\n     *\n     * @example\n     *\n     * authenticationClient.updatePassword('passw0rd', 'oldPassw0rd') // 用户之前设置了密码\n     *\n     * @returns {Promise<User>}\n     * @memberof AuthenticationClient\n     */\n    AuthenticationClient.prototype.updatePassword = function (newPassword, oldPassword) {\n        return __awaiter(this, void 0, void 0, function () {\n            var _a, _b, _c, _d, _e, _f, _g, _h, user;\n            return __generator(this, function (_j) {\n                switch (_j.label) {\n                    case 0:\n                        _a = newPassword;\n                        if (!_a) return [3 /*break*/, 3];\n                        _c = (_b = this.options).encryptFunction;\n                        _d = [newPassword];\n                        return [4 /*yield*/, this.publicKeyManager.getPublicKey()];\n                    case 1: return [4 /*yield*/, _c.apply(_b, _d.concat([_j.sent(), this.options.encryption]))];\n                    case 2:\n                        _a = (_j.sent());\n                        _j.label = 3;\n                    case 3:\n                        newPassword = _a;\n                        _e = oldPassword;\n                        if (!_e) return [3 /*break*/, 6];\n                        _g = (_f = this.options).encryptFunction;\n                        _h = [oldPassword];\n                        return [4 /*yield*/, this.publicKeyManager.getPublicKey()];\n                    case 4: return [4 /*yield*/, _g.apply(_f, _h.concat([_j.sent(), this.options.encryption]))];\n                    case 5:\n                        _e = (_j.sent());\n                        _j.label = 6;\n                    case 6:\n                        oldPassword = _e;\n                        return [4 /*yield*/, updatePassword(this.graphqlClient, this.tokenProvider, {\n                                newPassword: newPassword,\n                                oldPassword: oldPassword\n                            })];\n                    case 7:\n                        user = (_j.sent()).updatePassword;\n                        return [2 /*return*/, user];\n                }\n            });\n        });\n    };\n    /**\n     * @name updatePhone\n     * @name_zh 更新用户手机号\n     * @description 更新用户手机号。和修改邮箱一样，默认情况下，如果用户当前已经绑定了手机号，需要同时验证原有手机号（目前账号绑定的手机号）和当前邮箱（将要绑定的手机号）。\n     * 也就是说，用户 A 当前绑定的手机号为 15888888888，想修改为 15899999999，那么就需要同时验证这两个手机号。\n     * 开发者也可以选择不开启 “验证原有手机号“ ，可以在 Authing 控制台 的 设置目录下的安全信息模块进行关闭。\n     * 用户首次绑定手机号请使用 bindPhone 接口。\n     *\n     * @param {string} phone 新手机号\n     * @param {string} phoneCode 新手机号的验证码\n     * @param {string} [oldPhone] 旧手机号\n     * @param {string} [oldPhoneCode] 旧手机号的验证码\n     *\n     * @example\n     *\n     * authenticationClient.updatePhone('176xxxx7041', '1234') // 关闭了“验证原有手机号“选项\n     *\n     * @example\n     *\n     * authenticationClient.updatePhone('176xxxx7041', '1234', '156xxxx9876', '1234') // 开启了“验证原有手机号“选项\n     *\n     *\n     * @returns {Promise<User>}\n     * @memberof AuthenticationClient\n     */\n    AuthenticationClient.prototype.updatePhone = function (phone, phoneCode, oldPhone, oldPhoneCode, phoneCountryCode, oldPhoneCountryCode) {\n        return __awaiter(this, void 0, void 0, function () {\n            var user;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, updatePhone(this.graphqlClient, this.tokenProvider, {\n                            phone: phone,\n                            phoneCode: phoneCode,\n                            oldPhone: oldPhone,\n                            oldPhoneCode: oldPhoneCode,\n                            phoneCountryCode: phoneCountryCode,\n                            oldPhoneCountryCode: oldPhoneCountryCode\n                        })];\n                    case 1:\n                        user = (_a.sent()).updatePhone;\n                        return [2 /*return*/, user];\n                }\n            });\n        });\n    };\n    /**\n     * @name updateEmail\n     * @name_zh 更新用户邮箱\n     * @description 如果用户已经绑定了邮箱，默认情况下，需要同时验证原有邮箱（目前账号绑定的邮箱）和当前邮箱（将要绑定的邮箱）。也就是说，用户 A 当前绑定的邮箱为 123456@qq.com，想修改为 1234567@qq.com，那么就需要同时验证这两个邮箱。\n     * 开发者也可以选择不开启 “验证原有邮箱“ ，可以在 Authing 控制台 的 设置目录下的安全信息模块进行关闭。\n     * 用户首次绑定手机号请使用 bindEmail 接口。\n     *\n     * @param {string} email 新邮箱\n     * @param {string} emailCode 新邮箱的验证码\n     * @param {string} [oldEmail] 旧邮箱\n     * @param {string} [oldEmailCode] 旧邮箱的验证码\n     *\n     * @example\n     *\n     * authenticationClient.updateEmail('test@example.com', '1234') // 关闭了“验证原有邮箱“选项\n     *\n     * @example\n     *\n     * authenticationClient.updateEmail('test@example.com', '1234', 'test2@example.com', '1234') // 开启了“验证原有邮箱“选项\n     *\n     *\n     * @returns {Promise<User>}\n     * @memberof AuthenticationClient\n     */\n    AuthenticationClient.prototype.updateEmail = function (email, emailCode, oldEmail, oldEmailCode) {\n        return __awaiter(this, void 0, void 0, function () {\n            var user;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, updateEmail(this.graphqlClient, this.tokenProvider, {\n                            email: email,\n                            emailCode: emailCode,\n                            oldEmail: oldEmail,\n                            oldEmailCode: oldEmailCode\n                        })];\n                    case 1:\n                        user = (_a.sent()).updateEmail;\n                        return [2 /*return*/, user];\n                }\n            });\n        });\n    };\n    /**\n     * @name refreshToken\n     * @name_zh 刷新当前用户的 token\n     * @description 刷新当前用户的 token，调用此接口要求先登录。\n     *\n     * @example\n     *\n     * authenticationClient.updateEmail()\n     *\n     * @returns {Promise<RefreshToken>}\n     * @memberof AuthenticationClient\n     */\n    AuthenticationClient.prototype.refreshToken = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var data;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, refreshToken(this.graphqlClient, this.tokenProvider, {})];\n                    case 1:\n                        data = (_a.sent()).refreshToken;\n                        this.setToken(data.token);\n                        return [2 /*return*/, data];\n                }\n            });\n        });\n    };\n    /**\n     * @name linkAccount\n     * @name_zh 关联账号\n     * @description 将社交账号绑定到主账号（手机号、邮箱账号）。\n     *\n     * @param {Object} options\n     * @param {string} options.primaryUserToken 主账号 Token\n     * @param {string} options.secondaryUserToken 社交账号 Token\n     *\n     * @example\n     *\n     * authenticationClient.linkAccount({ primaryUserToken: '', secondaryUserToken: '' })\n     *\n     * @returns {{code: 200, message: \"绑定成功\"}}\n     * @memberof AuthenticationClient\n     */\n    AuthenticationClient.prototype.linkAccount = function (options) {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.httpClient.request({\n                            method: 'POST',\n                            url: this.baseClient.appHost + \"/api/v2/users/link\",\n                            data: {\n                                primaryUserToken: options.primaryUserToken,\n                                secondaryUserToken: options.secondaryUserToken\n                            }\n                        })];\n                    case 1:\n                        _a.sent();\n                        return [2 /*return*/, { code: 200, message: '绑定成功' }];\n                }\n            });\n        });\n    };\n    /**\n     * @name unLinkAccount\n     * @name_zh 解除账号绑定\n     * @description 将社交账号从主账号（手机号、邮箱账号）解绑。\n     *\n     * @param {Object} options\n     * @param {string} options.primaryUserToken 主账号 Token\n     * @param {string} options.provider 社交账号的提供商名称\n     *\n     * @example\n     *\n     * authenticationClient.unLinkAccount({ primaryUserToken: '', provider: 'wechat:pc' })\n     *\n     * @returns {{code: 200, message: \"解绑成功\"}}\n     * @memberof AuthenticationClient\n     */\n    AuthenticationClient.prototype.unLinkAccount = function (options) {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.httpClient.request({\n                            method: 'POST',\n                            url: this.baseClient.appHost + \"/api/v2/users/unlink\",\n                            data: {\n                                primaryUserToken: options.primaryUserToken,\n                                provider: options.provider\n                            }\n                        })];\n                    case 1:\n                        _a.sent();\n                        return [2 /*return*/, { code: 200, message: '解绑成功' }];\n                }\n            });\n        });\n    };\n    /**\n     * @name bindPhone\n     * @name_zh 绑定手机号\n     * @description 用户初次绑定手机号，如果需要修改手机号请使用 updatePhone 接口。\n     *\n     * @param {string} phone\n     * @param {string} phoneCode\n     *\n     * @example\n     *\n     * authenticationClient.bindPhone('176xxxx7041', '1234')\n     *\n     * @returns {Promise<User>}\n     * @memberof AuthenticationClient\n     */\n    AuthenticationClient.prototype.bindPhone = function (phone, phoneCode, phoneCountryCode) {\n        return __awaiter(this, void 0, void 0, function () {\n            var user;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, bindPhone(this.graphqlClient, this.tokenProvider, {\n                            phone: phone,\n                            phoneCode: phoneCode,\n                            phoneCountryCode: phoneCountryCode\n                        })];\n                    case 1:\n                        user = (_a.sent()).bindPhone;\n                        this.setCurrentUser(user);\n                        return [2 /*return*/, user];\n                }\n            });\n        });\n    };\n    /**\n     * @name unbindPhone\n     * @name_zh 解绑手机号\n     * @description 用户解绑手机号\n     *\n     * @example\n     *\n     * authenticationClient.unbindPhone()\n     *\n     * @returns {Promise<User>}\n     * @memberof AuthenticationClient\n     */\n    AuthenticationClient.prototype.unbindPhone = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var user;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, unbindPhone(this.graphqlClient, this.tokenProvider, {})];\n                    case 1:\n                        user = (_a.sent()).unbindPhone;\n                        this.setCurrentUser(user);\n                        return [2 /*return*/, user];\n                }\n            });\n        });\n    };\n    /**\n     * @name bindEmail\n     * @name_zh 绑定邮箱号\n     * @description 用户邮箱号\n     *\n     * @param {string} email\n     * @param {string} emailCode\n     *\n     * @example\n     *\n     * authenticationClient.bindEmail('test@example.com', '1234')\n     *\n     * @returns {Promise<User>}\n     * @memberof AuthenticationClient\n     */\n    AuthenticationClient.prototype.bindEmail = function (email, emailCode) {\n        return __awaiter(this, void 0, void 0, function () {\n            var user;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, bindEmail(this.graphqlClient, this.tokenProvider, {\n                            email: email,\n                            emailCode: emailCode\n                        })];\n                    case 1:\n                        user = (_a.sent()).bindEmail;\n                        this.setCurrentUser(user);\n                        return [2 /*return*/, user];\n                }\n            });\n        });\n    };\n    /**\n     * @name unbindEmail\n     * @name_zh 解绑邮箱号\n     * @description 用户解绑邮箱号\n     *\n     * @example\n     *\n     * authenticationClient.unbindPhone()\n     *\n     * @returns {Promise<User>}\n     * @memberof AuthenticationClient\n     */\n    AuthenticationClient.prototype.unbindEmail = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var user;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, unbindEmail(this.graphqlClient, this.tokenProvider, {})];\n                    case 1:\n                        user = (_a.sent()).unbindEmail;\n                        this.setCurrentUser(user);\n                        return [2 /*return*/, user];\n                }\n            });\n        });\n    };\n    /**\n     * @name getCurrentUser\n     * @name_zh 获取当前登录的用户信息\n     * @description 获取当前登录的用户信息\n     *\n     * @example\n     *\n     * authenticationClient.getCurrentUser()\n     *\n     * @returns {Promise<User>}\n     * @memberof AuthenticationClient\n     */\n    AuthenticationClient.prototype.getCurrentUser = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var data, _a;\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        _b.trys.push([0, 2, , 3]);\n                        return [4 /*yield*/, user(this.graphqlClient, this.tokenProvider, {})];\n                    case 1:\n                        data = (_b.sent()).user;\n                        if (data.customData) {\n                            // @ts-ignore\n                            data.customData = convertUdvToKeyValuePair(data.customData);\n                        }\n                        this.setCurrentUser(data);\n                        return [2 /*return*/, data];\n                    case 2:\n                        _a = _b.sent();\n                        return [2 /*return*/, null];\n                    case 3: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * @name logout\n     * @name_zh 退出登录\n     * @description 退出登录，清空 localStorage 里的 user 和 token\n     *\n     * @example\n     *\n     * authenticationClient.logout()\n     *\n     * @returns {null}\n     * @memberof AuthenticationClient\n     */\n    AuthenticationClient.prototype.logout = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.httpClient.request({\n                            method: 'GET',\n                            url: this.baseClient.appHost + \"/api/v2/logout?app_id=\" + this.options.appId,\n                            withCredentials: true\n                        })];\n                    case 1:\n                        _a.sent();\n                        this.tokenProvider.clearUser();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * @name listUdv\n     * @name_zh 获取当前用户的自定义数据列表\n     * @description 获取当前用户的自定义数据列表\n     * @deprecated use getUdfValue instead\n     *\n     * @example\n     *\n     * authenticationClient.listUdv()\n     *\n     * @returns {Promise<Array<UserDefinedData>>}\n     * @memberof AuthenticationClient\n     */\n    AuthenticationClient.prototype.listUdv = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var userId, list;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        userId = this.checkLoggedIn();\n                        return [4 /*yield*/, udv(this.graphqlClient, this.tokenProvider, {\n                                targetType: UdfTargetType.User,\n                                targetId: userId\n                            })];\n                    case 1:\n                        list = (_a.sent()).udv;\n                        return [2 /*return*/, convertUdv(list)];\n                }\n            });\n        });\n    };\n    /**\n     * @name setUdv\n     * @name_zh 添加自定义数据\n     * @description 添加自定义数据\n     *\n     * @param {string} key 自定义字段的 key\n     * @param {any} value 自定义数据的值，值的类型必须要和用户池定义的自定义字段类型一致。\n     *\n     * @example\n     *\n     * authenticationClient.setUdv('school', '清华大学') // 要求用户必须定义了 school 这个字段。\n     *\n     * @returns {Promise<Array<UserDefinedData>>}\n     * @memberof AuthenticationClient\n     */\n    AuthenticationClient.prototype.setUdv = function (key, value) {\n        return __awaiter(this, void 0, void 0, function () {\n            var userId, list;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        userId = this.checkLoggedIn();\n                        value = JSON.stringify(value);\n                        return [4 /*yield*/, setUdv(this.graphqlClient, this.tokenProvider, {\n                                targetType: UdfTargetType.User,\n                                targetId: userId,\n                                key: key,\n                                value: value\n                            })];\n                    case 1:\n                        list = (_a.sent()).setUdv;\n                        return [2 /*return*/, convertUdv(list)];\n                }\n            });\n        });\n    };\n    /**\n     * @name removeUdv\n     * @name_zh 删除自定义数据\n     * @description 删除自定义数据\n     *\n     * @param key 自定义字段的 key\n     *\n     * @example\n     *\n     * authenticationClient.removeUdv('school')\n     *\n     *\n     * @returns {Promise<Array<UserDefinedData>>}\n     * @memberof AuthenticationClient\n     */\n    AuthenticationClient.prototype.removeUdv = function (key) {\n        return __awaiter(this, void 0, void 0, function () {\n            var userId, list;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        userId = this.checkLoggedIn();\n                        return [4 /*yield*/, removeUdv(this.graphqlClient, this.tokenProvider, {\n                                targetType: UdfTargetType.User,\n                                targetId: userId,\n                                key: key\n                            })];\n                    case 1:\n                        list = (_a.sent()).removeUdv;\n                        return [2 /*return*/, convertUdv(list)];\n                }\n            });\n        });\n    };\n    /**\n     * @name listOrg\n     * @name_zh 获取用户所在组织机构\n     * @description 获取用户所在的组织机构立碑，以及他所属的节点在此组织机构内的完整路径。\n     *\n     * @example\n     *\n     * const data = await authenticationClient.listOrgs();\n     *\n     * @returns {Promise<UserOrgList>}\n     *\n     * @memberof AuthenticationClient\n     */\n    AuthenticationClient.prototype.listOrgs = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.httpClient.request({\n                            method: 'GET',\n                            url: this.baseClient.appHost + \"/api/v2/users/me/orgs\"\n                        })];\n                    case 1: return [2 /*return*/, _a.sent()];\n                }\n            });\n        });\n    };\n    /**\n     * @description 获取用户\n     *\n     */\n    AuthenticationClient.prototype.listDepartments = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var userId, departments;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        userId = this.checkLoggedIn();\n                        return [4 /*yield*/, getUserDepartments(this.graphqlClient, this.tokenProvider, {\n                                id: userId\n                            })];\n                    case 1:\n                        departments = (_a.sent()).user.departments;\n                        return [2 /*return*/, departments];\n                }\n            });\n        });\n    };\n    /**\n     * @name loginByLdap\n     * @name_zh 使用 LDAP 用户名登录\n     * @description 使用 LDAP 用户名登录。\n     *\n     * 如果你的用户池配置了登录失败检测，当同一  IP 下登录多次失败的时候会要求用户输入图形验证码（code 为 2000)。\n     *\n     * @param {string} username 用户名\n     * @param {string} password 密码\n     * @param {Object} [options]\n     * @param {boolean} [options.autoRegister] 是否自动注册。如果检测到用户不存在，会根据登录账密自动创建一个账号。\n     * @param {string} [options.captchaCode] 图形验证码\n     * @param {string} [options.clientIp] 客户端真实 IP，如果你在服务器端调用此接口，请务必将此参数设置为终端用户的真实 IP。\n     *\n     *\n     * @example\n     * const authenticationClient = new AuthenticationClient({\n     *   appId: '应用 ID'\n     * })\n     *\n     * authenticationClient.loginByLdap(\n     *  'admin',\n     *  'admin',\n     * )\n     *\n     *\n     * @returns {Promise<User>}\n     * @memberof AuthenticationClient\n     */\n    AuthenticationClient.prototype.loginByLdap = function (username, password, options) {\n        return __awaiter(this, void 0, void 0, function () {\n            var clientIp, withCustomData, api, user;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        options = options || {};\n                        clientIp = options.clientIp, withCustomData = options.withCustomData;\n                        api = this.baseClient.appHost + \"/api/v2/ldap/verify-user\";\n                        return [4 /*yield*/, this.httpClient.request({\n                                method: 'POST',\n                                url: api,\n                                data: {\n                                    username: username,\n                                    password: password,\n                                    clientIp: clientIp,\n                                    withCustomData: withCustomData\n                                }\n                            })];\n                    case 1:\n                        user = _a.sent();\n                        this.setCurrentUser(user);\n                        return [2 /*return*/, user];\n                }\n            });\n        });\n    };\n    /**\n     * @name loginByAd\n     * @name_zh 使用 AD 用户名登录\n     * @description 使用 AD 用户名登录。\n     *\n     * @param {string} username 用户名\n     * @param {string} password 密码\n     *\n     *\n     * @example\n     * const authenticationClient = new AuthenticationClient({\n     *   appId: '应用 ID'\n     * })\n     *\n     * authenticationClient.loginByAd(\n     *  'admin',\n     *  'admin',\n     * )\n     *\n     * @returns {Promise<User>}\n     * @memberof AuthenticationClient\n     */\n    AuthenticationClient.prototype.loginByAd = function (username, password, options) {\n        return __awaiter(this, void 0, void 0, function () {\n            var clientIp, withCustomData, firstLevelDomain, websocketHost, api, user;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        options = options || {};\n                        clientIp = options.clientIp, withCustomData = options.withCustomData;\n                        firstLevelDomain = new URL(this.baseClient.appHost).hostname\n                            .split('.')\n                            .slice(1)\n                            .join('.');\n                        websocketHost = this.options.websocketHost || \"https://ws.\" + firstLevelDomain;\n                        api = websocketHost + \"/api/v2/ad/verify-user\";\n                        return [4 /*yield*/, this.httpClient.request({\n                                method: 'POST',\n                                url: api,\n                                data: {\n                                    username: username,\n                                    password: password,\n                                    clientIp: clientIp,\n                                    withCustomData: withCustomData\n                                }\n                            })];\n                    case 1:\n                        user = _a.sent();\n                        this.setCurrentUser(user);\n                        return [2 /*return*/, user];\n                }\n            });\n        });\n    };\n    /**\n     * @description 上传图片\n     */\n    AuthenticationClient.prototype.uploadPhoto = function (accept, cb) {\n        accept = accept || 'image/*';\n        var authing = this;\n        uploadFile({\n            accept: accept,\n            url: this.baseClient.appHost + \"/api/v2/upload?folder=avatar\"\n        })\n            .then(function (_a) {\n            var url = _a.url;\n            return cb(url);\n        })\n            .catch(function (_a) {\n            var code = _a.code, message = _a.message;\n            return authing.options.onError(code, message);\n        });\n    };\n    /**\n     * @deprecated use uploadAvatar instead\n     * @description 更新用户头像\n     */\n    AuthenticationClient.prototype.updateAvatar = function (options) {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.uploadAvatar(options)];\n                    case 1: return [2 /*return*/, _a.sent()];\n                }\n            });\n        });\n    };\n    /**\n     * @description 一键上传图片并更新用户头像\n     *\n     * @param {Object} options\n     * @param {string} options.accept 支持的图片格式，默认为 'image/*'\n     *\n     * @example\n     * const authenticationClient = new AuthenticationClient({\n     *   appId: 'APP_ID',\n     *   appHost: 'https://xxx.authing.cn'\n     * })\n     *\n     * // 会自动打开浏览器文件上传框，并自动完成图片文件上传 CDN、修改用户头像操作。\n     * authenticationClient.uploadAvatar()\n     *\n     * // 只支持 png 格式图片\n     * authenticationClient.uploadAvatar({\n     *   accept: '.png'\n     * })\n     *\n     * @returns\n     */\n    AuthenticationClient.prototype.uploadAvatar = function (options) {\n        return __awaiter(this, void 0, void 0, function () {\n            var accept, task, src, user;\n            var _this = this;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        accept = (options || {}).accept;\n                        this.checkLoggedIn();\n                        task = new Promise(function (resolve) {\n                            _this.uploadPhoto(accept, function (src) {\n                                resolve(src);\n                            });\n                        });\n                        return [4 /*yield*/, task];\n                    case 1:\n                        src = _a.sent();\n                        return [4 /*yield*/, this.updateProfile({ photo: src })];\n                    case 2:\n                        user = _a.sent();\n                        this.setCurrentUser(user);\n                        return [2 /*return*/, user];\n                }\n            });\n        });\n    };\n    /**\n     * @description 获取当前用户的所有自定义数据\n     *\n     */\n    AuthenticationClient.prototype.getUdfValue = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var userId, list;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        userId = this.checkLoggedIn();\n                        return [4 /*yield*/, udv(this.graphqlClient, this.tokenProvider, {\n                                targetType: UdfTargetType.User,\n                                targetId: userId\n                            })];\n                    case 1:\n                        list = (_a.sent()).udv;\n                        return [2 /*return*/, convertUdvToKeyValuePair(list)];\n                }\n            });\n        });\n    };\n    /**\n     * @description 设置自定义字段值\n     *\n     */\n    AuthenticationClient.prototype.setUdfValue = function (data) {\n        return __awaiter(this, void 0, void 0, function () {\n            var userId, result;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (Object.keys(data).length === 0) {\n                            throw new Error('empty udf value list');\n                        }\n                        userId = this.checkLoggedIn();\n                        return [4 /*yield*/, setUdvBatch(this.graphqlClient, this.tokenProvider, {\n                                targetType: UdfTargetType.User,\n                                targetId: userId,\n                                udvList: Object.keys(data).map(function (key) { return ({\n                                    key: key,\n                                    value: JSON.stringify(data[key])\n                                }); })\n                            })];\n                    case 1:\n                        result = (_a.sent()).setUdvBatch;\n                        return [2 /*return*/, result];\n                }\n            });\n        });\n    };\n    /**\n     * @description 删除用户自定义数据\n     */\n    AuthenticationClient.prototype.removeUdfValue = function (key) {\n        return __awaiter(this, void 0, void 0, function () {\n            var userId;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        userId = this.checkLoggedIn();\n                        return [4 /*yield*/, removeUdv(this.graphqlClient, this.tokenProvider, {\n                                targetType: UdfTargetType.User,\n                                targetId: userId,\n                                key: key\n                            })];\n                    case 1:\n                        _a.sent();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * @name getSecurityLevel\n     * @name_zh 用户安全等级\n     * @description 获取用户的安全等级评分\n     *\n     * @example\n     *\n     * const data = await authenticationClient.getSecurityLevel();\n     *\n     * @returns {Promise<SecurityLevel>}\n     *\n     * @memberof AuthenticationClient\n     */\n    AuthenticationClient.prototype.getSecurityLevel = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.httpClient.request({\n                            method: 'GET',\n                            url: this.baseClient.appHost + \"/api/v2/users/me/security-level\"\n                        })];\n                    case 1: return [2 /*return*/, _a.sent()];\n                }\n            });\n        });\n    };\n    /**\n     * @description 获取用户被授权的所有资源\n     *\n     * @param userId\n     * @param namespace\n     */\n    AuthenticationClient.prototype.listAuthorizedResources = function (namespace, options) {\n        return __awaiter(this, void 0, void 0, function () {\n            var userId, resourceType, user, _a, list, totalCount;\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        userId = this.checkLoggedIn();\n                        resourceType = (options || {}).resourceType;\n                        return [4 /*yield*/, listUserAuthorizedResources(this.graphqlClient, this.tokenProvider, {\n                                id: userId,\n                                namespace: namespace,\n                                resourceType: resourceType\n                            })];\n                    case 1:\n                        user = (_b.sent()).user;\n                        if (!user) {\n                            throw new Error('用户不存在');\n                        }\n                        _a = user.authorizedResources, list = _a.list, totalCount = _a.totalCount;\n                        list = formatAuthorizedResources(list);\n                        return [2 /*return*/, {\n                                list: list,\n                                totalCount: totalCount\n                            }];\n                }\n            });\n        });\n    };\n    /**\n     * @description 检查用户是否存在\n     */\n    AuthenticationClient.prototype.isUserExists = function (options) {\n        return __awaiter(this, void 0, void 0, function () {\n            var username, email, phone, externalId, data;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        username = options.username, email = options.email, phone = options.phone, externalId = options.externalId;\n                        return [4 /*yield*/, isUserExists(this.graphqlClient, this.tokenProvider, {\n                                username: username,\n                                email: email,\n                                phone: phone,\n                                externalId: externalId\n                            })];\n                    case 1:\n                        data = (_a.sent()).isUserExists;\n                        return [2 /*return*/, data];\n                }\n            });\n        });\n    };\n    /**\n     * @name computedPasswordSecurityLevel\n     * @name_zh 计算密码安全等级\n     * @description 计算密码安全等级\n     *\n     * @example\n     *\n     * const data = authenticationClient.computedPasswordSecurityLevel('xxxxxxxx');\n     *\n     * @returns {PasswordSecurityLevel}\n     *\n     * @memberof AuthenticationClient\n     */\n    AuthenticationClient.prototype.computedPasswordSecurityLevel = function (password) {\n        if (typeof password !== 'string') {\n            throw 'password must be a `string`';\n        }\n        var highLevel = new RegExp(/^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)[^]{12,}$/g);\n        var middleLevel = new RegExp(/^(?=.*[a-zA-Z])(?=.*\\d)[^]{8,}$/g);\n        if (password.match(highLevel) !== null) {\n            return PasswordSecurityLevel.HIGH;\n        }\n        if (password.match(middleLevel) !== null) {\n            return PasswordSecurityLevel.MIDDLE;\n        }\n        return PasswordSecurityLevel.LOW;\n    };\n    AuthenticationClient.prototype._generateTokenRequest = function (params) {\n        var ret = {};\n        // 删掉所有 undefined 的 kv\n        Object.keys(params).map(function (key) {\n            if (typeof params[key] !== 'undefined') {\n                ret[key] = params[key];\n            }\n        });\n        var p = new URLSearchParams(ret);\n        return p.toString();\n    };\n    AuthenticationClient.prototype._generateBasicAuthToken = function (appId, secret) {\n        var id = appId || this.options.appId;\n        var s = secret || this.options.secret;\n        var token = 'Basic ' + Buffer.from(id + ':' + s).toString('base64');\n        return token;\n    };\n    /**\n     * @param {string} code 授权码 code\n     * @param {string} codeVerifier 校验码 codeVerifier\n     */\n    AuthenticationClient.prototype._getAccessTokenByCodeWithClientSecretPost = function (code, codeVerifier) {\n        return __awaiter(this, void 0, void 0, function () {\n            var qstr, api, tokenSet;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        qstr = this._generateTokenRequest({\n                            client_id: this.options.appId,\n                            client_secret: this.options.secret,\n                            grant_type: 'authorization_code',\n                            code: code,\n                            redirect_uri: this.options.redirectUri,\n                            code_verifier: codeVerifier\n                        });\n                        api = '';\n                        if (this.options.protocol === 'oidc') {\n                            api = this.baseClient.appHost + \"/oidc/token\";\n                        }\n                        else if (this.options.protocol === 'oauth') {\n                            api = this.baseClient.appHost + \"/oauth/token\";\n                        }\n                        return [4 /*yield*/, this.naiveHttpClient.request({\n                                method: 'POST',\n                                url: api,\n                                data: qstr,\n                                headers: {\n                                    'Content-Type': 'application/x-www-form-urlencoded'\n                                }\n                            })];\n                    case 1:\n                        tokenSet = _a.sent();\n                        return [2 /*return*/, tokenSet];\n                }\n            });\n        });\n    };\n    /**\n     * @param {string} code 授权码 code\n     * @param {string} codeVerifier 校验码 codeVerifier\n     */\n    AuthenticationClient.prototype._getAccessTokenByCodeWithClientSecretBasic = function (code, codeVerifier) {\n        return __awaiter(this, void 0, void 0, function () {\n            var api, qstr, tokenSet;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        api = '';\n                        if (this.options.protocol === 'oidc') {\n                            api = this.baseClient.appHost + \"/oidc/token\";\n                        }\n                        else if (this.options.protocol === 'oauth') {\n                            api = this.baseClient.appHost + \"/oauth/token\";\n                        }\n                        qstr = this._generateTokenRequest({\n                            grant_type: 'authorization_code',\n                            code: code,\n                            redirect_uri: this.options.redirectUri,\n                            code_verifier: codeVerifier\n                        });\n                        return [4 /*yield*/, this.naiveHttpClient.request({\n                                data: qstr,\n                                method: 'POST',\n                                url: api,\n                                headers: {\n                                    Authorization: this._generateBasicAuthToken()\n                                }\n                            })];\n                    case 1:\n                        tokenSet = _a.sent();\n                        return [2 /*return*/, tokenSet];\n                }\n            });\n        });\n    };\n    /**\n     * @param {string} code 授权码 code\n     * @param {string} codeVerifier 校验码 codeVerifier\n     */\n    AuthenticationClient.prototype._getAccessTokenByCodeWithNone = function (code, codeVerifier) {\n        return __awaiter(this, void 0, void 0, function () {\n            var api, qstr, tokenSet;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        api = '';\n                        if (this.options.protocol === 'oidc') {\n                            api = this.baseClient.appHost + \"/oidc/token\";\n                        }\n                        else if (this.options.protocol === 'oauth') {\n                            api = this.baseClient.appHost + \"/oauth/token\";\n                        }\n                        qstr = this._generateTokenRequest({\n                            client_id: this.options.appId,\n                            grant_type: 'authorization_code',\n                            code: code,\n                            redirect_uri: this.options.redirectUri,\n                            code_verifier: codeVerifier\n                        });\n                        return [4 /*yield*/, this.naiveHttpClient.request({\n                                method: 'POST',\n                                url: api,\n                                data: qstr\n                            })];\n                    case 1:\n                        tokenSet = _a.sent();\n                        return [2 /*return*/, tokenSet];\n                }\n            });\n        });\n    };\n    AuthenticationClient.prototype.getAccessTokenByCode = function (code, options) {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (!['oauth', 'oidc'].includes(this.options.protocol)) {\n                            throw new Error('初始化 AuthenticationClient 时传入的 protocol 参数必须为 oauth 或 oidc，请检查参数');\n                        }\n                        if (!this.options.secret &&\n                            this.options.tokenEndPointAuthMethod !== 'none') {\n                            throw new Error('请在初始化 AuthenticationClient 时传入 appId 和 secret 参数');\n                        }\n                        if (!(this.options.tokenEndPointAuthMethod === 'client_secret_post')) return [3 /*break*/, 2];\n                        return [4 /*yield*/, this._getAccessTokenByCodeWithClientSecretPost(code, options === null || options === void 0 ? void 0 : options.codeVerifier)];\n                    case 1: return [2 /*return*/, _a.sent()];\n                    case 2:\n                        if (!(this.options.tokenEndPointAuthMethod === 'client_secret_basic')) return [3 /*break*/, 4];\n                        return [4 /*yield*/, this._getAccessTokenByCodeWithClientSecretBasic(code, options === null || options === void 0 ? void 0 : options.codeVerifier)];\n                    case 3: return [2 /*return*/, _a.sent()];\n                    case 4:\n                        if (!(this.options.tokenEndPointAuthMethod === 'none')) return [3 /*break*/, 6];\n                        return [4 /*yield*/, this._getAccessTokenByCodeWithNone(code, options === null || options === void 0 ? void 0 : options.codeVerifier)];\n                    case 5: return [2 /*return*/, _a.sent()];\n                    case 6: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    AuthenticationClient.prototype.generateCodeChallenge = function () {\n        return generateRandomString(43);\n    };\n    AuthenticationClient.prototype.getCodeChallengeDigest = function (options) {\n        if (!options) {\n            throw new Error('请提供 options 参数，options.codeChallenge 为一个长度大于等于 43 的字符串，options.method 可选值为 S256、plain');\n        }\n        if (!options.codeChallenge) {\n            throw new Error('请提供 options.codeChallenge，值为一个长度大于等于 43 的字符串');\n        }\n        var _a = options.method, method = _a === void 0 ? 'S256' : _a;\n        if (method === 'S256') {\n            // url safe base64\n            return sha256(options.codeChallenge)\n                .toString(CryptoJS.enc.Base64)\n                .replace(/\\+/g, '-')\n                .replace(/\\//g, '_')\n                .replace(/=/g, '');\n        }\n        if (method === 'plain') {\n            return options.codeChallenge;\n        }\n        throw new Error('不支持的 options.method，可选值为 S256、plain');\n    };\n    AuthenticationClient.prototype.getAccessTokenByClientCredentials = function (scope, options) {\n        return __awaiter(this, void 0, void 0, function () {\n            var i, s, qstr, api, tokenSet;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (!scope) {\n                            throw new Error('请传入 scope 参数，请看文档：https://docs.authing.cn/v2/guides/authorization/m2m-authz.html');\n                        }\n                        if (!options) {\n                            throw new Error('请在调用本方法时传入 { accessKey: string, accessSecret: string }，请看文档：https://docs.authing.cn/v2/guides/authorization/m2m-authz.html'\n                            // '请在初始化 AuthenticationClient 时传入 appId 和 secret 参数或者在调用本方法时传入 { accessKey: string, accessSecret: string }，请看文档：https://docs.authing.cn/v2/guides/authorization/m2m-authz.html'\n                            );\n                        }\n                        i = (options === null || options === void 0 ? void 0 : options.accessKey) || this.options.appId;\n                        s = (options === null || options === void 0 ? void 0 : options.accessSecret) || this.options.secret;\n                        qstr = this._generateTokenRequest({\n                            client_id: i,\n                            client_secret: s,\n                            grant_type: 'client_credentials',\n                            scope: scope\n                        });\n                        api = '';\n                        if (this.options.protocol === 'oidc') {\n                            api = this.baseClient.appHost + \"/oidc/token\";\n                        }\n                        else if (this.options.protocol === 'oauth') {\n                            api = this.baseClient.appHost + \"/oauth/token\";\n                        }\n                        return [4 /*yield*/, this.naiveHttpClient.request({\n                                method: 'POST',\n                                url: api,\n                                data: qstr,\n                                headers: {\n                                    'Content-Type': 'application/x-www-form-urlencoded'\n                                }\n                            })];\n                    case 1:\n                        tokenSet = _a.sent();\n                        return [2 /*return*/, tokenSet];\n                }\n            });\n        });\n    };\n    AuthenticationClient.prototype.getUserInfoByAccessToken = function (accessToken, options) {\n        return __awaiter(this, void 0, void 0, function () {\n            var api, userInfo, userInfo, userInfo, userInfo, userInfo, userInfo;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (options) {\n                            if (options.method && !['POST', 'GET'].includes(options.method)) {\n                                throw new Error('options.method 参数的可选值为 POST、GET，请检查输入');\n                            }\n                            if (options.tokenPlace &&\n                                !['query', 'header', 'body'].includes(options.tokenPlace)) {\n                                throw new Error('options.tokenPlace 参数的可选值为 query、header、body，请检查输入');\n                            }\n                            if (options.method === 'GET' && options.tokenPlace === 'body') {\n                                throw new Error('options.method 参数为 GET 时，options.tokenPlace 参数不能为 body');\n                            }\n                            options.method = options.method || 'GET';\n                            options.tokenPlace = options.tokenPlace || 'query';\n                        }\n                        api = '';\n                        if (this.options.protocol === 'oidc') {\n                            api = this.baseClient.appHost + \"/oidc/me\";\n                        }\n                        else if (this.options.protocol === 'oauth') {\n                            api = this.baseClient.appHost + \"/oauth/me\";\n                        }\n                        if (!((options === null || options === void 0 ? void 0 : options.method) === 'POST')) return [3 /*break*/, 7];\n                        if (!((options === null || options === void 0 ? void 0 : options.tokenPlace) === 'header')) return [3 /*break*/, 2];\n                        return [4 /*yield*/, this.naiveHttpClient.request({\n                                method: 'POST',\n                                url: api,\n                                headers: {\n                                    Authorization: 'Bearer ' + accessToken\n                                }\n                            })];\n                    case 1:\n                        userInfo = _a.sent();\n                        return [2 /*return*/, userInfo];\n                    case 2:\n                        if (!((options === null || options === void 0 ? void 0 : options.tokenPlace) === 'query')) return [3 /*break*/, 4];\n                        return [4 /*yield*/, this.naiveHttpClient.request({\n                                method: 'POST',\n                                url: api,\n                                params: {\n                                    access_token: accessToken\n                                }\n                            })];\n                    case 3:\n                        userInfo = _a.sent();\n                        return [2 /*return*/, userInfo];\n                    case 4:\n                        if (!((options === null || options === void 0 ? void 0 : options.tokenPlace) === 'body')) return [3 /*break*/, 6];\n                        return [4 /*yield*/, this.naiveHttpClient.request({\n                                method: 'POST',\n                                url: api,\n                                data: serialize({\n                                    access_token: accessToken\n                                })\n                            })];\n                    case 5:\n                        userInfo = _a.sent();\n                        return [2 /*return*/, userInfo];\n                    case 6: return [3 /*break*/, 14];\n                    case 7:\n                        if (!((options === null || options === void 0 ? void 0 : options.method) === 'GET')) return [3 /*break*/, 12];\n                        if (!((options === null || options === void 0 ? void 0 : options.tokenPlace) === 'header')) return [3 /*break*/, 9];\n                        return [4 /*yield*/, this.naiveHttpClient.request({\n                                method: 'GET',\n                                url: api,\n                                headers: {\n                                    Authorization: 'Bearer ' + accessToken\n                                }\n                            })];\n                    case 8:\n                        userInfo = _a.sent();\n                        return [2 /*return*/, userInfo];\n                    case 9:\n                        if (!((options === null || options === void 0 ? void 0 : options.tokenPlace) === 'query')) return [3 /*break*/, 11];\n                        return [4 /*yield*/, this.naiveHttpClient.request({\n                                method: 'GET',\n                                url: api,\n                                params: {\n                                    access_token: accessToken\n                                }\n                            })];\n                    case 10:\n                        userInfo = _a.sent();\n                        return [2 /*return*/, userInfo];\n                    case 11: return [3 /*break*/, 14];\n                    case 12: return [4 /*yield*/, this.naiveHttpClient.request({\n                            method: 'GET',\n                            url: api,\n                            params: {\n                                access_token: accessToken\n                            }\n                        })];\n                    case 13:\n                        userInfo = _a.sent();\n                        return [2 /*return*/, userInfo];\n                    case 14: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    AuthenticationClient.prototype.buildAuthorizeUrl = function (options) {\n        if (!this.baseClient.appHost) {\n            throw new Error('请在初始化 AuthenticationClient 时传入应用域名 appHost 参数，形如：https://app1.authing.cn');\n        }\n        if (this.options.protocol === 'oidc') {\n            return this._buildOidcAuthorizeUrl(options);\n        }\n        if (this.options.protocol === 'oauth') {\n            return this._buildOauthAuthorizeUrl(options);\n        }\n        if (this.options.protocol === 'saml') {\n            return this._buildSamlAuthorizeUrl();\n        }\n        if (this.options.protocol === 'cas') {\n            return this._buildCasAuthorizeUrl(options);\n        }\n        throw new Error('不支持的协议类型，请在初始化 AuthenticationClient 时传入 protocol 参数，可选值为 oidc、oauth、saml、cas');\n    };\n    AuthenticationClient.prototype._buildOidcAuthorizeUrl = function (options) {\n        var map = {\n            appId: 'client_id',\n            scope: 'scope',\n            state: 'state',\n            nonce: 'nonce',\n            responseMode: 'response_mode',\n            responseType: 'response_type',\n            redirectUri: 'redirect_uri',\n            codeChallenge: 'code_challenge',\n            codeChallengeMethod: 'code_challenge_method',\n            tenantId: 'tenant_id'\n        };\n        var res = {\n            nonce: Math.random()\n                .toString()\n                .slice(2),\n            state: Math.random()\n                .toString()\n                .slice(2),\n            scope: 'openid profile email phone address',\n            client_id: this.options.appId,\n            redirect_uri: this.options.redirectUri,\n            response_type: 'code'\n        };\n        Object.keys(map).forEach(function (k) {\n            if (options && options[k]) {\n                if (k === 'scope' && options.scope.includes('offline_access')) {\n                    res.prompt = 'consent';\n                }\n                res[map[k]] = options[k];\n            }\n        });\n        var params = new URLSearchParams(res);\n        var authorizeUrl = this.baseClient.appHost + '/oidc/auth?' + params.toString();\n        return authorizeUrl;\n    };\n    AuthenticationClient.prototype._buildOauthAuthorizeUrl = function (options) {\n        var map = {\n            appId: 'client_id',\n            scope: 'scope',\n            state: 'state',\n            responseType: 'response_type',\n            redirectUri: 'redirect_uri'\n        };\n        var res = {\n            state: Math.random()\n                .toString()\n                .slice(2),\n            scope: 'user',\n            client_id: this.options.appId,\n            redirect_uri: this.options.redirectUri,\n            response_type: 'code'\n        };\n        Object.keys(map).forEach(function (k) {\n            if (options && options[k]) {\n                res[map[k]] = options[k];\n            }\n        });\n        var params = new URLSearchParams(res);\n        var authorizeUrl = this.baseClient.appHost + '/oauth/auth?' + params.toString();\n        return authorizeUrl;\n    };\n    AuthenticationClient.prototype._buildSamlAuthorizeUrl = function () {\n        return this.baseClient.appHost + '/api/v2/saml-idp/' + this.options.appId;\n    };\n    AuthenticationClient.prototype._buildCasAuthorizeUrl = function (options) {\n        if (options === null || options === void 0 ? void 0 : options.service) {\n            return this.baseClient.appHost + \"/cas-idp/\" + this.options.appId + \"?service=\" + (options === null || options === void 0 ? void 0 : options.service);\n        }\n        return this.baseClient.appHost + \"/cas-idp/\" + this.options.appId;\n    };\n    AuthenticationClient.prototype._buildCasLogoutUrl = function (options) {\n        if (options === null || options === void 0 ? void 0 : options.redirectUri) {\n            return (this.baseClient.appHost + '/cas-idp/logout?url=' + options.redirectUri);\n        }\n        return this.baseClient.appHost + \"/cas-idp/logout\";\n    };\n    AuthenticationClient.prototype._buildOidcLogoutUrl = function (options) {\n        if (options && !(options.idToken && options.redirectUri)) {\n            throw new Error('必须同时传入 idToken 和 redirectUri 参数，或者同时都不传入');\n        }\n        if (options === null || options === void 0 ? void 0 : options.redirectUri) {\n            return this.baseClient.appHost + \"/oidc/session/end?id_token_hint=\" + options.idToken + \"&post_logout_redirect_uri=\" + options.redirectUri;\n        }\n        return this.baseClient.appHost + \"/oidc/session/end\";\n    };\n    AuthenticationClient.prototype._buildEasyLogoutUrl = function (options) {\n        if (options === null || options === void 0 ? void 0 : options.redirectUri) {\n            return this.baseClient.appHost + \"/login/profile/logout?redirect_uri=\" + options.redirectUri;\n        }\n        return this.baseClient.appHost + \"/login/profile/logout\";\n    };\n    AuthenticationClient.prototype.buildLogoutUrl = function (options) {\n        if (this.options.protocol === 'cas') {\n            return this._buildCasLogoutUrl(options);\n        }\n        if (this.options.protocol === 'oidc' && (options === null || options === void 0 ? void 0 : options.expert)) {\n            return this._buildOidcLogoutUrl(options);\n        }\n        return this._buildEasyLogoutUrl(options);\n    };\n    AuthenticationClient.prototype._getNewAccessTokenByRefreshTokenWithClientSecretPost = function (refreshToken) {\n        return __awaiter(this, void 0, void 0, function () {\n            var qstr, api, tokenSet;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        qstr = this._generateTokenRequest({\n                            client_id: this.options.appId,\n                            client_secret: this.options.secret,\n                            grant_type: 'refresh_token',\n                            refresh_token: refreshToken\n                        });\n                        api = '';\n                        if (this.options.protocol === 'oidc') {\n                            api = this.baseClient.appHost + \"/oidc/token\";\n                        }\n                        else if (this.options.protocol === 'oauth') {\n                            api = this.baseClient.appHost + \"/oauth/token\";\n                        }\n                        return [4 /*yield*/, this.naiveHttpClient.request({\n                                method: 'POST',\n                                url: api,\n                                data: qstr,\n                                headers: {\n                                    'Content-Type': 'application/x-www-form-urlencoded'\n                                }\n                            })];\n                    case 1:\n                        tokenSet = _a.sent();\n                        return [2 /*return*/, tokenSet];\n                }\n            });\n        });\n    };\n    AuthenticationClient.prototype._getNewAccessTokenByRefreshTokenWithClientSecretBasic = function (refreshToken) {\n        return __awaiter(this, void 0, void 0, function () {\n            var api, qstr, tokenSet;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        api = '';\n                        if (this.options.protocol === 'oidc') {\n                            api = this.baseClient.appHost + \"/oidc/token\";\n                        }\n                        else if (this.options.protocol === 'oauth') {\n                            api = this.baseClient.appHost + \"/oauth/token\";\n                        }\n                        qstr = this._generateTokenRequest({\n                            grant_type: 'refresh_token',\n                            refresh_token: refreshToken\n                        });\n                        return [4 /*yield*/, this.naiveHttpClient.request({\n                                data: qstr,\n                                method: 'POST',\n                                url: api,\n                                headers: {\n                                    Authorization: this._generateBasicAuthToken()\n                                }\n                            })];\n                    case 1:\n                        tokenSet = _a.sent();\n                        return [2 /*return*/, tokenSet];\n                }\n            });\n        });\n    };\n    AuthenticationClient.prototype._getNewAccessTokenByRefreshTokenWithNone = function (refreshToken) {\n        return __awaiter(this, void 0, void 0, function () {\n            var api, qstr, tokenSet;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        api = '';\n                        if (this.options.protocol === 'oidc') {\n                            api = this.baseClient.appHost + \"/oidc/token\";\n                        }\n                        else if (this.options.protocol === 'oauth') {\n                            api = this.baseClient.appHost + \"/oauth/token\";\n                        }\n                        qstr = this._generateTokenRequest({\n                            client_id: this.options.appId,\n                            grant_type: 'refresh_token',\n                            refresh_token: refreshToken\n                        });\n                        return [4 /*yield*/, this.naiveHttpClient.request({\n                                method: 'POST',\n                                url: api,\n                                data: qstr\n                            })];\n                    case 1:\n                        tokenSet = _a.sent();\n                        return [2 /*return*/, tokenSet];\n                }\n            });\n        });\n    };\n    AuthenticationClient.prototype.getNewAccessTokenByRefreshToken = function (refreshToken) {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (!['oauth', 'oidc'].includes(this.options.protocol)) {\n                            throw new Error('初始化 AuthenticationClient 时传入的 protocol 参数必须为 oauth 或 oidc，请检查参数');\n                        }\n                        if (!this.options.secret &&\n                            this.options.tokenEndPointAuthMethod !== 'none') {\n                            throw new Error('请在初始化 AuthenticationClient 时传入 appId 和 secret 参数');\n                        }\n                        if (!(this.options.tokenEndPointAuthMethod === 'client_secret_post')) return [3 /*break*/, 2];\n                        return [4 /*yield*/, this._getNewAccessTokenByRefreshTokenWithClientSecretPost(refreshToken)];\n                    case 1: return [2 /*return*/, _a.sent()];\n                    case 2:\n                        if (!(this.options.tokenEndPointAuthMethod === 'client_secret_basic')) return [3 /*break*/, 4];\n                        return [4 /*yield*/, this._getNewAccessTokenByRefreshTokenWithClientSecretBasic(refreshToken)];\n                    case 3: return [2 /*return*/, _a.sent()];\n                    case 4:\n                        if (!(this.options.tokenEndPointAuthMethod === 'none')) return [3 /*break*/, 6];\n                        return [4 /*yield*/, this._getNewAccessTokenByRefreshTokenWithNone(refreshToken)];\n                    case 5: return [2 /*return*/, _a.sent()];\n                    case 6: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    AuthenticationClient.prototype._revokeTokenWithClientSecretPost = function (token) {\n        return __awaiter(this, void 0, void 0, function () {\n            var qstr, api, tokenSet;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        qstr = this._generateTokenRequest({\n                            client_id: this.options.appId,\n                            client_secret: this.options.secret,\n                            token: token\n                        });\n                        api = '';\n                        if (this.options.protocol === 'oidc') {\n                            api = this.baseClient.appHost + \"/oidc/token/revocation\";\n                        }\n                        else if (this.options.protocol === 'oauth') {\n                            api = this.baseClient.appHost + \"/oauth/token/revocation\";\n                        }\n                        return [4 /*yield*/, this.naiveHttpClient.request({\n                                method: 'POST',\n                                url: api,\n                                data: qstr,\n                                headers: {\n                                    'Content-Type': 'application/x-www-form-urlencoded'\n                                }\n                            })];\n                    case 1:\n                        tokenSet = _a.sent();\n                        return [2 /*return*/, tokenSet];\n                }\n            });\n        });\n    };\n    AuthenticationClient.prototype._revokeTokenWithClientSecretBasic = function (token) {\n        return __awaiter(this, void 0, void 0, function () {\n            var api, qstr, result;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        api = '';\n                        if (this.options.protocol === 'oidc') {\n                            api = this.baseClient.appHost + \"/oidc/token/revocation\";\n                        }\n                        else if (this.options.protocol === 'oauth') {\n                            throw new Error('OAuth 2.0 暂不支持用 client_secret_basic 模式身份验证撤回 Token');\n                            api = this.baseClient.appHost + \"/oauth/token/revocation\";\n                        }\n                        qstr = this._generateTokenRequest({\n                            token: token\n                        });\n                        return [4 /*yield*/, this.naiveHttpClient.request({\n                                data: qstr,\n                                method: 'POST',\n                                url: api,\n                                headers: {\n                                    Authorization: this._generateBasicAuthToken()\n                                }\n                            })];\n                    case 1:\n                        result = _a.sent();\n                        return [2 /*return*/, result];\n                }\n            });\n        });\n    };\n    AuthenticationClient.prototype._revokeTokenWithNone = function (token) {\n        return __awaiter(this, void 0, void 0, function () {\n            var api, qstr, result;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        api = '';\n                        if (this.options.protocol === 'oidc') {\n                            api = this.baseClient.appHost + \"/oidc/token/revocation\";\n                        }\n                        else if (this.options.protocol === 'oauth') {\n                            api = this.baseClient.appHost + \"/oauth/token/revocation\";\n                        }\n                        qstr = this._generateTokenRequest({\n                            client_id: this.options.appId,\n                            token: token\n                        });\n                        return [4 /*yield*/, this.naiveHttpClient.request({\n                                method: 'POST',\n                                url: api,\n                                data: qstr\n                            })];\n                    case 1:\n                        result = _a.sent();\n                        return [2 /*return*/, result];\n                }\n            });\n        });\n    };\n    AuthenticationClient.prototype.revokeToken = function (token) {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (!['oauth', 'oidc'].includes(this.options.protocol)) {\n                            throw new Error('初始化 AuthenticationClient 时传入的 protocol 参数必须为 oauth 或 oidc，请检查参数');\n                        }\n                        if (!this.options.secret &&\n                            this.options.revocationEndPointAuthMethod !== 'none') {\n                            throw new Error('请在初始化 AuthenticationClient 时传入 appId 和 secret 参数');\n                        }\n                        if (!(this.options.revocationEndPointAuthMethod === 'client_secret_post')) return [3 /*break*/, 2];\n                        return [4 /*yield*/, this._revokeTokenWithClientSecretPost(token)];\n                    case 1:\n                        _a.sent();\n                        return [2 /*return*/, true];\n                    case 2:\n                        if (!(this.options.revocationEndPointAuthMethod === 'client_secret_basic')) return [3 /*break*/, 4];\n                        return [4 /*yield*/, this._revokeTokenWithClientSecretBasic(token)];\n                    case 3:\n                        _a.sent();\n                        return [2 /*return*/, true];\n                    case 4:\n                        if (!(this.options.revocationEndPointAuthMethod === 'none')) return [3 /*break*/, 6];\n                        return [4 /*yield*/, this._revokeTokenWithNone(token)];\n                    case 5:\n                        _a.sent();\n                        return [2 /*return*/, true];\n                    case 6: throw new Error('初始化 AuthenticationClient 时传入的 revocationEndPointAuthMethod 参数可选值为 client_secret_base、client_secret_post、none，请检查参数');\n                }\n            });\n        });\n    };\n    AuthenticationClient.prototype._introspectTokenWithClientSecretPost = function (token) {\n        return __awaiter(this, void 0, void 0, function () {\n            var qstr, api, tokenSet;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        qstr = this._generateTokenRequest({\n                            client_id: this.options.appId,\n                            client_secret: this.options.secret,\n                            token: token\n                        });\n                        api = '';\n                        if (this.options.protocol === 'oidc') {\n                            api = this.baseClient.appHost + \"/oidc/token/introspection\";\n                        }\n                        else if (this.options.protocol === 'oauth') {\n                            api = this.baseClient.appHost + \"/oauth/token/introspection\";\n                        }\n                        return [4 /*yield*/, this.naiveHttpClient.request({\n                                method: 'POST',\n                                url: api,\n                                data: qstr,\n                                headers: {\n                                    'Content-Type': 'application/x-www-form-urlencoded'\n                                }\n                            })];\n                    case 1:\n                        tokenSet = _a.sent();\n                        return [2 /*return*/, tokenSet];\n                }\n            });\n        });\n    };\n    AuthenticationClient.prototype._introspectTokenWithClientSecretBasic = function (token) {\n        return __awaiter(this, void 0, void 0, function () {\n            var api, qstr, result;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        api = '';\n                        if (this.options.protocol === 'oidc') {\n                            api = this.baseClient.appHost + \"/oidc/token/introspection\";\n                        }\n                        else if (this.options.protocol === 'oauth') {\n                            api = this.baseClient.appHost + \"/oauth/token/introspection\";\n                        }\n                        qstr = this._generateTokenRequest({\n                            token: token\n                        });\n                        return [4 /*yield*/, this.naiveHttpClient.request({\n                                data: qstr,\n                                method: 'POST',\n                                url: api,\n                                headers: {\n                                    Authorization: this._generateBasicAuthToken()\n                                }\n                            })];\n                    case 1:\n                        result = _a.sent();\n                        return [2 /*return*/, result];\n                }\n            });\n        });\n    };\n    AuthenticationClient.prototype._introspectTokenWithNone = function (token) {\n        return __awaiter(this, void 0, void 0, function () {\n            var api, qstr, result;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        api = '';\n                        if (this.options.protocol === 'oidc') {\n                            api = this.baseClient.appHost + \"/oidc/token/introspection\";\n                        }\n                        else if (this.options.protocol === 'oauth') {\n                            api = this.baseClient.appHost + \"/oauth/token/introspection\";\n                        }\n                        qstr = this._generateTokenRequest({\n                            client_id: this.options.appId,\n                            token: token\n                        });\n                        return [4 /*yield*/, this.naiveHttpClient.request({\n                                method: 'POST',\n                                url: api,\n                                data: qstr\n                            })];\n                    case 1:\n                        result = _a.sent();\n                        return [2 /*return*/, result];\n                }\n            });\n        });\n    };\n    AuthenticationClient.prototype.introspectToken = function (token) {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (!['oauth', 'oidc'].includes(this.options.protocol)) {\n                            throw new Error('初始化 AuthenticationClient 时传入的 protocol 参数必须为 oauth 或 oidc，请检查参数');\n                        }\n                        if (!this.options.secret &&\n                            this.options.introspectionEndPointAuthMethod !== 'none') {\n                            throw new Error('请在初始化 AuthenticationClient 时传入 appId 和 secret 参数');\n                        }\n                        if (!(this.options.introspectionEndPointAuthMethod === 'client_secret_post')) return [3 /*break*/, 2];\n                        return [4 /*yield*/, this._introspectTokenWithClientSecretPost(token)];\n                    case 1: return [2 /*return*/, _a.sent()];\n                    case 2:\n                        if (!(this.options.introspectionEndPointAuthMethod === 'client_secret_basic')) return [3 /*break*/, 4];\n                        return [4 /*yield*/, this._introspectTokenWithClientSecretBasic(token)];\n                    case 3: return [2 /*return*/, _a.sent()];\n                    case 4:\n                        if (!(this.options.introspectionEndPointAuthMethod === 'none')) return [3 /*break*/, 6];\n                        return [4 /*yield*/, this._introspectTokenWithNone(token)];\n                    case 5: return [2 /*return*/, _a.sent()];\n                    case 6: throw new Error('初始化 AuthenticationClient 时传入的 introspectionEndPointAuthMethod 参数可选值为 client_secret_base、client_secret_post、none，请检查参数');\n                }\n            });\n        });\n    };\n    AuthenticationClient.prototype.validateTicketV1 = function (ticket, service) {\n        return __awaiter(this, void 0, void 0, function () {\n            var api, result, valid;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        api = this.baseClient.appHost + \"/cas-idp/\" + this.options.appId + \"/validate\";\n                        return [4 /*yield*/, this.naiveHttpClient.request({\n                                method: 'GET',\n                                url: api,\n                                params: {\n                                    service: service,\n                                    ticket: ticket\n                                }\n                            })];\n                    case 1:\n                        result = _a.sent();\n                        valid = result.split('\\n')[0];\n                        return [2 /*return*/, __assign({ valid: valid === 'yes' }, (valid !== 'yes' && { message: 'ticket 不合法' }))];\n                }\n            });\n        });\n    };\n    AuthenticationClient.prototype.validateTicketV2 = function (ticket, service, format) {\n        if (format === void 0) { format = 'JSON'; }\n        return __awaiter(this, void 0, void 0, function () {\n            var api, result;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (!ticket) {\n                            throw new Error('请传入 ticket 一次性票据');\n                        }\n                        if (!service) {\n                            throw new Error('请传入 service 服务地址');\n                        }\n                        if (format !== 'XML' && format !== 'JSON') {\n                            throw new Error('format 参数可选值为 XML、JSON，请检查输入');\n                        }\n                        api = this.baseClient.appHost + \"/cas-idp/\" + this.options.appId + \"/serviceValidate\";\n                        return [4 /*yield*/, this.naiveHttpClient.request({\n                                method: 'GET',\n                                url: api,\n                                params: {\n                                    service: service,\n                                    ticket: ticket,\n                                    format: format\n                                }\n                            })];\n                    case 1:\n                        result = _a.sent();\n                        return [2 /*return*/, result];\n                }\n            });\n        });\n    };\n    /**\n     * 判断 \"我\" 是否有某个角色\n     * @param roleCode 角色 Code\n     * @param namespace 权限分组 ID\n     */\n    AuthenticationClient.prototype.hasRole = function (roleCode, namespace) {\n        return __awaiter(this, void 0, void 0, function () {\n            var user, roleList, hasRole;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, getUserRoles(this.graphqlClient, this.tokenProvider, {\n                            id: this.checkLoggedIn(),\n                            namespace: namespace\n                        })];\n                    case 1:\n                        user = (_a.sent()).user;\n                        if (!user) {\n                            return [2 /*return*/, false];\n                        }\n                        roleList = user.roles;\n                        if (roleList.totalCount < 1) {\n                            return [2 /*return*/, false];\n                        }\n                        hasRole = false;\n                        roleList.list.forEach(function (item) {\n                            if (item.code === roleCode) {\n                                hasRole = true;\n                            }\n                        });\n                        return [2 /*return*/, hasRole];\n                }\n            });\n        });\n    };\n    /**\n     * @description 获取当前用户能够访问的应用\n     */\n    AuthenticationClient.prototype.listApplications = function (params) {\n        return __awaiter(this, void 0, void 0, function () {\n            var _a, _b, page, _c, limit, data;\n            return __generator(this, function (_d) {\n                switch (_d.label) {\n                    case 0:\n                        _a = params || {}, _b = _a.page, page = _b === void 0 ? 1 : _b, _c = _a.limit, limit = _c === void 0 ? 10 : _c;\n                        return [4 /*yield*/, this.httpClient.request({\n                                url: this.baseClient.appHost + \"/api/v2/users/me/applications/allowed?page=\" + page + \"&limit=\" + limit,\n                                method: 'GET'\n                            })];\n                    case 1:\n                        data = _d.sent();\n                        return [2 /*return*/, data];\n                }\n            });\n        });\n    };\n    /**\n     * @description 检验 idToken 或 accessToken\n     */\n    AuthenticationClient.prototype.validateToken = function (options) {\n        return __awaiter(this, void 0, void 0, function () {\n            var data, data;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (!options) {\n                            throw new Error('请在传入的参数对象中包含 accessToken 或 idToken 字段');\n                        }\n                        if (options.accessToken && options.idToken) {\n                            throw new Error('accessToken 和 idToken 只能传入一个，不能同时传入');\n                        }\n                        if (!options.idToken) return [3 /*break*/, 2];\n                        return [4 /*yield*/, this.naiveHttpClient.request({\n                                url: this.baseClient.appHost + \"/api/v2/oidc/validate_token\",\n                                method: 'GET',\n                                params: {\n                                    id_token: options.idToken\n                                }\n                            })];\n                    case 1:\n                        data = _a.sent();\n                        return [2 /*return*/, data];\n                    case 2:\n                        if (!options.accessToken) return [3 /*break*/, 4];\n                        return [4 /*yield*/, this.naiveHttpClient.request({\n                                url: this.baseClient.appHost + \"/api/v2/oidc/validate_token\",\n                                method: 'GET',\n                                params: {\n                                    access_token: options.accessToken\n                                }\n                            })];\n                    case 3:\n                        data = _a.sent();\n                        return [2 /*return*/, data];\n                    case 4: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * @description sso 检测登录态\n     */\n    AuthenticationClient.prototype.trackSession = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var data;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.naiveHttpClient.request({\n                            url: this.baseClient.appHost + \"/cas/session\",\n                            method: 'GET'\n                        })];\n                    case 1:\n                        data = _a.sent();\n                        return [2 /*return*/, data];\n                }\n            });\n        });\n    };\n    /*\n     * 在本地检验 ID Token 或 Access Token 的有效性，并返回其包含的内容。\n     * 如果签名模式是 HS256，必须在初始化参数中传入 appSecret。\n     * 如果开启了 Token 加密功能，请使用 decryptTokenLocally。\n     * @param token 待检验的 Token\n     * @returns Token 的内容\n     */\n    // async validateTokenLocally(token: string) {\n    //   const { payload } = await compactVerify(token, (header: any) =>\n    //     this.keyManager.getKeyFor({\n    //       alg: header.alg,\n    //       kid: header.kid\n    //     })\n    //   );\n    //   return JSON.parse(new TextDecoder().decode(payload));\n    // }\n    /**\n     * 在本地利用私钥解密 ID Token 或 Access Token ，检验其有效性并返回包含的内容。\n     * 只在开启 Token 加密功能的情况下使用，反之请使用 validateTokenLocally。\n     * 必须在初始化参数中传入 privateKeys。\n     * @param token 待检验的 Token\n     * @returns Token 的内容\n     */\n    // async decryptTokenLocally(token: string) {\n    //   const { plaintext } = await compactDecrypt(token, (header: any) =>\n    //     this.keyManager.getKeyFor({\n    //       alg: header.alg,\n    //       kid: header.kid\n    //     })\n    //   );\n    //   return this.validateTokenLocally(new TextDecoder().decode(plaintext));\n    // }\n    /**\n     * @description 设置语言\n     */\n    AuthenticationClient.prototype.setLang = function (lang) {\n        this.options.lang = lang;\n    };\n    return AuthenticationClient;\n}());\nexport { AuthenticationClient };\n//# sourceMappingURL=AuthenticationClient.js.map"]},"metadata":{},"sourceType":"module"}