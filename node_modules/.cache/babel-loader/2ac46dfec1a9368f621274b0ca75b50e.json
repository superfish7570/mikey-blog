{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function () {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n\n        case 7:\n          op = _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n\n            _.ops.push(op);\n\n            break;\n          }\n\n          if (t[2]) _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n      }\n\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nimport { updateUserpool } from '../graphqlapi';\n/**\n * @name UserPoolManagementClient\n * @description Authing 用户池配置管理模块。\n *\n * 此模块可以通过使用 API 管理用户池配置，以及管理环境变量（详细文档请见）。\n *\n * @example\n *\n * 请使用以下方式使用该模块：\n * \\`\\`\\`javascript\n * import { ManagementClient } from \"authing-js-sdk\"\n * const managementClient = new ManagementClient({\n *    userPoolId: \"YOUR_USERPOOL_ID\",\n *    secret: \"YOUR_USERPOOL_SECRET\",\n * })\n *\n * managementClient.userpool.detail // 获取用户池配置\n * managementClient.userpool.update // 修改用户池配置\n * managementClient.userpool.env // 获取用户池配置的环境变量列表\n * \\`\\`\\`\n *\n * @class UsersManagementClient 管理用户池配置\n */\n\nvar UserPoolManagementClient =\n/** @class */\nfunction () {\n  function UserPoolManagementClient(options, httpClient, graphqlClient, tokenProvider) {\n    this.options = options;\n    this.httpClient = httpClient;\n    this.graphqlClient = graphqlClient;\n    this.tokenProvider = tokenProvider;\n  }\n  /**@name detail\n   * @name_zh 查询用户池配置\n   * @description 查询用户池配置\n   *\n   * @example\n   *\n   * const userpool = await managementClient.userpool.detail()\n   *\n   * @returns {Promise<UserPool>}\n   * @memberof UserPoolManagementClient\n   */\n\n\n  UserPoolManagementClient.prototype.detail = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var userPool;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.httpClient.request({\n              method: 'GET',\n              url: this.options.host + \"/api/v2/userpools/detail\"\n            })];\n\n          case 1:\n            userPool = _a.sent();\n            return [2\n            /*return*/\n            , userPool];\n        }\n      });\n    });\n  };\n  /**\n   * @name update\n   * @name_zh 更新用户池配置\n   * @description 更新用户池配置\n   *\n   * @param {UpdateUserpoolInput} updates\n   * @param {string} [updates.name] 用户池名称\n   * @param {string} [updates.logo] 用户池 logo\n   * @param {string} [updates.domain] 用户池企业应用面板二级域名\n   * @param {string} [updates.description] 描述信息\n   * @param {boolean} [updates.emailVerifiedDefault] 设置邮箱默认为已验证状态（用户的 emailVerified 字段为 true）\n   * @param {boolean} [updates.appSsoEnabled] 开启用户池下的应用之间单点登录\n   * @param {boolean} [updates.sendWelcomeEmail] 用户注册之后是否发送欢迎邮件\n   * @param {boolean} [updates.registerDisabled] 是否关闭注册，当用户池关闭注册之后，普通用户将无法注册账号，只有管理员能够手动创建账号。\n   * @param {string} [updates.allowedOrigins] 安全域配置，安全域（Allowed Origins） 是允许从 JavaScript 向 Authing API 发出请求的 URL（通常与 CORS 一起使用）。 默认情况下，系统会允许你使用所有网址。 如果需要，此字段允许你输入其他来源。 你可以通过逐行分隔多个有效 URL，并在子域级别使用通配符（例如：https://*.sample.com）。\n   * 验证这些 URL 时不考虑查询字符串和哈希信息，如果带上了查询字符串和哈希信息系统会自动忽略整个域名。\n   * 如果有多条请以换行符分隔。\n   * @param {Object} [updates.whitelist] 用户池白名单配置\n   * @param {boolean} [updates.whitelist.phoneEnabled] 是否开启手机号白名单\n   * @param {boolean} [updates.whitelist.emailEnabled] 是否开启邮箱白名单\n   * @param {boolean} [updates.whitelist.usernameEnabled] 是否开启用户名白名单\n   * @param {number} [updates.tokenExpiresAfter] token 过期时间\n   * @param {Object} [updates.loginFailCheck] 频繁登录失败限制，开启之后，在规定时间内超过次数后再次登录需要验证码。如果你的业务存在同一区域同一时间段并发登录的场景，请将此检测关闭。\n   * @param {boolean} [updates.loginFailCheck.enabled] 是否开启\n   * @param {number} [updates.loginFailCheck.timeInterval] 检测周期，单位为秒。\n   * @param {number} [updates.loginFailCheck.limit] 同一 IP 登录失败次数达到多少次的时候会触发限制条件。\n   * @param {Object} [updates.frequentRegisterCheck] 频率注册限制，开启之后同一 IP 频繁注册账号时会触发频率限制，需要等一段时间之后才能重新注册。如果你的业务存在同一区域同一时间段并发注册的场景，请将此检测关闭。\n   * @param {boolean} [updates.frequentRegisterCheck.enabled] 是否开启\n   * @param {Object} [updates.frequentRegisterCheck.timeInterval] 检测周期，单位为秒。\n   * @param {Object} [updates.frequentRegisterCheck.limit] 同一个周期内同一 IP 注册次数达到此数目时会触发频率限制。\n   *\n   *\n   * @example\n   *\n   * const userpool = await managementClient.userpool.update({\n   *    registerDisabled: true // 关闭系统注册\n   * })\n   *\n   * @returns {Promise<UserPool>}\n   * @memberof UserPoolManagementClient\n   */\n\n\n  UserPoolManagementClient.prototype.update = function (updates) {\n    return __awaiter(this, void 0, void 0, function () {\n      var res;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , updateUserpool(this.graphqlClient, this.tokenProvider, {\n              input: updates\n            })];\n\n          case 1:\n            res = _a.sent();\n            return [2\n            /*return*/\n            , res.updateUserpool];\n        }\n      });\n    });\n  };\n  /**\n   * @name listEnv\n   * @name_zh 获取环境变量列表\n   * @description 获取用户池环境变量列表。用户池配置的环境变量可以在 pipeline 场景下使用，详情请见：https://docs.authing.co/extensibility/pipeline/env.html\n   *\n   * @example\n   *\n   * const envList = await managementClient.userpool.listEnv()\n   *\n   * @returns {Promise<Env[]>}\n   * @memberof UserPoolManagementClient\n   */\n\n\n  UserPoolManagementClient.prototype.listEnv = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.httpClient.request({\n              method: 'GET',\n              url: this.options.host + \"/api/v2/env\"\n            })];\n\n          case 1:\n            return [2\n            /*return*/\n            , _a.sent()];\n        }\n      });\n    });\n  };\n  /**\n   * @name addEnv\n   * @name_zh 添加环境变量\n   * @description 添加环境变量\n   *\n   * @param {string} key 环境变量键\n   * @param {any} value 环境变量值\n   *\n   * @example\n   *\n   * const envList = await managementClient.userpool.addEnv('LARK_WEBHOOK', 'xxxxxxx') // 添加一个飞书群机器人 webhook 地址，之后可以在 pipeline 函数中使用（详细请见: https://docs.authing.co/extensibility/pipeline/usage.html）\n   *\n   * @returns {Promise<Env[]>} 返回最新的环境变量列表\n   * @memberof UserPoolManagementClient\n   */\n\n\n  UserPoolManagementClient.prototype.addEnv = function (key, value) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.httpClient.request({\n              method: 'POST',\n              url: this.options.host + \"/api/v2/env\",\n              data: {\n                key: key,\n                value: value\n              }\n            })];\n\n          case 1:\n            return [2\n            /*return*/\n            , _a.sent()];\n        }\n      });\n    });\n  };\n  /**\n   * @name removeEnv\n   * @name_zh 删除环境变量\n   * @description 删除环境变量\n   *\n   * @param {string} key 环境变量键\n   *\n   * @example\n   *\n   * const envList = await managementClient.userpool.removeEnv('LARK_WEBHOOK')\n   *\n   * @returns {Promise<Env[]>} 返回最新的环境变量列表\n   * @memberof UserPoolManagementClient\n   */\n\n\n  UserPoolManagementClient.prototype.removeEnv = function (key) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.httpClient.request({\n              method: 'DELETE',\n              url: this.options.host + \"/api/v2/env/\" + key\n            })];\n\n          case 1:\n            return [2\n            /*return*/\n            , _a.sent()];\n        }\n      });\n    });\n  };\n\n  return UserPoolManagementClient;\n}();\n\nexport { UserPoolManagementClient };","map":{"version":3,"sources":["../../../../src/lib/management/UserpoolManagementClient.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nimport { updateUserpool } from '../graphqlapi';\n/**\n * @name UserPoolManagementClient\n * @description Authing 用户池配置管理模块。\n *\n * 此模块可以通过使用 API 管理用户池配置，以及管理环境变量（详细文档请见）。\n *\n * @example\n *\n * 请使用以下方式使用该模块：\n * \\`\\`\\`javascript\n * import { ManagementClient } from \"authing-js-sdk\"\n * const managementClient = new ManagementClient({\n *    userPoolId: \"YOUR_USERPOOL_ID\",\n *    secret: \"YOUR_USERPOOL_SECRET\",\n * })\n *\n * managementClient.userpool.detail // 获取用户池配置\n * managementClient.userpool.update // 修改用户池配置\n * managementClient.userpool.env // 获取用户池配置的环境变量列表\n * \\`\\`\\`\n *\n * @class UsersManagementClient 管理用户池配置\n */\nvar UserPoolManagementClient = /** @class */ (function () {\n    function UserPoolManagementClient(options, httpClient, graphqlClient, tokenProvider) {\n        this.options = options;\n        this.httpClient = httpClient;\n        this.graphqlClient = graphqlClient;\n        this.tokenProvider = tokenProvider;\n    }\n    /**@name detail\n     * @name_zh 查询用户池配置\n     * @description 查询用户池配置\n     *\n     * @example\n     *\n     * const userpool = await managementClient.userpool.detail()\n     *\n     * @returns {Promise<UserPool>}\n     * @memberof UserPoolManagementClient\n     */\n    UserPoolManagementClient.prototype.detail = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var userPool;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.httpClient.request({\n                            method: 'GET',\n                            url: this.options.host + \"/api/v2/userpools/detail\"\n                        })];\n                    case 1:\n                        userPool = _a.sent();\n                        return [2 /*return*/, userPool];\n                }\n            });\n        });\n    };\n    /**\n     * @name update\n     * @name_zh 更新用户池配置\n     * @description 更新用户池配置\n     *\n     * @param {UpdateUserpoolInput} updates\n     * @param {string} [updates.name] 用户池名称\n     * @param {string} [updates.logo] 用户池 logo\n     * @param {string} [updates.domain] 用户池企业应用面板二级域名\n     * @param {string} [updates.description] 描述信息\n     * @param {boolean} [updates.emailVerifiedDefault] 设置邮箱默认为已验证状态（用户的 emailVerified 字段为 true）\n     * @param {boolean} [updates.appSsoEnabled] 开启用户池下的应用之间单点登录\n     * @param {boolean} [updates.sendWelcomeEmail] 用户注册之后是否发送欢迎邮件\n     * @param {boolean} [updates.registerDisabled] 是否关闭注册，当用户池关闭注册之后，普通用户将无法注册账号，只有管理员能够手动创建账号。\n     * @param {string} [updates.allowedOrigins] 安全域配置，安全域（Allowed Origins） 是允许从 JavaScript 向 Authing API 发出请求的 URL（通常与 CORS 一起使用）。 默认情况下，系统会允许你使用所有网址。 如果需要，此字段允许你输入其他来源。 你可以通过逐行分隔多个有效 URL，并在子域级别使用通配符（例如：https://*.sample.com）。\n     * 验证这些 URL 时不考虑查询字符串和哈希信息，如果带上了查询字符串和哈希信息系统会自动忽略整个域名。\n     * 如果有多条请以换行符分隔。\n     * @param {Object} [updates.whitelist] 用户池白名单配置\n     * @param {boolean} [updates.whitelist.phoneEnabled] 是否开启手机号白名单\n     * @param {boolean} [updates.whitelist.emailEnabled] 是否开启邮箱白名单\n     * @param {boolean} [updates.whitelist.usernameEnabled] 是否开启用户名白名单\n     * @param {number} [updates.tokenExpiresAfter] token 过期时间\n     * @param {Object} [updates.loginFailCheck] 频繁登录失败限制，开启之后，在规定时间内超过次数后再次登录需要验证码。如果你的业务存在同一区域同一时间段并发登录的场景，请将此检测关闭。\n     * @param {boolean} [updates.loginFailCheck.enabled] 是否开启\n     * @param {number} [updates.loginFailCheck.timeInterval] 检测周期，单位为秒。\n     * @param {number} [updates.loginFailCheck.limit] 同一 IP 登录失败次数达到多少次的时候会触发限制条件。\n     * @param {Object} [updates.frequentRegisterCheck] 频率注册限制，开启之后同一 IP 频繁注册账号时会触发频率限制，需要等一段时间之后才能重新注册。如果你的业务存在同一区域同一时间段并发注册的场景，请将此检测关闭。\n     * @param {boolean} [updates.frequentRegisterCheck.enabled] 是否开启\n     * @param {Object} [updates.frequentRegisterCheck.timeInterval] 检测周期，单位为秒。\n     * @param {Object} [updates.frequentRegisterCheck.limit] 同一个周期内同一 IP 注册次数达到此数目时会触发频率限制。\n     *\n     *\n     * @example\n     *\n     * const userpool = await managementClient.userpool.update({\n     *    registerDisabled: true // 关闭系统注册\n     * })\n     *\n     * @returns {Promise<UserPool>}\n     * @memberof UserPoolManagementClient\n     */\n    UserPoolManagementClient.prototype.update = function (updates) {\n        return __awaiter(this, void 0, void 0, function () {\n            var res;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, updateUserpool(this.graphqlClient, this.tokenProvider, {\n                            input: updates\n                        })];\n                    case 1:\n                        res = _a.sent();\n                        return [2 /*return*/, res.updateUserpool];\n                }\n            });\n        });\n    };\n    /**\n     * @name listEnv\n     * @name_zh 获取环境变量列表\n     * @description 获取用户池环境变量列表。用户池配置的环境变量可以在 pipeline 场景下使用，详情请见：https://docs.authing.co/extensibility/pipeline/env.html\n     *\n     * @example\n     *\n     * const envList = await managementClient.userpool.listEnv()\n     *\n     * @returns {Promise<Env[]>}\n     * @memberof UserPoolManagementClient\n     */\n    UserPoolManagementClient.prototype.listEnv = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.httpClient.request({\n                            method: 'GET',\n                            url: this.options.host + \"/api/v2/env\"\n                        })];\n                    case 1: return [2 /*return*/, _a.sent()];\n                }\n            });\n        });\n    };\n    /**\n     * @name addEnv\n     * @name_zh 添加环境变量\n     * @description 添加环境变量\n     *\n     * @param {string} key 环境变量键\n     * @param {any} value 环境变量值\n     *\n     * @example\n     *\n     * const envList = await managementClient.userpool.addEnv('LARK_WEBHOOK', 'xxxxxxx') // 添加一个飞书群机器人 webhook 地址，之后可以在 pipeline 函数中使用（详细请见: https://docs.authing.co/extensibility/pipeline/usage.html）\n     *\n     * @returns {Promise<Env[]>} 返回最新的环境变量列表\n     * @memberof UserPoolManagementClient\n     */\n    UserPoolManagementClient.prototype.addEnv = function (key, value) {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.httpClient.request({\n                            method: 'POST',\n                            url: this.options.host + \"/api/v2/env\",\n                            data: {\n                                key: key,\n                                value: value\n                            }\n                        })];\n                    case 1: return [2 /*return*/, _a.sent()];\n                }\n            });\n        });\n    };\n    /**\n     * @name removeEnv\n     * @name_zh 删除环境变量\n     * @description 删除环境变量\n     *\n     * @param {string} key 环境变量键\n     *\n     * @example\n     *\n     * const envList = await managementClient.userpool.removeEnv('LARK_WEBHOOK')\n     *\n     * @returns {Promise<Env[]>} 返回最新的环境变量列表\n     * @memberof UserPoolManagementClient\n     */\n    UserPoolManagementClient.prototype.removeEnv = function (key) {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.httpClient.request({\n                            method: 'DELETE',\n                            url: this.options.host + \"/api/v2/env/\" + key\n                        })];\n                    case 1: return [2 /*return*/, _a.sent()];\n                }\n            });\n        });\n    };\n    return UserPoolManagementClient;\n}());\nexport { UserPoolManagementClient };\n//# sourceMappingURL=UserpoolManagementClient.js.map"]},"metadata":{},"sourceType":"module"}