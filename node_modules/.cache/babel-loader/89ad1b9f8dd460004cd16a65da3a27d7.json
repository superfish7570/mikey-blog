{"ast":null,"code":"import { serialize, popupCenter, isMobileBrowser } from '../utils';\nimport { BaseAuthenticationClient } from './BaseAuthenticationClient';\n/**\n * @class SocialAuthenticationClient 社会化登录模块\n * @description 此模块封装了社会化登录的功能，可以通过简洁的 API 快速使用社会化登录获取用户信息。\n *\n * 发起社会化登录授权请求：\n *\n * \\`\\`\\`javascript\n * import { AuthenticationClient } from \"authing-js-sdk\"\n * const authenticationClient = new AuthenticationClient({\n *    appId: \"YOUR_APP_ID\",\n * })\n * await authenticationClient.social.authorize(\"github\", {\n *    onSuccess: (user) => { console.log(user) },\n *    onError: (code, message) => {  }\n * })\n * \\`\\`\\`\n *\n *\n * @name SocialAuthenticationClient\n */\n\nvar SocialAuthenticationClient =\n/** @class */\nfunction () {\n  function SocialAuthenticationClient(options, tokenProvider, httpClient) {\n    this.options = options;\n    this.tokenProvider = tokenProvider;\n    this.httpClient = httpClient;\n    this.baseClient = new BaseAuthenticationClient(options);\n  }\n  /**\n   * @name authorize\n   * @name_zh 发送授权登录请求\n   * @description 发送授权登录请求，该方法会直接打开一个新窗口，跳转到第三方社会化登录服务商（如 GitHub、微信、钉钉等）的登录授权页面，用户\n   * 完成授权之后，会自动关闭此窗口，并触发 onSuccess 回调函数，通过此函数，你可以获取到用户信息。\n   *\n   * @param {string} provider 社会化登录服务商的标志。\n   * @param {object} [options]\n   * @param {boolean} [options.popup=true] 是否通过弹窗的方式打开社会化登录窗口，如果设置为 false，将会以 window.open 的方式打开一个新的浏览器  tab 。\n   * @param {Function} [options.onSuccess] 用户同意授权事件回调函数，第一个参数为用户信息。\n   * @param {Function} [options.onError] 社会化登录失败事件回调函数，第一个参数 code 为错误码，第二个参数 message 为错误提示。详细的错误码列表请见：详细说明请见：[Authing 错误代码列表](https://docs.authing.co/advanced/error-code.html)\n   * @param {object} [options.position] 只有当 options.popup 为 ture 的时候有效，弹出窗口的位置，默认为 { w: 585, h: 649 } 。\n   * @param {object} [options.authorizationParams] 请求时的额外参数\n   *\n   * @example\n   *\n   * // 使用 GitHub 登录\n   *\n   * const authenticationClient = new AuthenticationClient({\n   *    appId: \"YOUR_APP_ID\",\n   * })\n   *\n   * await authenticationClient.social.authorize(\"github\", {\n   *    onSuccess: (user) => { console.log(user) },\n   *    onError: (code, message) => {  },\n   *    // 自定义弹出窗口的位置\n   *    position: {\n   *      w: 100,\n   *      h: 100\n   *    }\n   * })\n   *\n   * @example\n   *\n   * // 使用新建浏览器 tab 的形式打开社会化登录页面\n   *\n   * const authenticationClient = new AuthenticationClient({\n   *    appId: \"YOUR_APP_ID\",\n   * })\n   *\n   * await authenticationClient.social.authorize(\"github\", {\n   *    popup: false,\n   *    onSuccess: (user) => { console.log(user) },\n   *    onError: (code, message) => {  },\n   * })\n   *\n   * @memberof SocialAuthenticationClient\n   */\n\n\n  SocialAuthenticationClient.prototype.authorize = function (provider, options) {\n    var _this = this;\n\n    options = options || {};\n    var position = options.position,\n        _a = options.popup,\n        popup = _a === void 0 ? true : _a,\n        onSuccess = options.onSuccess,\n        onError = options.onError,\n        authorization_params = options.authorization_params,\n        authorizationParams = options.authorizationParams,\n        context = options.context,\n        customData = options.customData,\n        _b = options.withIdentities,\n        withIdentities = _b === void 0 ? false : _b,\n        _c = options.protocol,\n        protocol = _c === void 0 ? 'oidc' : _c,\n        uuid = options.uuid,\n        _d = options.withCustomData,\n        withCustomData = _d === void 0 ? false : _d,\n        targetUrl = options.targetUrl,\n        relayMethod = options.relayMethod,\n        guardVersion = options.guardVersion; // if (!uuid) {\n    //   uuid = generateRandomString(20);\n    // }\n\n    var query = {\n      from_guard: '1',\n      app_id: this.options.appId,\n      authorization_params: JSON.stringify(authorization_params || authorizationParams),\n      with_identities: withIdentities ? '1' : '0',\n      with_custom_data: withCustomData ? '1' : '0',\n      protocol: protocol,\n      uuid: uuid,\n      target_url: targetUrl,\n      relay_method: relayMethod,\n      guard_version: guardVersion\n    };\n\n    if (context) {\n      query.context = JSON.stringify(context);\n    }\n\n    if (this.options.tenantId) {\n      query.tenant_id = this.options.tenantId;\n    }\n\n    if (customData) {\n      query.custom_data = JSON.stringify(customData);\n    }\n\n    var url = this.baseClient.appHost + \"/connections/social/\" + provider + \"?\" + serialize(query);\n\n    var onMessage = function (e) {\n      var _a = e.data,\n          code = _a.code,\n          message = _a.message,\n          resData = _a.data,\n          event = _a.event;\n      event = event || {};\n      var source = event.source,\n          eventType = event.eventType;\n\n      if (source !== 'authing' || eventType !== 'socialLogin') {\n        return;\n      }\n\n      try {\n        var parsedMsg = JSON.parse(message);\n        code = parsedMsg.code;\n      } catch (e) {// do nothing...\n      }\n\n      if (code === 200) {\n        // 保存用户的 token\n        _this.tokenProvider.setUser(resData);\n\n        onSuccess && onSuccess(resData);\n      } else {\n        onError && onError(code, message, resData);\n      }\n\n      window.removeEventListener('message', onMessage);\n    };\n\n    window.addEventListener('message', onMessage);\n\n    if (isMobileBrowser()) {\n      // 在微信内直接打开\n      window.location.href = url;\n    } else if (popup) {\n      popupCenter(url, position);\n    } else {\n      window.open(url);\n    }\n\n    return Promise.resolve();\n  };\n\n  return SocialAuthenticationClient;\n}();\n\nexport { SocialAuthenticationClient };","map":{"version":3,"sources":["../../../../src/lib/authentication/SocialAuthenticationClient.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { serialize, popupCenter, isMobileBrowser } from '../utils';\nimport { BaseAuthenticationClient } from './BaseAuthenticationClient';\n/**\n * @class SocialAuthenticationClient 社会化登录模块\n * @description 此模块封装了社会化登录的功能，可以通过简洁的 API 快速使用社会化登录获取用户信息。\n *\n * 发起社会化登录授权请求：\n *\n * \\`\\`\\`javascript\n * import { AuthenticationClient } from \"authing-js-sdk\"\n * const authenticationClient = new AuthenticationClient({\n *    appId: \"YOUR_APP_ID\",\n * })\n * await authenticationClient.social.authorize(\"github\", {\n *    onSuccess: (user) => { console.log(user) },\n *    onError: (code, message) => {  }\n * })\n * \\`\\`\\`\n *\n *\n * @name SocialAuthenticationClient\n */\nvar SocialAuthenticationClient = /** @class */ (function () {\n    function SocialAuthenticationClient(options, tokenProvider, httpClient) {\n        this.options = options;\n        this.tokenProvider = tokenProvider;\n        this.httpClient = httpClient;\n        this.baseClient = new BaseAuthenticationClient(options);\n    }\n    /**\n     * @name authorize\n     * @name_zh 发送授权登录请求\n     * @description 发送授权登录请求，该方法会直接打开一个新窗口，跳转到第三方社会化登录服务商（如 GitHub、微信、钉钉等）的登录授权页面，用户\n     * 完成授权之后，会自动关闭此窗口，并触发 onSuccess 回调函数，通过此函数，你可以获取到用户信息。\n     *\n     * @param {string} provider 社会化登录服务商的标志。\n     * @param {object} [options]\n     * @param {boolean} [options.popup=true] 是否通过弹窗的方式打开社会化登录窗口，如果设置为 false，将会以 window.open 的方式打开一个新的浏览器  tab 。\n     * @param {Function} [options.onSuccess] 用户同意授权事件回调函数，第一个参数为用户信息。\n     * @param {Function} [options.onError] 社会化登录失败事件回调函数，第一个参数 code 为错误码，第二个参数 message 为错误提示。详细的错误码列表请见：详细说明请见：[Authing 错误代码列表](https://docs.authing.co/advanced/error-code.html)\n     * @param {object} [options.position] 只有当 options.popup 为 ture 的时候有效，弹出窗口的位置，默认为 { w: 585, h: 649 } 。\n     * @param {object} [options.authorizationParams] 请求时的额外参数\n     *\n     * @example\n     *\n     * // 使用 GitHub 登录\n     *\n     * const authenticationClient = new AuthenticationClient({\n     *    appId: \"YOUR_APP_ID\",\n     * })\n     *\n     * await authenticationClient.social.authorize(\"github\", {\n     *    onSuccess: (user) => { console.log(user) },\n     *    onError: (code, message) => {  },\n     *    // 自定义弹出窗口的位置\n     *    position: {\n     *      w: 100,\n     *      h: 100\n     *    }\n     * })\n     *\n     * @example\n     *\n     * // 使用新建浏览器 tab 的形式打开社会化登录页面\n     *\n     * const authenticationClient = new AuthenticationClient({\n     *    appId: \"YOUR_APP_ID\",\n     * })\n     *\n     * await authenticationClient.social.authorize(\"github\", {\n     *    popup: false,\n     *    onSuccess: (user) => { console.log(user) },\n     *    onError: (code, message) => {  },\n     * })\n     *\n     * @memberof SocialAuthenticationClient\n     */\n    SocialAuthenticationClient.prototype.authorize = function (provider, options) {\n        var _this = this;\n        options = options || {};\n        var position = options.position, _a = options.popup, popup = _a === void 0 ? true : _a, onSuccess = options.onSuccess, onError = options.onError, authorization_params = options.authorization_params, authorizationParams = options.authorizationParams, context = options.context, customData = options.customData, _b = options.withIdentities, withIdentities = _b === void 0 ? false : _b, _c = options.protocol, protocol = _c === void 0 ? 'oidc' : _c, uuid = options.uuid, _d = options.withCustomData, withCustomData = _d === void 0 ? false : _d, targetUrl = options.targetUrl, relayMethod = options.relayMethod, guardVersion = options.guardVersion;\n        // if (!uuid) {\n        //   uuid = generateRandomString(20);\n        // }\n        var query = {\n            from_guard: '1',\n            app_id: this.options.appId,\n            authorization_params: JSON.stringify(authorization_params || authorizationParams),\n            with_identities: withIdentities ? '1' : '0',\n            with_custom_data: withCustomData ? '1' : '0',\n            protocol: protocol,\n            uuid: uuid,\n            target_url: targetUrl,\n            relay_method: relayMethod,\n            guard_version: guardVersion\n        };\n        if (context) {\n            query.context = JSON.stringify(context);\n        }\n        if (this.options.tenantId) {\n            query.tenant_id = this.options.tenantId;\n        }\n        if (customData) {\n            query.custom_data = JSON.stringify(customData);\n        }\n        var url = this.baseClient.appHost + \"/connections/social/\" + provider + \"?\" + serialize(query);\n        var onMessage = function (e) {\n            var _a = e.data, code = _a.code, message = _a.message, resData = _a.data, event = _a.event;\n            event = event || {};\n            var source = event.source, eventType = event.eventType;\n            if (source !== 'authing' || eventType !== 'socialLogin') {\n                return;\n            }\n            try {\n                var parsedMsg = JSON.parse(message);\n                code = parsedMsg.code;\n            }\n            catch (e) {\n                // do nothing...\n            }\n            if (code === 200) {\n                // 保存用户的 token\n                _this.tokenProvider.setUser(resData);\n                onSuccess && onSuccess(resData);\n            }\n            else {\n                onError && onError(code, message, resData);\n            }\n            window.removeEventListener('message', onMessage);\n        };\n        window.addEventListener('message', onMessage);\n        if (isMobileBrowser()) {\n            // 在微信内直接打开\n            window.location.href = url;\n        }\n        else if (popup) {\n            popupCenter(url, position);\n        }\n        else {\n            window.open(url);\n        }\n        return Promise.resolve();\n    };\n    return SocialAuthenticationClient;\n}());\nexport { SocialAuthenticationClient };\n//# sourceMappingURL=SocialAuthenticationClient.js.map"]},"metadata":{},"sourceType":"module"}