{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function () {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n\n        case 7:\n          op = _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n\n            _.ops.push(op);\n\n            break;\n          }\n\n          if (t[2]) _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n      }\n\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n/**\n * @class AgreementManagementClient 管理多因素认证\n * @description 用于管理注册协议\n *\n * @example\n *\n * 请使用以下方式使用该模块：\n * \\`\\`\\`javascript\n * import { ManagementClient } from \"authing-js-sdk\"\n * const managementClient = new ManagementClient({\n *    userPoolId: \"YOUR_USERPOOL_ID\",\n *    secret: \"YOUR_USERPOOL_SECRET\",\n * })\n * managementClient.applications.listAgreement(\"APP_ID\") // 获取某个应用的注册协议列表\n * \\`\\`\\`\n *\n * @name AgreementManagementClient\n */\n\n\nvar AgreementManagementClient =\n/** @class */\nfunction () {\n  function AgreementManagementClient(options, graphqlClient, httpClient, tokenProvider) {\n    this.options = options;\n    this.httpClient = httpClient;\n    this.graphqlClient = graphqlClient;\n    this.tokenProvider = tokenProvider;\n  }\n  /**\n   * @description 在某个应用下创建注册协议\n   * @param {object} appId 应用 ID\n   * @param {object} agreement\n   * @param {string} agreement.title 协议标题，可以包含 HTML A 标签\n   * @param {boolean} [agreement.required] 是否必须才允许注册，默认为 true\n   * @param {lang} [agreement.lang] 协议标题语言，可选 zh-CN, en-US，默认为 zh-CN，在托管登录页面中会根据界面语言展示协议\n   */\n\n\n  AgreementManagementClient.prototype.create = function (appId, agreement) {\n    return __awaiter(this, void 0, void 0, function () {\n      var mergedData, data;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            mergedData = __assign({\n              lang: 'zh-CN',\n              required: true\n            }, agreement);\n            return [4\n            /*yield*/\n            , this.httpClient.request({\n              url: this.options.host + \"/api/v2/applications/\" + appId + \"/agreements\",\n              method: 'POST',\n              data: mergedData\n            })];\n\n          case 1:\n            data = _a.sent();\n            return [2\n            /*return*/\n            , data];\n        }\n      });\n    });\n  };\n  /**\n   * @description 获取应用注册协议列表\n   * @param {string} appId 应用 ID\n   */\n\n\n  AgreementManagementClient.prototype.list = function (appId) {\n    return __awaiter(this, void 0, void 0, function () {\n      var data;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.httpClient.request({\n              url: this.options.host + \"/api/v2/applications/\" + appId + \"/agreements\",\n              method: 'GET'\n            })];\n\n          case 1:\n            data = _a.sent();\n            return [2\n            /*return*/\n            , data];\n        }\n      });\n    });\n  };\n  /**\n   * @description 删除应用下某个注册协议\n   * @param {string} appId 应用 ID\n   * @param {number} agreementId 协议 ID\n   */\n\n\n  AgreementManagementClient.prototype.delete = function (appId, agreementId) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.httpClient.request({\n              url: this.options.host + \"/api/v2/applications/\" + appId + \"/agreements/\" + agreementId,\n              method: 'DELETE'\n            })];\n\n          case 1:\n            _a.sent();\n\n            return [2\n            /*return*/\n            , true];\n        }\n      });\n    });\n  };\n  /**\n   * @description 修改应用下某个注册协议\n   * @param {string} appId 应用 ID\n   * @param {number} agreementId 协议 ID\n   * @param {object} updates 更新内容\n   * @param {string} [updates.title] 协议标题，可以包含 HTML A 标签\n   * @param {boolean} [updates.required] 是否必须才允许注册，默认为 true\n   * @param {lang} [updates.lang] 协议标题语言，可选 zh-CN, en-US，默认为 zh-CN，在托管登录页面中会根据界面语言展示协议\n   */\n\n\n  AgreementManagementClient.prototype.modify = function (appId, agreementId, updates) {\n    return __awaiter(this, void 0, void 0, function () {\n      var data;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.httpClient.request({\n              url: this.options.host + \"/api/v2/applications/\" + appId + \"/agreements/\" + agreementId,\n              method: 'PUT',\n              data: updates\n            })];\n\n          case 1:\n            data = _a.sent();\n            return [2\n            /*return*/\n            , data];\n        }\n      });\n    });\n  };\n  /**\n   * @description 对某个应用下的注册协议进行排序\n   * @param {string} appId 应用 ID\n   * @param {number[]} order 应用下所有协议的 ID 列表，按需要的顺序排列\n   */\n\n\n  AgreementManagementClient.prototype.sort = function (appId, order) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.httpClient.request({\n              url: this.options.host + \"/api/v2/applications/\" + appId + \"/agreements/sort\",\n              method: 'POST',\n              data: {\n                ids: order\n              }\n            })];\n\n          case 1:\n            _a.sent();\n\n            return [2\n            /*return*/\n            , true];\n        }\n      });\n    });\n  };\n\n  return AgreementManagementClient;\n}();\n\nexport { AgreementManagementClient };","map":{"version":3,"sources":["../../../../src/lib/management/AgreementManagementClient.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\n/**\n * @class AgreementManagementClient 管理多因素认证\n * @description 用于管理注册协议\n *\n * @example\n *\n * 请使用以下方式使用该模块：\n * \\`\\`\\`javascript\n * import { ManagementClient } from \"authing-js-sdk\"\n * const managementClient = new ManagementClient({\n *    userPoolId: \"YOUR_USERPOOL_ID\",\n *    secret: \"YOUR_USERPOOL_SECRET\",\n * })\n * managementClient.applications.listAgreement(\"APP_ID\") // 获取某个应用的注册协议列表\n * \\`\\`\\`\n *\n * @name AgreementManagementClient\n */\nvar AgreementManagementClient = /** @class */ (function () {\n    function AgreementManagementClient(options, graphqlClient, httpClient, tokenProvider) {\n        this.options = options;\n        this.httpClient = httpClient;\n        this.graphqlClient = graphqlClient;\n        this.tokenProvider = tokenProvider;\n    }\n    /**\n     * @description 在某个应用下创建注册协议\n     * @param {object} appId 应用 ID\n     * @param {object} agreement\n     * @param {string} agreement.title 协议标题，可以包含 HTML A 标签\n     * @param {boolean} [agreement.required] 是否必须才允许注册，默认为 true\n     * @param {lang} [agreement.lang] 协议标题语言，可选 zh-CN, en-US，默认为 zh-CN，在托管登录页面中会根据界面语言展示协议\n     */\n    AgreementManagementClient.prototype.create = function (appId, agreement) {\n        return __awaiter(this, void 0, void 0, function () {\n            var mergedData, data;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        mergedData = __assign({ lang: 'zh-CN', required: true }, agreement);\n                        return [4 /*yield*/, this.httpClient.request({\n                                url: this.options.host + \"/api/v2/applications/\" + appId + \"/agreements\",\n                                method: 'POST',\n                                data: mergedData\n                            })];\n                    case 1:\n                        data = _a.sent();\n                        return [2 /*return*/, data];\n                }\n            });\n        });\n    };\n    /**\n     * @description 获取应用注册协议列表\n     * @param {string} appId 应用 ID\n     */\n    AgreementManagementClient.prototype.list = function (appId) {\n        return __awaiter(this, void 0, void 0, function () {\n            var data;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.httpClient.request({\n                            url: this.options.host + \"/api/v2/applications/\" + appId + \"/agreements\",\n                            method: 'GET'\n                        })];\n                    case 1:\n                        data = _a.sent();\n                        return [2 /*return*/, data];\n                }\n            });\n        });\n    };\n    /**\n     * @description 删除应用下某个注册协议\n     * @param {string} appId 应用 ID\n     * @param {number} agreementId 协议 ID\n     */\n    AgreementManagementClient.prototype.delete = function (appId, agreementId) {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.httpClient.request({\n                            url: this.options.host + \"/api/v2/applications/\" + appId + \"/agreements/\" + agreementId,\n                            method: 'DELETE'\n                        })];\n                    case 1:\n                        _a.sent();\n                        return [2 /*return*/, true];\n                }\n            });\n        });\n    };\n    /**\n     * @description 修改应用下某个注册协议\n     * @param {string} appId 应用 ID\n     * @param {number} agreementId 协议 ID\n     * @param {object} updates 更新内容\n     * @param {string} [updates.title] 协议标题，可以包含 HTML A 标签\n     * @param {boolean} [updates.required] 是否必须才允许注册，默认为 true\n     * @param {lang} [updates.lang] 协议标题语言，可选 zh-CN, en-US，默认为 zh-CN，在托管登录页面中会根据界面语言展示协议\n     */\n    AgreementManagementClient.prototype.modify = function (appId, agreementId, updates) {\n        return __awaiter(this, void 0, void 0, function () {\n            var data;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.httpClient.request({\n                            url: this.options.host + \"/api/v2/applications/\" + appId + \"/agreements/\" + agreementId,\n                            method: 'PUT',\n                            data: updates\n                        })];\n                    case 1:\n                        data = _a.sent();\n                        return [2 /*return*/, data];\n                }\n            });\n        });\n    };\n    /**\n     * @description 对某个应用下的注册协议进行排序\n     * @param {string} appId 应用 ID\n     * @param {number[]} order 应用下所有协议的 ID 列表，按需要的顺序排列\n     */\n    AgreementManagementClient.prototype.sort = function (appId, order) {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.httpClient.request({\n                            url: this.options.host + \"/api/v2/applications/\" + appId + \"/agreements/sort\",\n                            method: 'POST',\n                            data: {\n                                ids: order\n                            }\n                        })];\n                    case 1:\n                        _a.sent();\n                        return [2 /*return*/, true];\n                }\n            });\n        });\n    };\n    return AgreementManagementClient;\n}());\nexport { AgreementManagementClient };\n//# sourceMappingURL=AgreementManagementClient.js.map"]},"metadata":{},"sourceType":"module"}