{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function () {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n\n        case 7:\n          op = _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n\n            _.ops.push(op);\n\n            break;\n          }\n\n          if (t[2]) _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n      }\n\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nimport { WhitelistType } from '../../types/graphql.v2';\nimport { getWhiteList, addWhiteList, removeWhiteList, updateUserpool } from '../graphqlapi';\n/**\n * @name WhitelistManagementClient\n * @description 为你的用户池配置一个注册白名单，类似于邀请注册规则，开启后，只有白名单里的用户才能进行注册。 Authing 目前支持的白名单方式有手机号、邮箱、用户名。\n *\n * 此模块可以用于对注册白名单进行管理。\n *\n * @example\n *\n * 请使用以下方式使用该模块：\n * \\`\\`\\`javascript\n * import { ManagementClient } from \"authing-js-sdk\"\n * const managementClient = new ManagementClient({\n *    userPoolId: \"YOUR_USERPOOL_ID\",\n *    secret: \"YOUR_USERPOOL_SECRET\",\n * })\n * managementClient.whitelist.list // 获取注册白名单记录\n * managementClient.whitelist.add // 添加白名单记录\n * managementClient.whitelist.remove // 移除白名单记录\n * \\`\\`\\`\n *\n * @class WhitelistManagementClient 管理注册白名单\n */\n\nvar WhitelistManagementClient =\n/** @class */\nfunction () {\n  function WhitelistManagementClient(options, graphqlClient, tokenProvider) {\n    this.options = options;\n    this.graphqlClient = graphqlClient;\n    this.tokenProvider = tokenProvider;\n  }\n  /**\n   * @name list\n   * @name_zh 获取白名单记录\n   * @description 获取白名单记录\n   *\n   * @param {WhitelistType} type 白名单类型，USERNAME 为用户名、Email 为邮箱、Phone 为手机号。\n   *\n   * @example\n   *\n   * import { WhitelistType } from \"authing-js-sdk\"\n   * const list = await managementClient.whitelist.list(WhitelistType.Email);\n   *\n   * @returns {Promise<WhiteList[]>}\n   * @memberof WhitelistManagementClient\n   */\n\n\n  WhitelistManagementClient.prototype.list = function (type) {\n    return __awaiter(this, void 0, void 0, function () {\n      var whitelist;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , getWhiteList(this.graphqlClient, this.tokenProvider, {\n              type: type\n            })];\n\n          case 1:\n            whitelist = _a.sent().whitelist;\n            return [2\n            /*return*/\n            , whitelist];\n        }\n      });\n    });\n  };\n  /**\n   * @name add\n   * @name_zh 添加白名单\n   * @description 添加白名单\n   *\n   * @param {WhitelistType} type 白名单类型，USERNAME 为用户名、Email 为邮箱、Phone 为手机号。\n   * @param {string[]} list 白名单列表，请注意邮箱不区分大小写。\n   *\n   * @example\n   *\n   * await managementClient.whitelist.add(WhitelistType.Email, 'a@example.com');\n   *\n   * @returns {Promise<WhiteList[]>}\n   * @memberof WhitelistManagementClient\n   */\n\n\n  WhitelistManagementClient.prototype.add = function (type, list) {\n    return __awaiter(this, void 0, void 0, function () {\n      var whiteList;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , addWhiteList(this.graphqlClient, this.tokenProvider, {\n              type: type,\n              list: list\n            })];\n\n          case 1:\n            whiteList = _a.sent().addWhitelist;\n            return [2\n            /*return*/\n            , whiteList];\n        }\n      });\n    });\n  };\n  /**\n   * @name remove\n   * @name_zh 移除白名单\n   * @description 移除白名单\n   *\n   * @param {WhitelistType} type 白名单类型，USERNAME 为用户名、Email 为邮箱、Phone 为手机号。\n   * @param {string[]} list 白名单列表，请注意邮箱不区分大小写。\n   *\n   * @example\n   *\n   * await managementClient.whitelist.remove(WhitelistType.Email, 'a@example.com');\n   *\n   *\n   * @returns {Promise<WhiteList[]>}\n   * @memberof WhitelistManagementClient\n   */\n\n\n  WhitelistManagementClient.prototype.remove = function (type, list) {\n    return __awaiter(this, void 0, void 0, function () {\n      var whiteList;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , removeWhiteList(this.graphqlClient, this.tokenProvider, {\n              type: type,\n              list: list\n            })];\n\n          case 1:\n            whiteList = _a.sent().removeWhitelist;\n            return [2\n            /*return*/\n            , whiteList];\n        }\n      });\n    });\n  };\n  /**\n   * @name enable\n   * @name_zh 开启白名单\n   * @description 开启白名单\n   *\n   * @param {WhitelistType} type 白名单类型，USERNAME 为用户名、Email 为邮箱、Phone 为手机号。\n   *\n   * @example\n   *\n   *\n   * // 添加白名单\n   *\n   * import { WhitelistType } from \"authing-js-sdk\"\n   * await managementClient.whitelist.enable(WhitelistType.Email);\n   * await managementClient.whitelist.add(WhitelistType.Email, [‘a@wxample.com’]);\n   *\n   * // 使用不在白名单内的账号注册，不提示无法注册。\n   *\n   * await authing.registerByEmail(email, 'b@example.com');\n   *\n   * @memberof WhitelistManagementClient\n   */\n\n\n  WhitelistManagementClient.prototype.enable = function (type) {\n    return __awaiter(this, void 0, void 0, function () {\n      var updates;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            updates = {};\n\n            if (type === WhitelistType.Email) {\n              updates.emailEnabled = true;\n            } else if (type === WhitelistType.Phone) {\n              updates.phoneEnabled = true;\n            } else if (type === WhitelistType.Username) {\n              updates.usernameEnabled = true;\n            } else {\n              this.options.onError(500, '不支持的白名单类型');\n            }\n\n            return [4\n            /*yield*/\n            , updateUserpool(this.graphqlClient, this.tokenProvider, {\n              input: {\n                whitelist: updates\n              }\n            })];\n\n          case 1:\n            _a.sent();\n\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * @name disable\n   * @name_zh 关闭白名单\n   * @description 关闭白名单\n   *\n   * @param {WhitelistType} type 白名单类型，USERNAME 为用户名、Email 为邮箱、Phone 为手机号。\n   *\n   * @memberof WhitelistManagementClient\n   */\n\n\n  WhitelistManagementClient.prototype.disable = function (type) {\n    return __awaiter(this, void 0, void 0, function () {\n      var updates;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            updates = {};\n\n            if (type === WhitelistType.Email) {\n              updates.emailEnabled = false;\n            } else if (type === WhitelistType.Phone) {\n              updates.phoneEnabled = false;\n            } else if (type === WhitelistType.Username) {\n              updates.usernameEnabled = false;\n            } else {\n              this.options.onError(500, '不支持的白名单类型');\n            }\n\n            return [4\n            /*yield*/\n            , updateUserpool(this.graphqlClient, this.tokenProvider, {\n              input: {\n                whitelist: updates\n              }\n            })];\n\n          case 1:\n            _a.sent();\n\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  return WhitelistManagementClient;\n}();\n\nexport { WhitelistManagementClient };","map":{"version":3,"sources":["../../../../src/lib/management/WhitelistManagementClient.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nimport { WhitelistType } from '../../types/graphql.v2';\nimport { getWhiteList, addWhiteList, removeWhiteList, updateUserpool } from '../graphqlapi';\n/**\n * @name WhitelistManagementClient\n * @description 为你的用户池配置一个注册白名单，类似于邀请注册规则，开启后，只有白名单里的用户才能进行注册。 Authing 目前支持的白名单方式有手机号、邮箱、用户名。\n *\n * 此模块可以用于对注册白名单进行管理。\n *\n * @example\n *\n * 请使用以下方式使用该模块：\n * \\`\\`\\`javascript\n * import { ManagementClient } from \"authing-js-sdk\"\n * const managementClient = new ManagementClient({\n *    userPoolId: \"YOUR_USERPOOL_ID\",\n *    secret: \"YOUR_USERPOOL_SECRET\",\n * })\n * managementClient.whitelist.list // 获取注册白名单记录\n * managementClient.whitelist.add // 添加白名单记录\n * managementClient.whitelist.remove // 移除白名单记录\n * \\`\\`\\`\n *\n * @class WhitelistManagementClient 管理注册白名单\n */\nvar WhitelistManagementClient = /** @class */ (function () {\n    function WhitelistManagementClient(options, graphqlClient, tokenProvider) {\n        this.options = options;\n        this.graphqlClient = graphqlClient;\n        this.tokenProvider = tokenProvider;\n    }\n    /**\n     * @name list\n     * @name_zh 获取白名单记录\n     * @description 获取白名单记录\n     *\n     * @param {WhitelistType} type 白名单类型，USERNAME 为用户名、Email 为邮箱、Phone 为手机号。\n     *\n     * @example\n     *\n     * import { WhitelistType } from \"authing-js-sdk\"\n     * const list = await managementClient.whitelist.list(WhitelistType.Email);\n     *\n     * @returns {Promise<WhiteList[]>}\n     * @memberof WhitelistManagementClient\n     */\n    WhitelistManagementClient.prototype.list = function (type) {\n        return __awaiter(this, void 0, void 0, function () {\n            var whitelist;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, getWhiteList(this.graphqlClient, this.tokenProvider, {\n                            type: type\n                        })];\n                    case 1:\n                        whitelist = (_a.sent()).whitelist;\n                        return [2 /*return*/, whitelist];\n                }\n            });\n        });\n    };\n    /**\n     * @name add\n     * @name_zh 添加白名单\n     * @description 添加白名单\n     *\n     * @param {WhitelistType} type 白名单类型，USERNAME 为用户名、Email 为邮箱、Phone 为手机号。\n     * @param {string[]} list 白名单列表，请注意邮箱不区分大小写。\n     *\n     * @example\n     *\n     * await managementClient.whitelist.add(WhitelistType.Email, 'a@example.com');\n     *\n     * @returns {Promise<WhiteList[]>}\n     * @memberof WhitelistManagementClient\n     */\n    WhitelistManagementClient.prototype.add = function (type, list) {\n        return __awaiter(this, void 0, void 0, function () {\n            var whiteList;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, addWhiteList(this.graphqlClient, this.tokenProvider, {\n                            type: type,\n                            list: list\n                        })];\n                    case 1:\n                        whiteList = (_a.sent()).addWhitelist;\n                        return [2 /*return*/, whiteList];\n                }\n            });\n        });\n    };\n    /**\n     * @name remove\n     * @name_zh 移除白名单\n     * @description 移除白名单\n     *\n     * @param {WhitelistType} type 白名单类型，USERNAME 为用户名、Email 为邮箱、Phone 为手机号。\n     * @param {string[]} list 白名单列表，请注意邮箱不区分大小写。\n     *\n     * @example\n     *\n     * await managementClient.whitelist.remove(WhitelistType.Email, 'a@example.com');\n     *\n     *\n     * @returns {Promise<WhiteList[]>}\n     * @memberof WhitelistManagementClient\n     */\n    WhitelistManagementClient.prototype.remove = function (type, list) {\n        return __awaiter(this, void 0, void 0, function () {\n            var whiteList;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, removeWhiteList(this.graphqlClient, this.tokenProvider, {\n                            type: type,\n                            list: list\n                        })];\n                    case 1:\n                        whiteList = (_a.sent()).removeWhitelist;\n                        return [2 /*return*/, whiteList];\n                }\n            });\n        });\n    };\n    /**\n     * @name enable\n     * @name_zh 开启白名单\n     * @description 开启白名单\n     *\n     * @param {WhitelistType} type 白名单类型，USERNAME 为用户名、Email 为邮箱、Phone 为手机号。\n     *\n     * @example\n     *\n     *\n     * // 添加白名单\n     *\n     * import { WhitelistType } from \"authing-js-sdk\"\n     * await managementClient.whitelist.enable(WhitelistType.Email);\n     * await managementClient.whitelist.add(WhitelistType.Email, [‘a@wxample.com’]);\n     *\n     * // 使用不在白名单内的账号注册，不提示无法注册。\n     *\n     * await authing.registerByEmail(email, 'b@example.com');\n     *\n     * @memberof WhitelistManagementClient\n     */\n    WhitelistManagementClient.prototype.enable = function (type) {\n        return __awaiter(this, void 0, void 0, function () {\n            var updates;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        updates = {};\n                        if (type === WhitelistType.Email) {\n                            updates.emailEnabled = true;\n                        }\n                        else if (type === WhitelistType.Phone) {\n                            updates.phoneEnabled = true;\n                        }\n                        else if (type === WhitelistType.Username) {\n                            updates.usernameEnabled = true;\n                        }\n                        else {\n                            this.options.onError(500, '不支持的白名单类型');\n                        }\n                        return [4 /*yield*/, updateUserpool(this.graphqlClient, this.tokenProvider, {\n                                input: {\n                                    whitelist: updates\n                                }\n                            })];\n                    case 1:\n                        _a.sent();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * @name disable\n     * @name_zh 关闭白名单\n     * @description 关闭白名单\n     *\n     * @param {WhitelistType} type 白名单类型，USERNAME 为用户名、Email 为邮箱、Phone 为手机号。\n     *\n     * @memberof WhitelistManagementClient\n     */\n    WhitelistManagementClient.prototype.disable = function (type) {\n        return __awaiter(this, void 0, void 0, function () {\n            var updates;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        updates = {};\n                        if (type === WhitelistType.Email) {\n                            updates.emailEnabled = false;\n                        }\n                        else if (type === WhitelistType.Phone) {\n                            updates.phoneEnabled = false;\n                        }\n                        else if (type === WhitelistType.Username) {\n                            updates.usernameEnabled = false;\n                        }\n                        else {\n                            this.options.onError(500, '不支持的白名单类型');\n                        }\n                        return [4 /*yield*/, updateUserpool(this.graphqlClient, this.tokenProvider, {\n                                input: {\n                                    whitelist: updates\n                                }\n                            })];\n                    case 1:\n                        _a.sent();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    return WhitelistManagementClient;\n}());\nexport { WhitelistManagementClient };\n//# sourceMappingURL=WhitelistManagementClient.js.map"]},"metadata":{},"sourceType":"module"}