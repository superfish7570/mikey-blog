{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function () {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n\n        case 7:\n          op = _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n\n            _.ops.push(op);\n\n            break;\n          }\n\n          if (t[2]) _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n      }\n\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nimport { PolicyAssignmentTargetType, UdfTargetType } from '../../types/graphql.v2';\nimport { assignRole, addRole, roles, role, roleWithUsers, updateRole, revokeRole, deleteRole, deleteRoles, policyAssignments, addPolicyAssignments, removePolicyAssignments, listRoleAuthorizedResources, udv, udfValueBatch, setUdvBatch, setUdfValueBatch, removeUdv, roleWithUsersWithCustomData } from '../graphqlapi';\nimport { convertUdvToKeyValuePair, formatAuthorizedResources } from '../utils';\n/**\n * @class RolesManagementClient 管理角色\n * @description 此模块用于管理 Authing 角色，可以进行角色的增删改查、角色添加/删除用户、角色添加/删除策略 等操作。\n *\n * @example\n *\n * 请使用以下方式使用该模块，而不要直接初始化该模块：\n * \\`\\`\\`javascript\n * import { ManagementClient } from \"authing-js-sdk\"\n * const managementClient = new ManagementClient({\n *    userPoolId: \"YOUR_USERPOOL_ID\",\n *    secret: \"YOUR_USERPOOL_SECRET\",\n * })\n * managementClient.roles.list // 获取角色列表\n * managementClient.roles.create // 创建角色\n * managementClient.roles.listUsers // 获取角色用户列表\n * \\`\\`\\`\n *\n * @name RolesManagementClient\n */\n\nvar RolesManagementClient =\n/** @class */\nfunction () {\n  function RolesManagementClient(options, graphqlClient, httpClient, tokenProvider) {\n    this.options = options;\n    this.graphqlClient = graphqlClient;\n    this.httpClient = httpClient;\n    this.tokenProvider = tokenProvider;\n  }\n  /**\n   * @name create\n   * @name_zh 创建角色\n   * @description 创建角色\n   *\n   * @param {string} code 角色唯一标志符\n   * @param {string} [options.description] 描述\n   * @param {string} [options.namespace] 该角色所在的 namespace，默认为 default\n   *\n   * @example\n   * managementClient.roles.create('rolea', 'RoleA')\n   *\n   * @returns {Promise<DeepPartial<Role>>}\n   * @memberof RolesManagementClient\n   */\n\n\n  RolesManagementClient.prototype.create = function (code, description, namespace) {\n    return __awaiter(this, void 0, void 0, function () {\n      var res;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , addRole(this.graphqlClient, this.tokenProvider, {\n              code: code,\n              description: description,\n              namespace: namespace\n            })];\n\n          case 1:\n            res = _a.sent();\n            return [2\n            /*return*/\n            , res.createRole];\n        }\n      });\n    });\n  };\n  /**\n   * @name delete\n   * @name_zh 删除角色\n   * @description 删除角色\n   *\n   * @param {string} code 角色唯一标志符\n   * @param {string} [namespace] 角色所属的 Namespace code，默认值为 'default'\n   *\n   * @example\n   * managementClient.roles.delete('rolea')\n   *\n   * @returns {Promise<CommonMessage>}\n   * @memberof RolesManagementClient\n   */\n\n\n  RolesManagementClient.prototype.delete = function (code, namespace) {\n    return __awaiter(this, void 0, void 0, function () {\n      var data;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , deleteRole(this.graphqlClient, this.tokenProvider, {\n              code: code,\n              namespace: namespace\n            })];\n\n          case 1:\n            data = _a.sent().deleteRole;\n            return [2\n            /*return*/\n            , data];\n        }\n      });\n    });\n  };\n  /**\n   * @name deleteMany\n   * @name_zh 批量删除角色\n   * @description 批量删除角色\n   *\n   * @param {string[]} codeList 角色唯一标志符列表\n   * @param {string} [namespace] 角色所属的 Namespace，默认值为 'default'\n   *\n   * @example\n   * managementClient.roles.delete(['rolea'])\n   *\n   * @returns {Promise<CommonMessage>}\n   * @memberof RolesManagementClient\n   */\n\n\n  RolesManagementClient.prototype.deleteMany = function (codeList, namespace) {\n    return __awaiter(this, void 0, void 0, function () {\n      var data;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , deleteRoles(this.graphqlClient, this.tokenProvider, {\n              codeList: codeList,\n              namespace: namespace\n            })];\n\n          case 1:\n            data = _a.sent().deleteRoles;\n            return [2\n            /*return*/\n            , data];\n        }\n      });\n    });\n  };\n  /**\n   * @name update\n   * @name_zh 修改角色\n   * @description 修改角色\n   *\n   * @param {string} code 角色唯一标志符\n   * @param {Object} options\n   * @param {string} options.description 描述信息\n   * @param {string} options.newCode 新的唯一标志符\n   * @param {string} options.namespace 角色所属的 Namespace，默认值为 'default'\n   *\n   * @example\n   * managementClient.roles.update('rolea', {newCode: 'newcode'})\n   *\n   *\n   * @returns {Promise<DeepPartial<Role>>}\n   * @memberof RolesManagementClient\n   */\n\n\n  RolesManagementClient.prototype.update = function (code, options) {\n    return __awaiter(this, void 0, void 0, function () {\n      var description, newCode, namespace, data;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            description = options.description, newCode = options.newCode, namespace = options.namespace;\n            return [4\n            /*yield*/\n            , updateRole(this.graphqlClient, this.tokenProvider, {\n              code: code,\n              description: description,\n              newCode: newCode,\n              namespace: namespace\n            })];\n\n          case 1:\n            data = _a.sent().updateRole;\n            return [2\n            /*return*/\n            , data];\n        }\n      });\n    });\n  };\n  /**\n   * @deprecated  已过时, 不建议使用\n   */\n\n\n  RolesManagementClient.prototype.detail = function (code, namespace) {\n    return __awaiter(this, void 0, void 0, function () {\n      var data;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , role(this.graphqlClient, this.tokenProvider, {\n              code: code,\n              namespace: namespace\n            })];\n\n          case 1:\n            data = _a.sent().role;\n            return [2\n            /*return*/\n            , data];\n        }\n      });\n    });\n  };\n  /**\n   *\n   * @name findByCode\n   * @name_zh 获取角色详情\n   * @description 获取角色详情\n   *\n   * @param {string} code 角色唯一标志符\n   * @param {string} [namespace] 角色所属的 Namespace，默认值为 'default'\n   *\n   * @example`\n   * managementClient.roles.detail('manager')\n   *\n   * @returns {Promise<DeepPartial<Role>>} 角色详情\n   * @memberof RolesManagementClient\n   */\n\n\n  RolesManagementClient.prototype.findByCode = function (code, namespace) {\n    return __awaiter(this, void 0, void 0, function () {\n      var data;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.detail(code, namespace)];\n\n          case 1:\n            data = _a.sent();\n            return [2\n            /*return*/\n            , data];\n        }\n      });\n    });\n  };\n  /**\n   * @name list\n   * @name_zh 获取角色列表\n   * @description 获取角色列表\n   *\n   * @param {Object} [options]\n   * @param {number} [options.page=1] 页码数\n   * @param {number} [options.limit=10] 每页个数\n   * @param {string} [options.namespace] 角色所属的 Namespace，默认值为 'default'\n   *\n   * @example\n   * managementClient.roles.list(2, 10)\n   *\n   * @returns {Promise<DeepPartial<PaginatedRoles>>}\n   * @memberof RolesManagementClient\n   */\n\n\n  RolesManagementClient.prototype.list = function (options) {\n    return __awaiter(this, void 0, void 0, function () {\n      var _a, _b, page, _c, limit, namespace, data;\n\n      return __generator(this, function (_d) {\n        switch (_d.label) {\n          case 0:\n            _a = options || {}, _b = _a.page, page = _b === void 0 ? 1 : _b, _c = _a.limit, limit = _c === void 0 ? 10 : _c, namespace = _a.namespace;\n            return [4\n            /*yield*/\n            , roles(this.graphqlClient, this.tokenProvider, {\n              page: page,\n              limit: limit,\n              namespace: namespace\n            })];\n\n          case 1:\n            data = _d.sent().roles;\n            return [2\n            /*return*/\n            , data];\n        }\n      });\n    });\n  };\n  /**\n   * @name listUsers\n   * @name_zh 获取角色用户列表\n   * @description 获取角色用户列表\n   *\n   * @param {string} code 角色唯一标志符\n   * * @param {string} [namespace] 角色所属的 Namespace，默认值为 'default'\n   *\n   * @example\n   * managementClient.roles.listUsers(code)\n   *\n   * @returns {Promise<DeepPartial<PaginatedUsers>>}\n   * @memberof RolesManagementClient\n   */\n\n\n  RolesManagementClient.prototype.listUsers = function (code, options) {\n    return __awaiter(this, void 0, void 0, function () {\n      var _a, namespace, _b, withCustomData, _c, page, _d, limit, data, data, _e, totalCount, list;\n\n      return __generator(this, function (_f) {\n        switch (_f.label) {\n          case 0:\n            _a = options || {}, namespace = _a.namespace, _b = _a.withCustomData, withCustomData = _b === void 0 ? false : _b, _c = _a.page, page = _c === void 0 ? 1 : _c, _d = _a.limit, limit = _d === void 0 ? 10 : _d;\n            if (!!withCustomData) return [3\n            /*break*/\n            , 2];\n            return [4\n            /*yield*/\n            , roleWithUsers(this.graphqlClient, this.tokenProvider, {\n              code: code,\n              namespace: namespace,\n              page: page,\n              limit: limit\n            })];\n\n          case 1:\n            data = _f.sent().role;\n\n            if (!data) {\n              return [2\n              /*return*/\n              , {\n                totalCount: 0,\n                list: []\n              }];\n            }\n\n            return [2\n            /*return*/\n            , data.users];\n\n          case 2:\n            return [4\n            /*yield*/\n            , roleWithUsersWithCustomData(this.graphqlClient, this.tokenProvider, {\n              code: code,\n              namespace: namespace,\n              page: page,\n              limit: limit\n            })];\n\n          case 3:\n            data = _f.sent().role;\n\n            if (!data) {\n              return [2\n              /*return*/\n              , {\n                totalCount: 0,\n                list: []\n              }];\n            }\n\n            _e = data.users, totalCount = _e.totalCount, list = _e.list;\n            list = list.map(function (user) {\n              // @ts-ignore\n              user.customData = convertUdvToKeyValuePair(user.customData);\n              return user;\n            });\n            return [2\n            /*return*/\n            , {\n              totalCount: totalCount,\n              // @ts-ignore\n              list: list\n            }];\n        }\n      });\n    });\n  };\n  /**\n   * @name findUsers\n   * @name_zh 查找角色特定用户\n   * @description 查找角色特定用户\n   *\n   * @param {string} code 角色唯一标志符\n   * * @param {string} [namespace] 角色所属的 Namespace，默认值为 'default'\n   * * @param {string} [search] 匹配用户、手机、组织模糊搜索，默认值为 ''\n   *\n   * @example\n   * managementClient.roles.findUsers(code)\n   *\n   * @returns {Promise<DeepPartial<PaginatedUsers>>}\n   * @memberof RolesManagementClient\n   */\n\n\n  RolesManagementClient.prototype.findUsers = function (code, options) {\n    return __awaiter(this, void 0, void 0, function () {\n      var _a, _b, namespace, _c, search, _d, page, _e, limit, data;\n\n      return __generator(this, function (_f) {\n        switch (_f.label) {\n          case 0:\n            _a = options || {}, _b = _a.namespace, namespace = _b === void 0 ? 'default' : _b, _c = _a.search, search = _c === void 0 ? '' : _c, _d = _a.page, page = _d === void 0 ? 1 : _d, _e = _a.limit, limit = _e === void 0 ? 10 : _e;\n            return [4\n            /*yield*/\n            , this.httpClient.request({\n              method: 'POST',\n              url: this.options.host + \"/api/v2/roles/roleUsers\",\n              data: {\n                namespace: namespace,\n                code: code,\n                limit: limit,\n                page: page,\n                search: search\n              }\n            })];\n\n          case 1:\n            data = _f.sent();\n            return [2\n            /*return*/\n            , data];\n        }\n      });\n    });\n  };\n  /**\n   * @name addUsers\n   * @name_zh 添加用户\n   * @description 添加用户\n   *\n   * @param {string} code 角色唯一标志符\n   * @param {string[]} userIds 用户 ID 列表\n   * @param {string} [namespace] 角色所属的 Namespace，默认值为 'default'\n   *\n   * @example\n   * managementClient.roles.addUsers(code, ['USERID1', 'USERID2'])\n   *\n   * @returns {Promise<CommonMessage>}\n   * @memberof RolesManagementClient\n   */\n\n\n  RolesManagementClient.prototype.addUsers = function (code, userIds, namespace) {\n    return __awaiter(this, void 0, void 0, function () {\n      var res;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , assignRole(this.graphqlClient, this.tokenProvider, {\n              roleCode: code,\n              userIds: userIds,\n              namespace: namespace\n            })];\n\n          case 1:\n            res = _a.sent();\n            return [2\n            /*return*/\n            , res.assignRole];\n        }\n      });\n    });\n  };\n  /**\n   * @name removeUsers\n   * @name_zh 移除用户\n   *\n   * @description 移除用户\n   *\n   * @param {string} code 角色唯一标志符\n   * @param {string[]} userIds 用户 ID 列表\n   * @param {string} [namespace] 角色所属的 Namespace，默认值为 'default'\n   *\n   * @example\n   * managementClient.roles.removeUsers(code, ['USERID1', 'USERID2'])\n   *\n   * @returns {Promise<CommonMessage>}\n   * @memberof RolesManagementClient\n   */\n\n\n  RolesManagementClient.prototype.removeUsers = function (code, userIds, namespace) {\n    return __awaiter(this, void 0, void 0, function () {\n      var res;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , revokeRole(this.graphqlClient, this.tokenProvider, {\n              roleCode: code,\n              userIds: userIds,\n              namespace: namespace\n            })];\n\n          case 1:\n            res = _a.sent();\n            return [2\n            /*return*/\n            , res.revokeRole];\n        }\n      });\n    });\n  };\n  /**\n   * @name listPolicies\n   * @name_zh 获取角色策略列表\n   *\n   * @description 获取角色策略列表\n   *\n   * @param {string} code 角色唯一标志符\n   * @param {number} [page=1] 页码数\n   * @param {number} [limit=10] 页码个数\n   * @example\n   *  managementClient.roles.listPolicies('codea', 1, 10)\n   *\n   * @returns {Promise<PaginatedPolicyAssignments>}\n   * @memberof RolesManagementClient\n   */\n\n\n  RolesManagementClient.prototype.listPolicies = function (code, page, limit) {\n    if (page === void 0) {\n      page = 1;\n    }\n\n    if (limit === void 0) {\n      limit = 10;\n    }\n\n    return __awaiter(this, void 0, void 0, function () {\n      var data;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , policyAssignments(this.graphqlClient, this.tokenProvider, {\n              targetType: PolicyAssignmentTargetType.Role,\n              targetIdentifier: code,\n              page: page,\n              limit: limit\n            })];\n\n          case 1:\n            data = _a.sent().policyAssignments;\n            return [2\n            /*return*/\n            , data];\n        }\n      });\n    });\n  };\n  /**\n   * @name addPolicies\n   * @name_zh 授权策略\n   *\n   * @description 给角色授权策略策略\n   *\n   * @param {string} code 角色唯一标志符\n   * @param {string[]} policies 策略列表\n   * @example\n   * managementClient.roles.addPolicies('rolea', ['PolicyA', 'PolicyB'])\n   *\n   * @returns {Promise<CommonMessage>}\n   * @memberof RolesManagementClient\n   */\n\n\n  RolesManagementClient.prototype.addPolicies = function (code, policies) {\n    return __awaiter(this, void 0, void 0, function () {\n      var res;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , addPolicyAssignments(this.graphqlClient, this.tokenProvider, {\n              targetType: PolicyAssignmentTargetType.User,\n              targetIdentifiers: [code],\n              policies: policies\n            })];\n\n          case 1:\n            res = _a.sent();\n            return [2\n            /*return*/\n            , res.addPolicyAssignments];\n        }\n      });\n    });\n  };\n  /**\n   * @name removePolicies\n   * @name_zh 角色移除策略\n   *\n   * @description 角色移除策略\n   *\n   * @param {string} code 角色唯一标志符\n   * @param {string[]} policies 策略列表\n   * @example\n   * managementClient.roles.removePolicies('rolea', ['PolicyA', 'PolicyB'])\n   *\n   * @returns {Promise<CommonMessage>}\n   * @memberof RolesManagementClient\n   */\n\n\n  RolesManagementClient.prototype.removePolicies = function (code, policies) {\n    return __awaiter(this, void 0, void 0, function () {\n      var res;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , removePolicyAssignments(this.graphqlClient, this.tokenProvider, {\n              targetType: PolicyAssignmentTargetType.User,\n              targetIdentifiers: [code],\n              policies: policies\n            })];\n\n          case 1:\n            res = _a.sent();\n            return [2\n            /*return*/\n            , res.removePolicyAssignments];\n        }\n      });\n    });\n  };\n  /**\n   * @description 获取角色被授权的所有资源\n   *\n   * @param code: 角色 code\n   * @param namespace: 角色权限组 namespace code\n   * @param options.resourceType 资源类型\n   */\n\n\n  RolesManagementClient.prototype.listAuthorizedResources = function (code, namespace, options) {\n    return __awaiter(this, void 0, void 0, function () {\n      var resourceType, role, _a, list, totalCount;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            resourceType = (options || {}).resourceType;\n            return [4\n            /*yield*/\n            , listRoleAuthorizedResources(this.graphqlClient, this.tokenProvider, {\n              code: code,\n              namespace: namespace,\n              resourceType: resourceType\n            })];\n\n          case 1:\n            role = _b.sent().role;\n\n            if (!role) {\n              throw new Error('角色不存在');\n            }\n\n            _a = role.authorizedResources, list = _a.list, totalCount = _a.totalCount;\n            list = formatAuthorizedResources(list);\n            return [2\n            /*return*/\n            , {\n              list: list,\n              totalCount: totalCount\n            }];\n        }\n      });\n    });\n  };\n  /**\n   * 获取某个角色扩展字段列表\n   * @param roleId 角色 ID\n   * @returns Promise<{ [key: string]: any }>\n   */\n\n\n  RolesManagementClient.prototype.getUdfValue = function (roleId) {\n    return __awaiter(this, void 0, void 0, function () {\n      var list;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , udv(this.graphqlClient, this.tokenProvider, {\n              targetType: UdfTargetType.Role,\n              targetId: roleId\n            })];\n\n          case 1:\n            list = _a.sent().udv;\n            return [2\n            /*return*/\n            , convertUdvToKeyValuePair(list)];\n        }\n      });\n    });\n  };\n  /**\n   * 获取某个角色某个扩展字段\n   * @param roleId 角色 ID\n   * @param udfKey 扩展字段 Key\n   * @returns Promise<{ [key: string]: any }>\n   */\n\n\n  RolesManagementClient.prototype.getSpecificUdfValue = function (roleId, udfKey) {\n    return __awaiter(this, void 0, void 0, function () {\n      var list, udfMap, udfValue, key;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , udv(this.graphqlClient, this.tokenProvider, {\n              targetType: UdfTargetType.Role,\n              targetId: roleId\n            })];\n\n          case 1:\n            list = _a.sent().udv;\n            udfMap = convertUdvToKeyValuePair(list);\n            udfValue = {};\n\n            for (key in udfMap) {\n              if (udfKey === key) {\n                udfValue[key] = udfMap[key];\n              }\n            }\n\n            return [2\n            /*return*/\n            , udfValue];\n        }\n      });\n    });\n  };\n  /**\n   * 获取多个角色扩展字段列表\n   * @param roleId 角色 ID 列表\n   * @returns Promise<{ [x: string]: KeyValuePair }>\n   */\n\n\n  RolesManagementClient.prototype.getUdfValueBatch = function (roleIds) {\n    return __awaiter(this, void 0, void 0, function () {\n      var result, ret, _i, result_1, _a, targetId, data;\n\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            if (roleIds.length === 0) {\n              throw new Error('empty user id list');\n            }\n\n            return [4\n            /*yield*/\n            , udfValueBatch(this.graphqlClient, this.tokenProvider, {\n              targetType: UdfTargetType.Role,\n              targetIds: roleIds\n            })];\n\n          case 1:\n            result = _b.sent().udfValueBatch;\n            ret = {};\n\n            for (_i = 0, result_1 = result; _i < result_1.length; _i++) {\n              _a = result_1[_i], targetId = _a.targetId, data = _a.data;\n              ret[targetId] = convertUdvToKeyValuePair(data);\n            }\n\n            return [2\n            /*return*/\n            , ret];\n        }\n      });\n    });\n  };\n  /**\n   * 设置某个角色扩展字段列表\n   * @param roleId 角色 ID 列表\n   * @param data 扩展字段\n   */\n\n\n  RolesManagementClient.prototype.setUdfValue = function (roleId, data) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (Object.keys(data).length === 0) {\n              throw new Error('empty udf value list');\n            }\n\n            return [4\n            /*yield*/\n            , setUdvBatch(this.graphqlClient, this.tokenProvider, {\n              targetType: UdfTargetType.Role,\n              targetId: roleId,\n              udvList: Object.keys(data).map(function (key) {\n                return {\n                  key: key,\n                  value: JSON.stringify(data[key])\n                };\n              })\n            })];\n\n          case 1:\n            _a.sent();\n\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * 设置多个角色扩展字段列表\n   * @param input.roleId 角色 ID 列表\n   * @param input.data 扩展字段\n   */\n\n\n  RolesManagementClient.prototype.setUdfValueBatch = function (input) {\n    return __awaiter(this, void 0, void 0, function () {\n      var params;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (input.length === 0) {\n              throw new Error('empty input list');\n            }\n\n            params = [];\n            input.forEach(function (_a) {\n              var userId = _a.roleId,\n                  data = _a.data;\n\n              for (var _i = 0, _b = Object.keys(data); _i < _b.length; _i++) {\n                var key = _b[_i];\n                params.push({\n                  targetId: userId,\n                  key: key,\n                  value: JSON.stringify(data[key])\n                });\n              }\n            });\n            return [4\n            /*yield*/\n            , setUdfValueBatch(this.graphqlClient, this.tokenProvider, {\n              targetType: UdfTargetType.Role,\n              input: params\n            })];\n\n          case 1:\n            _a.sent();\n\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n  /**\n   * 删除用户的扩展字段\n   * @param input.roleId 角色 ID 列表\n   * @param input.key 扩展字段名\n   */\n\n\n  RolesManagementClient.prototype.removeUdfValue = function (roleId, key) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , removeUdv(this.graphqlClient, this.tokenProvider, {\n              targetType: UdfTargetType.Role,\n              targetId: roleId,\n              key: key\n            })];\n\n          case 1:\n            _a.sent();\n\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  return RolesManagementClient;\n}();\n\nexport { RolesManagementClient };","map":{"version":3,"sources":["../../../../src/lib/management/RolesManagementClient.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nimport { PolicyAssignmentTargetType, UdfTargetType } from '../../types/graphql.v2';\nimport { assignRole, addRole, roles, role, roleWithUsers, updateRole, revokeRole, deleteRole, deleteRoles, policyAssignments, addPolicyAssignments, removePolicyAssignments, listRoleAuthorizedResources, udv, udfValueBatch, setUdvBatch, setUdfValueBatch, removeUdv, roleWithUsersWithCustomData } from '../graphqlapi';\nimport { convertUdvToKeyValuePair, formatAuthorizedResources } from '../utils';\n/**\n * @class RolesManagementClient 管理角色\n * @description 此模块用于管理 Authing 角色，可以进行角色的增删改查、角色添加/删除用户、角色添加/删除策略 等操作。\n *\n * @example\n *\n * 请使用以下方式使用该模块，而不要直接初始化该模块：\n * \\`\\`\\`javascript\n * import { ManagementClient } from \"authing-js-sdk\"\n * const managementClient = new ManagementClient({\n *    userPoolId: \"YOUR_USERPOOL_ID\",\n *    secret: \"YOUR_USERPOOL_SECRET\",\n * })\n * managementClient.roles.list // 获取角色列表\n * managementClient.roles.create // 创建角色\n * managementClient.roles.listUsers // 获取角色用户列表\n * \\`\\`\\`\n *\n * @name RolesManagementClient\n */\nvar RolesManagementClient = /** @class */ (function () {\n    function RolesManagementClient(options, graphqlClient, httpClient, tokenProvider) {\n        this.options = options;\n        this.graphqlClient = graphqlClient;\n        this.httpClient = httpClient;\n        this.tokenProvider = tokenProvider;\n    }\n    /**\n     * @name create\n     * @name_zh 创建角色\n     * @description 创建角色\n     *\n     * @param {string} code 角色唯一标志符\n     * @param {string} [options.description] 描述\n     * @param {string} [options.namespace] 该角色所在的 namespace，默认为 default\n     *\n     * @example\n     * managementClient.roles.create('rolea', 'RoleA')\n     *\n     * @returns {Promise<DeepPartial<Role>>}\n     * @memberof RolesManagementClient\n     */\n    RolesManagementClient.prototype.create = function (code, description, namespace) {\n        return __awaiter(this, void 0, void 0, function () {\n            var res;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, addRole(this.graphqlClient, this.tokenProvider, {\n                            code: code,\n                            description: description,\n                            namespace: namespace\n                        })];\n                    case 1:\n                        res = _a.sent();\n                        return [2 /*return*/, res.createRole];\n                }\n            });\n        });\n    };\n    /**\n     * @name delete\n     * @name_zh 删除角色\n     * @description 删除角色\n     *\n     * @param {string} code 角色唯一标志符\n     * @param {string} [namespace] 角色所属的 Namespace code，默认值为 'default'\n     *\n     * @example\n     * managementClient.roles.delete('rolea')\n     *\n     * @returns {Promise<CommonMessage>}\n     * @memberof RolesManagementClient\n     */\n    RolesManagementClient.prototype.delete = function (code, namespace) {\n        return __awaiter(this, void 0, void 0, function () {\n            var data;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, deleteRole(this.graphqlClient, this.tokenProvider, {\n                            code: code,\n                            namespace: namespace\n                        })];\n                    case 1:\n                        data = (_a.sent()).deleteRole;\n                        return [2 /*return*/, data];\n                }\n            });\n        });\n    };\n    /**\n     * @name deleteMany\n     * @name_zh 批量删除角色\n     * @description 批量删除角色\n     *\n     * @param {string[]} codeList 角色唯一标志符列表\n     * @param {string} [namespace] 角色所属的 Namespace，默认值为 'default'\n     *\n     * @example\n     * managementClient.roles.delete(['rolea'])\n     *\n     * @returns {Promise<CommonMessage>}\n     * @memberof RolesManagementClient\n     */\n    RolesManagementClient.prototype.deleteMany = function (codeList, namespace) {\n        return __awaiter(this, void 0, void 0, function () {\n            var data;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, deleteRoles(this.graphqlClient, this.tokenProvider, {\n                            codeList: codeList,\n                            namespace: namespace\n                        })];\n                    case 1:\n                        data = (_a.sent()).deleteRoles;\n                        return [2 /*return*/, data];\n                }\n            });\n        });\n    };\n    /**\n     * @name update\n     * @name_zh 修改角色\n     * @description 修改角色\n     *\n     * @param {string} code 角色唯一标志符\n     * @param {Object} options\n     * @param {string} options.description 描述信息\n     * @param {string} options.newCode 新的唯一标志符\n     * @param {string} options.namespace 角色所属的 Namespace，默认值为 'default'\n     *\n     * @example\n     * managementClient.roles.update('rolea', {newCode: 'newcode'})\n     *\n     *\n     * @returns {Promise<DeepPartial<Role>>}\n     * @memberof RolesManagementClient\n     */\n    RolesManagementClient.prototype.update = function (code, options) {\n        return __awaiter(this, void 0, void 0, function () {\n            var description, newCode, namespace, data;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        description = options.description, newCode = options.newCode, namespace = options.namespace;\n                        return [4 /*yield*/, updateRole(this.graphqlClient, this.tokenProvider, {\n                                code: code,\n                                description: description,\n                                newCode: newCode,\n                                namespace: namespace\n                            })];\n                    case 1:\n                        data = (_a.sent()).updateRole;\n                        return [2 /*return*/, data];\n                }\n            });\n        });\n    };\n    /**\n     * @deprecated  已过时, 不建议使用\n     */\n    RolesManagementClient.prototype.detail = function (code, namespace) {\n        return __awaiter(this, void 0, void 0, function () {\n            var data;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, role(this.graphqlClient, this.tokenProvider, {\n                            code: code,\n                            namespace: namespace\n                        })];\n                    case 1:\n                        data = (_a.sent()).role;\n                        return [2 /*return*/, data];\n                }\n            });\n        });\n    };\n    /**\n     *\n     * @name findByCode\n     * @name_zh 获取角色详情\n     * @description 获取角色详情\n     *\n     * @param {string} code 角色唯一标志符\n     * @param {string} [namespace] 角色所属的 Namespace，默认值为 'default'\n     *\n     * @example`\n     * managementClient.roles.detail('manager')\n     *\n     * @returns {Promise<DeepPartial<Role>>} 角色详情\n     * @memberof RolesManagementClient\n     */\n    RolesManagementClient.prototype.findByCode = function (code, namespace) {\n        return __awaiter(this, void 0, void 0, function () {\n            var data;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, this.detail(code, namespace)];\n                    case 1:\n                        data = _a.sent();\n                        return [2 /*return*/, data];\n                }\n            });\n        });\n    };\n    /**\n     * @name list\n     * @name_zh 获取角色列表\n     * @description 获取角色列表\n     *\n     * @param {Object} [options]\n     * @param {number} [options.page=1] 页码数\n     * @param {number} [options.limit=10] 每页个数\n     * @param {string} [options.namespace] 角色所属的 Namespace，默认值为 'default'\n     *\n     * @example\n     * managementClient.roles.list(2, 10)\n     *\n     * @returns {Promise<DeepPartial<PaginatedRoles>>}\n     * @memberof RolesManagementClient\n     */\n    RolesManagementClient.prototype.list = function (options) {\n        return __awaiter(this, void 0, void 0, function () {\n            var _a, _b, page, _c, limit, namespace, data;\n            return __generator(this, function (_d) {\n                switch (_d.label) {\n                    case 0:\n                        _a = options || {}, _b = _a.page, page = _b === void 0 ? 1 : _b, _c = _a.limit, limit = _c === void 0 ? 10 : _c, namespace = _a.namespace;\n                        return [4 /*yield*/, roles(this.graphqlClient, this.tokenProvider, {\n                                page: page,\n                                limit: limit,\n                                namespace: namespace\n                            })];\n                    case 1:\n                        data = (_d.sent()).roles;\n                        return [2 /*return*/, data];\n                }\n            });\n        });\n    };\n    /**\n     * @name listUsers\n     * @name_zh 获取角色用户列表\n     * @description 获取角色用户列表\n     *\n     * @param {string} code 角色唯一标志符\n     * * @param {string} [namespace] 角色所属的 Namespace，默认值为 'default'\n     *\n     * @example\n     * managementClient.roles.listUsers(code)\n     *\n     * @returns {Promise<DeepPartial<PaginatedUsers>>}\n     * @memberof RolesManagementClient\n     */\n    RolesManagementClient.prototype.listUsers = function (code, options) {\n        return __awaiter(this, void 0, void 0, function () {\n            var _a, namespace, _b, withCustomData, _c, page, _d, limit, data, data, _e, totalCount, list;\n            return __generator(this, function (_f) {\n                switch (_f.label) {\n                    case 0:\n                        _a = options || {}, namespace = _a.namespace, _b = _a.withCustomData, withCustomData = _b === void 0 ? false : _b, _c = _a.page, page = _c === void 0 ? 1 : _c, _d = _a.limit, limit = _d === void 0 ? 10 : _d;\n                        if (!!withCustomData) return [3 /*break*/, 2];\n                        return [4 /*yield*/, roleWithUsers(this.graphqlClient, this.tokenProvider, {\n                                code: code,\n                                namespace: namespace,\n                                page: page,\n                                limit: limit\n                            })];\n                    case 1:\n                        data = (_f.sent()).role;\n                        if (!data) {\n                            return [2 /*return*/, {\n                                    totalCount: 0,\n                                    list: []\n                                }];\n                        }\n                        return [2 /*return*/, data.users];\n                    case 2: return [4 /*yield*/, roleWithUsersWithCustomData(this.graphqlClient, this.tokenProvider, {\n                            code: code,\n                            namespace: namespace,\n                            page: page,\n                            limit: limit\n                        })];\n                    case 3:\n                        data = (_f.sent()).role;\n                        if (!data) {\n                            return [2 /*return*/, {\n                                    totalCount: 0,\n                                    list: []\n                                }];\n                        }\n                        _e = data.users, totalCount = _e.totalCount, list = _e.list;\n                        list = list.map(function (user) {\n                            // @ts-ignore\n                            user.customData = convertUdvToKeyValuePair(user.customData);\n                            return user;\n                        });\n                        return [2 /*return*/, {\n                                totalCount: totalCount,\n                                // @ts-ignore\n                                list: list\n                            }];\n                }\n            });\n        });\n    };\n    /**\n     * @name findUsers\n     * @name_zh 查找角色特定用户\n     * @description 查找角色特定用户\n     *\n     * @param {string} code 角色唯一标志符\n     * * @param {string} [namespace] 角色所属的 Namespace，默认值为 'default'\n     * * @param {string} [search] 匹配用户、手机、组织模糊搜索，默认值为 ''\n     *\n     * @example\n     * managementClient.roles.findUsers(code)\n     *\n     * @returns {Promise<DeepPartial<PaginatedUsers>>}\n     * @memberof RolesManagementClient\n     */\n    RolesManagementClient.prototype.findUsers = function (code, options) {\n        return __awaiter(this, void 0, void 0, function () {\n            var _a, _b, namespace, _c, search, _d, page, _e, limit, data;\n            return __generator(this, function (_f) {\n                switch (_f.label) {\n                    case 0:\n                        _a = options || {}, _b = _a.namespace, namespace = _b === void 0 ? 'default' : _b, _c = _a.search, search = _c === void 0 ? '' : _c, _d = _a.page, page = _d === void 0 ? 1 : _d, _e = _a.limit, limit = _e === void 0 ? 10 : _e;\n                        return [4 /*yield*/, this.httpClient.request({\n                                method: 'POST',\n                                url: this.options.host + \"/api/v2/roles/roleUsers\",\n                                data: {\n                                    namespace: namespace,\n                                    code: code,\n                                    limit: limit,\n                                    page: page,\n                                    search: search,\n                                }\n                            })];\n                    case 1:\n                        data = _f.sent();\n                        return [2 /*return*/, data];\n                }\n            });\n        });\n    };\n    /**\n     * @name addUsers\n     * @name_zh 添加用户\n     * @description 添加用户\n     *\n     * @param {string} code 角色唯一标志符\n     * @param {string[]} userIds 用户 ID 列表\n     * @param {string} [namespace] 角色所属的 Namespace，默认值为 'default'\n     *\n     * @example\n     * managementClient.roles.addUsers(code, ['USERID1', 'USERID2'])\n     *\n     * @returns {Promise<CommonMessage>}\n     * @memberof RolesManagementClient\n     */\n    RolesManagementClient.prototype.addUsers = function (code, userIds, namespace) {\n        return __awaiter(this, void 0, void 0, function () {\n            var res;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, assignRole(this.graphqlClient, this.tokenProvider, {\n                            roleCode: code,\n                            userIds: userIds,\n                            namespace: namespace\n                        })];\n                    case 1:\n                        res = _a.sent();\n                        return [2 /*return*/, res.assignRole];\n                }\n            });\n        });\n    };\n    /**\n     * @name removeUsers\n     * @name_zh 移除用户\n     *\n     * @description 移除用户\n     *\n     * @param {string} code 角色唯一标志符\n     * @param {string[]} userIds 用户 ID 列表\n     * @param {string} [namespace] 角色所属的 Namespace，默认值为 'default'\n     *\n     * @example\n     * managementClient.roles.removeUsers(code, ['USERID1', 'USERID2'])\n     *\n     * @returns {Promise<CommonMessage>}\n     * @memberof RolesManagementClient\n     */\n    RolesManagementClient.prototype.removeUsers = function (code, userIds, namespace) {\n        return __awaiter(this, void 0, void 0, function () {\n            var res;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, revokeRole(this.graphqlClient, this.tokenProvider, {\n                            roleCode: code,\n                            userIds: userIds,\n                            namespace: namespace\n                        })];\n                    case 1:\n                        res = _a.sent();\n                        return [2 /*return*/, res.revokeRole];\n                }\n            });\n        });\n    };\n    /**\n     * @name listPolicies\n     * @name_zh 获取角色策略列表\n     *\n     * @description 获取角色策略列表\n     *\n     * @param {string} code 角色唯一标志符\n     * @param {number} [page=1] 页码数\n     * @param {number} [limit=10] 页码个数\n     * @example\n     *  managementClient.roles.listPolicies('codea', 1, 10)\n     *\n     * @returns {Promise<PaginatedPolicyAssignments>}\n     * @memberof RolesManagementClient\n     */\n    RolesManagementClient.prototype.listPolicies = function (code, page, limit) {\n        if (page === void 0) { page = 1; }\n        if (limit === void 0) { limit = 10; }\n        return __awaiter(this, void 0, void 0, function () {\n            var data;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, policyAssignments(this.graphqlClient, this.tokenProvider, {\n                            targetType: PolicyAssignmentTargetType.Role,\n                            targetIdentifier: code,\n                            page: page,\n                            limit: limit\n                        })];\n                    case 1:\n                        data = (_a.sent()).policyAssignments;\n                        return [2 /*return*/, data];\n                }\n            });\n        });\n    };\n    /**\n     * @name addPolicies\n     * @name_zh 授权策略\n     *\n     * @description 给角色授权策略策略\n     *\n     * @param {string} code 角色唯一标志符\n     * @param {string[]} policies 策略列表\n     * @example\n     * managementClient.roles.addPolicies('rolea', ['PolicyA', 'PolicyB'])\n     *\n     * @returns {Promise<CommonMessage>}\n     * @memberof RolesManagementClient\n     */\n    RolesManagementClient.prototype.addPolicies = function (code, policies) {\n        return __awaiter(this, void 0, void 0, function () {\n            var res;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, addPolicyAssignments(this.graphqlClient, this.tokenProvider, {\n                            targetType: PolicyAssignmentTargetType.User,\n                            targetIdentifiers: [code],\n                            policies: policies\n                        })];\n                    case 1:\n                        res = _a.sent();\n                        return [2 /*return*/, res.addPolicyAssignments];\n                }\n            });\n        });\n    };\n    /**\n     * @name removePolicies\n     * @name_zh 角色移除策略\n     *\n     * @description 角色移除策略\n     *\n     * @param {string} code 角色唯一标志符\n     * @param {string[]} policies 策略列表\n     * @example\n     * managementClient.roles.removePolicies('rolea', ['PolicyA', 'PolicyB'])\n     *\n     * @returns {Promise<CommonMessage>}\n     * @memberof RolesManagementClient\n     */\n    RolesManagementClient.prototype.removePolicies = function (code, policies) {\n        return __awaiter(this, void 0, void 0, function () {\n            var res;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, removePolicyAssignments(this.graphqlClient, this.tokenProvider, {\n                            targetType: PolicyAssignmentTargetType.User,\n                            targetIdentifiers: [code],\n                            policies: policies\n                        })];\n                    case 1:\n                        res = _a.sent();\n                        return [2 /*return*/, res.removePolicyAssignments];\n                }\n            });\n        });\n    };\n    /**\n     * @description 获取角色被授权的所有资源\n     *\n     * @param code: 角色 code\n     * @param namespace: 角色权限组 namespace code\n     * @param options.resourceType 资源类型\n     */\n    RolesManagementClient.prototype.listAuthorizedResources = function (code, namespace, options) {\n        return __awaiter(this, void 0, void 0, function () {\n            var resourceType, role, _a, list, totalCount;\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        resourceType = (options || {}).resourceType;\n                        return [4 /*yield*/, listRoleAuthorizedResources(this.graphqlClient, this.tokenProvider, {\n                                code: code,\n                                namespace: namespace,\n                                resourceType: resourceType\n                            })];\n                    case 1:\n                        role = (_b.sent()).role;\n                        if (!role) {\n                            throw new Error('角色不存在');\n                        }\n                        _a = role.authorizedResources, list = _a.list, totalCount = _a.totalCount;\n                        list = formatAuthorizedResources(list);\n                        return [2 /*return*/, {\n                                list: list,\n                                totalCount: totalCount\n                            }];\n                }\n            });\n        });\n    };\n    /**\n     * 获取某个角色扩展字段列表\n     * @param roleId 角色 ID\n     * @returns Promise<{ [key: string]: any }>\n     */\n    RolesManagementClient.prototype.getUdfValue = function (roleId) {\n        return __awaiter(this, void 0, void 0, function () {\n            var list;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, udv(this.graphqlClient, this.tokenProvider, {\n                            targetType: UdfTargetType.Role,\n                            targetId: roleId\n                        })];\n                    case 1:\n                        list = (_a.sent()).udv;\n                        return [2 /*return*/, convertUdvToKeyValuePair(list)];\n                }\n            });\n        });\n    };\n    /**\n     * 获取某个角色某个扩展字段\n     * @param roleId 角色 ID\n     * @param udfKey 扩展字段 Key\n     * @returns Promise<{ [key: string]: any }>\n     */\n    RolesManagementClient.prototype.getSpecificUdfValue = function (roleId, udfKey) {\n        return __awaiter(this, void 0, void 0, function () {\n            var list, udfMap, udfValue, key;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, udv(this.graphqlClient, this.tokenProvider, {\n                            targetType: UdfTargetType.Role,\n                            targetId: roleId\n                        })];\n                    case 1:\n                        list = (_a.sent()).udv;\n                        udfMap = convertUdvToKeyValuePair(list);\n                        udfValue = {};\n                        for (key in udfMap) {\n                            if (udfKey === key) {\n                                udfValue[key] = udfMap[key];\n                            }\n                        }\n                        return [2 /*return*/, udfValue];\n                }\n            });\n        });\n    };\n    /**\n     * 获取多个角色扩展字段列表\n     * @param roleId 角色 ID 列表\n     * @returns Promise<{ [x: string]: KeyValuePair }>\n     */\n    RolesManagementClient.prototype.getUdfValueBatch = function (roleIds) {\n        return __awaiter(this, void 0, void 0, function () {\n            var result, ret, _i, result_1, _a, targetId, data;\n            return __generator(this, function (_b) {\n                switch (_b.label) {\n                    case 0:\n                        if (roleIds.length === 0) {\n                            throw new Error('empty user id list');\n                        }\n                        return [4 /*yield*/, udfValueBatch(this.graphqlClient, this.tokenProvider, {\n                                targetType: UdfTargetType.Role,\n                                targetIds: roleIds\n                            })];\n                    case 1:\n                        result = (_b.sent()).udfValueBatch;\n                        ret = {};\n                        for (_i = 0, result_1 = result; _i < result_1.length; _i++) {\n                            _a = result_1[_i], targetId = _a.targetId, data = _a.data;\n                            ret[targetId] = convertUdvToKeyValuePair(data);\n                        }\n                        return [2 /*return*/, ret];\n                }\n            });\n        });\n    };\n    /**\n     * 设置某个角色扩展字段列表\n     * @param roleId 角色 ID 列表\n     * @param data 扩展字段\n     */\n    RolesManagementClient.prototype.setUdfValue = function (roleId, data) {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (Object.keys(data).length === 0) {\n                            throw new Error('empty udf value list');\n                        }\n                        return [4 /*yield*/, setUdvBatch(this.graphqlClient, this.tokenProvider, {\n                                targetType: UdfTargetType.Role,\n                                targetId: roleId,\n                                udvList: Object.keys(data).map(function (key) { return ({\n                                    key: key,\n                                    value: JSON.stringify(data[key])\n                                }); })\n                            })];\n                    case 1:\n                        _a.sent();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * 设置多个角色扩展字段列表\n     * @param input.roleId 角色 ID 列表\n     * @param input.data 扩展字段\n     */\n    RolesManagementClient.prototype.setUdfValueBatch = function (input) {\n        return __awaiter(this, void 0, void 0, function () {\n            var params;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (input.length === 0) {\n                            throw new Error('empty input list');\n                        }\n                        params = [];\n                        input.forEach(function (_a) {\n                            var userId = _a.roleId, data = _a.data;\n                            for (var _i = 0, _b = Object.keys(data); _i < _b.length; _i++) {\n                                var key = _b[_i];\n                                params.push({\n                                    targetId: userId,\n                                    key: key,\n                                    value: JSON.stringify(data[key])\n                                });\n                            }\n                        });\n                        return [4 /*yield*/, setUdfValueBatch(this.graphqlClient, this.tokenProvider, {\n                                targetType: UdfTargetType.Role,\n                                input: params\n                            })];\n                    case 1:\n                        _a.sent();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * 删除用户的扩展字段\n     * @param input.roleId 角色 ID 列表\n     * @param input.key 扩展字段名\n     */\n    RolesManagementClient.prototype.removeUdfValue = function (roleId, key) {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, removeUdv(this.graphqlClient, this.tokenProvider, {\n                            targetType: UdfTargetType.Role,\n                            targetId: roleId,\n                            key: key\n                        })];\n                    case 1:\n                        _a.sent();\n                        return [2 /*return*/];\n                }\n            });\n        });\n    };\n    return RolesManagementClient;\n}());\nexport { RolesManagementClient };\n//# sourceMappingURL=RolesManagementClient.js.map"]},"metadata":{},"sourceType":"module"}