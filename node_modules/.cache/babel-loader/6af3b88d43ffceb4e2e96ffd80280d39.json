{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function () {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n\n        case 7:\n          op = _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n\n            _.ops.push(op);\n\n            break;\n          }\n\n          if (t[2]) _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n      }\n\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nimport { setUdf, removeUdf, udf, udv, setUdvBatch } from '../graphqlapi';\nimport { convertUdv } from '../utils';\n/**\n * @name UdfManagementClient\n * @description Udf 是 User Defined Field（用户自定义字段） 的简称。Authing 的数据实体（如用户、角色、分组、组织机构等）可以添加自定义字段，你可以配置 Authing 默认不自带的字段，比如你需要创建以一个学校相关的应用，就可以添加一个自定义 \\`school\\` 字段。\n * 同时你可以在用户注册完成之后要求用户补充此字段的信息，详细文档请见 https://docs.authing.co/extensibility/user/extend-register-fields.html 。\n *\n * 此模块可以用于对自定义字段元数据进行管理。\n *\n * @example\n *\n * 请使用以下方式使用该模块：\n * \\`\\`\\`javascript\n * import { ManagementClient } from \"authing-js-sdk\"\n * const managementClient = new ManagementClient({\n *    userPoolId: \"YOUR_USERPOOL_ID\",\n *    secret: \"YOUR_USERPOOL_SECRET\",\n * })\n * managementClient.udf.list // 获取自定义字段元数据列表\n * managementClient.udf.set // 设置自定义字段\n * managementClient.udf.remove // 删除自定义字段\n * \\`\\`\\`\n *\n * @class UdfManagementClient 管理自定义字段元数据\n */\n\nvar UdfManagementClient =\n/** @class */\nfunction () {\n  function UdfManagementClient(options, graphqlClient, tokenProvider) {\n    this.options = options;\n    this.graphqlClient = graphqlClient;\n    this.tokenProvider = tokenProvider;\n  }\n  /**\n   * @name set\n   * @name_zh 设置自定义字段元数据\n   * @description 设置自定义字段元数据，如果该字段不存在会自动创建。\n   *\n   * @param {UdfTargetType} targetType 自定义字段目标类型， USER 表示用户、ROLE 表示角色。\n   * @param {string} key 字段 key\n   * @param {UdfDataType} dataType 数据类型，目前共支持五种数据类型。STRING 为字符串、NUMBER 为数字、DATETIME 为日期、BOOLEAN 为 boolean 值、OBJECT 为对象。\n   * @param {string} label 字段 Label，一般是一个 Human Readable 字符串。\n   *\n   * @example\n   *\n   * import { ManagementClient, UdfTargetType, UdfDataType  } from \"authing-js-sdk\"\n   * const udf = await managementClient.udf.set(\n   *    UdfTargetType.User,\n   *    'school',\n   *    UdfDataType.String,\n   *    '学校'\n   * );\n   *\n   * @example\n   *\n   * // 如果 age 这个自定义字段不存在，第一次会创建\n   *\n   * import { ManagementClient, UdfTargetType, UdfDataType  } from \"authing-js-sdk\"\n   * const udf = await managementClient.udf.set(\n   *    UdfTargetType.User,\n   *    'age',\n   *    UdfDataType.Number,\n   *    '年龄'\n   * );\n   *\n   * // 如果 age 字段之前创建过，会修改该字段的配置\n   *\n   * const udf = await managementClient.udf.set(\n   *    UdfTargetType.User,\n   *    'age',\n   *    UdfDataType.Number,\n   *    '新的描述信息'\n   * );\n   *\n   * @returns {Promise<UserDefinedField[]>}\n   * @memberof UdfManagementClient\n   */\n\n\n  UdfManagementClient.prototype.set = function (targetType, key, dataType, label) {\n    return __awaiter(this, void 0, void 0, function () {\n      var data;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , setUdf(this.graphqlClient, this.tokenProvider, {\n              targetType: targetType,\n              dataType: dataType,\n              key: key,\n              label: label\n            })];\n\n          case 1:\n            data = _a.sent().setUdf;\n            return [2\n            /*return*/\n            , data];\n        }\n      });\n    });\n  };\n  /**\n   * @name remove\n   * @name_zh 删除自定义字段\n   * @description 删除自定义字段\n   *\n   * @param {UdfTargetType} targetType 自定义字段目标类型， USER 表示用户、ROLE 表示角色。\n   * @param {string} key 字段 key\n   *\n   * @example\n   *\n   * await managementClient.udf.remove(UdfTargetType.User, 'school');\n   *\n   * @returns {Promise<UserDefinedField[]>}\n   * @memberof UdfManagementClient\n   */\n\n\n  UdfManagementClient.prototype.remove = function (targetType, key) {\n    return __awaiter(this, void 0, void 0, function () {\n      var list;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , removeUdf(this.graphqlClient, this.tokenProvider, {\n              targetType: targetType,\n              key: key\n            })];\n\n          case 1:\n            list = _a.sent().removeUdf;\n            return [2\n            /*return*/\n            , list];\n        }\n      });\n    });\n  };\n  /**\n   * @name list\n   * @name_zh 获取自定义字段定义\n   * @description 查询用户池定义的自定义字段\n   *\n   * @param {UdfTargetType} targetType 自定义字段目标类型， USER 表示用户、ROLE 表示角色。\n   * @example\n   *\n   * const list = await managementClient.udf.list(UdfTargetType.User);\n   *\n   * @returns {Promise<UserDefinedField[]>}\n   * @memberof UdfManagementClient\n   */\n\n\n  UdfManagementClient.prototype.list = function (targetType) {\n    return __awaiter(this, void 0, void 0, function () {\n      var list;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , udf(this.graphqlClient, this.tokenProvider, {\n              targetType: targetType\n            })];\n\n          case 1:\n            list = _a.sent().udf;\n            return [2\n            /*return*/\n            , list];\n        }\n      });\n    });\n  };\n  /**\n   * @name listUdv\n   * @name_zh 获取某一实体的自定义字段数据列表\n   * @description 获取某一实体的自定义字段数据列表\n   *\n   *\n   * @param {UdfTargetType} targetType 自定义字段目标类型， USER 表示用户、ROLE 表示角色。\n   * @param {string} targetId 自定义字段目标 id，如用户 ID\n   * @example\n   *\n   * udfManagementClient.listUdv('USER', 'userId')\n   *\n   * @returns {Promise<Array<UserDefinedData>>}\n   * @memberof UdfManagementClient\n   */\n\n\n  UdfManagementClient.prototype.listUdv = function (targetType, targetId) {\n    return __awaiter(this, void 0, void 0, function () {\n      var list;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , udv(this.graphqlClient, this.tokenProvider, {\n              targetType: targetType,\n              targetId: targetId\n            })];\n\n          case 1:\n            list = _a.sent().udv;\n            return [2\n            /*return*/\n            , convertUdv(list)];\n        }\n      });\n    });\n  };\n  /**\n   * @name setUdvBatch\n   * @name_zh 批量添加自定义数据\n   * @description 批量添加自定义数据\n   *\n   * @param {UdfTargetType} targetType 自定义字段目标类型， USER 表示用户、ROLE 表示角色。\n   * @param {string} targetId 自定义字段目标 id，如用户 ID\n   * @param {Object[]} [udvList]\n   * @param {boolean} [udvList.key] 自定义字段的 key\n   * @param {string} [udvList.value] 自定义字段的值\n   *\n   * @example\n   *\n   * udfManagementClient.setUdv('USER', 'userId', [{key: 'school', 'value': '清华大学'}])\n   *\n   * @returns {Promise<Array<UserDefinedData>>}\n   * @memberof UdfManagementClient\n   */\n\n\n  UdfManagementClient.prototype.setUdvBatch = function (targetType, targetId, udvList) {\n    return __awaiter(this, void 0, void 0, function () {\n      var list;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , setUdvBatch(this.graphqlClient, this.tokenProvider, {\n              targetType: targetType,\n              targetId: targetId,\n              udvList: udvList.map(function (item) {\n                return {\n                  key: item.key,\n                  value: JSON.stringify(item.value)\n                };\n              })\n            })];\n\n          case 1:\n            list = _a.sent().setUdvBatch;\n            return [2\n            /*return*/\n            , convertUdv(list)];\n        }\n      });\n    });\n  };\n\n  return UdfManagementClient;\n}();\n\nexport { UdfManagementClient };","map":{"version":3,"sources":["../../../../src/lib/management/UdfManagementClient.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nimport { setUdf, removeUdf, udf, udv, setUdvBatch } from '../graphqlapi';\nimport { convertUdv } from '../utils';\n/**\n * @name UdfManagementClient\n * @description Udf 是 User Defined Field（用户自定义字段） 的简称。Authing 的数据实体（如用户、角色、分组、组织机构等）可以添加自定义字段，你可以配置 Authing 默认不自带的字段，比如你需要创建以一个学校相关的应用，就可以添加一个自定义 \\`school\\` 字段。\n * 同时你可以在用户注册完成之后要求用户补充此字段的信息，详细文档请见 https://docs.authing.co/extensibility/user/extend-register-fields.html 。\n *\n * 此模块可以用于对自定义字段元数据进行管理。\n *\n * @example\n *\n * 请使用以下方式使用该模块：\n * \\`\\`\\`javascript\n * import { ManagementClient } from \"authing-js-sdk\"\n * const managementClient = new ManagementClient({\n *    userPoolId: \"YOUR_USERPOOL_ID\",\n *    secret: \"YOUR_USERPOOL_SECRET\",\n * })\n * managementClient.udf.list // 获取自定义字段元数据列表\n * managementClient.udf.set // 设置自定义字段\n * managementClient.udf.remove // 删除自定义字段\n * \\`\\`\\`\n *\n * @class UdfManagementClient 管理自定义字段元数据\n */\nvar UdfManagementClient = /** @class */ (function () {\n    function UdfManagementClient(options, graphqlClient, tokenProvider) {\n        this.options = options;\n        this.graphqlClient = graphqlClient;\n        this.tokenProvider = tokenProvider;\n    }\n    /**\n     * @name set\n     * @name_zh 设置自定义字段元数据\n     * @description 设置自定义字段元数据，如果该字段不存在会自动创建。\n     *\n     * @param {UdfTargetType} targetType 自定义字段目标类型， USER 表示用户、ROLE 表示角色。\n     * @param {string} key 字段 key\n     * @param {UdfDataType} dataType 数据类型，目前共支持五种数据类型。STRING 为字符串、NUMBER 为数字、DATETIME 为日期、BOOLEAN 为 boolean 值、OBJECT 为对象。\n     * @param {string} label 字段 Label，一般是一个 Human Readable 字符串。\n     *\n     * @example\n     *\n     * import { ManagementClient, UdfTargetType, UdfDataType  } from \"authing-js-sdk\"\n     * const udf = await managementClient.udf.set(\n     *    UdfTargetType.User,\n     *    'school',\n     *    UdfDataType.String,\n     *    '学校'\n     * );\n     *\n     * @example\n     *\n     * // 如果 age 这个自定义字段不存在，第一次会创建\n     *\n     * import { ManagementClient, UdfTargetType, UdfDataType  } from \"authing-js-sdk\"\n     * const udf = await managementClient.udf.set(\n     *    UdfTargetType.User,\n     *    'age',\n     *    UdfDataType.Number,\n     *    '年龄'\n     * );\n     *\n     * // 如果 age 字段之前创建过，会修改该字段的配置\n     *\n     * const udf = await managementClient.udf.set(\n     *    UdfTargetType.User,\n     *    'age',\n     *    UdfDataType.Number,\n     *    '新的描述信息'\n     * );\n     *\n     * @returns {Promise<UserDefinedField[]>}\n     * @memberof UdfManagementClient\n     */\n    UdfManagementClient.prototype.set = function (targetType, key, dataType, label) {\n        return __awaiter(this, void 0, void 0, function () {\n            var data;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, setUdf(this.graphqlClient, this.tokenProvider, {\n                            targetType: targetType,\n                            dataType: dataType,\n                            key: key,\n                            label: label\n                        })];\n                    case 1:\n                        data = (_a.sent()).setUdf;\n                        return [2 /*return*/, data];\n                }\n            });\n        });\n    };\n    /**\n     * @name remove\n     * @name_zh 删除自定义字段\n     * @description 删除自定义字段\n     *\n     * @param {UdfTargetType} targetType 自定义字段目标类型， USER 表示用户、ROLE 表示角色。\n     * @param {string} key 字段 key\n     *\n     * @example\n     *\n     * await managementClient.udf.remove(UdfTargetType.User, 'school');\n     *\n     * @returns {Promise<UserDefinedField[]>}\n     * @memberof UdfManagementClient\n     */\n    UdfManagementClient.prototype.remove = function (targetType, key) {\n        return __awaiter(this, void 0, void 0, function () {\n            var list;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, removeUdf(this.graphqlClient, this.tokenProvider, {\n                            targetType: targetType,\n                            key: key\n                        })];\n                    case 1:\n                        list = (_a.sent()).removeUdf;\n                        return [2 /*return*/, list];\n                }\n            });\n        });\n    };\n    /**\n     * @name list\n     * @name_zh 获取自定义字段定义\n     * @description 查询用户池定义的自定义字段\n     *\n     * @param {UdfTargetType} targetType 自定义字段目标类型， USER 表示用户、ROLE 表示角色。\n     * @example\n     *\n     * const list = await managementClient.udf.list(UdfTargetType.User);\n     *\n     * @returns {Promise<UserDefinedField[]>}\n     * @memberof UdfManagementClient\n     */\n    UdfManagementClient.prototype.list = function (targetType) {\n        return __awaiter(this, void 0, void 0, function () {\n            var list;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, udf(this.graphqlClient, this.tokenProvider, {\n                            targetType: targetType\n                        })];\n                    case 1:\n                        list = (_a.sent()).udf;\n                        return [2 /*return*/, list];\n                }\n            });\n        });\n    };\n    /**\n     * @name listUdv\n     * @name_zh 获取某一实体的自定义字段数据列表\n     * @description 获取某一实体的自定义字段数据列表\n     *\n     *\n     * @param {UdfTargetType} targetType 自定义字段目标类型， USER 表示用户、ROLE 表示角色。\n     * @param {string} targetId 自定义字段目标 id，如用户 ID\n     * @example\n     *\n     * udfManagementClient.listUdv('USER', 'userId')\n     *\n     * @returns {Promise<Array<UserDefinedData>>}\n     * @memberof UdfManagementClient\n     */\n    UdfManagementClient.prototype.listUdv = function (targetType, targetId) {\n        return __awaiter(this, void 0, void 0, function () {\n            var list;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, udv(this.graphqlClient, this.tokenProvider, {\n                            targetType: targetType,\n                            targetId: targetId\n                        })];\n                    case 1:\n                        list = (_a.sent()).udv;\n                        return [2 /*return*/, convertUdv(list)];\n                }\n            });\n        });\n    };\n    /**\n     * @name setUdvBatch\n     * @name_zh 批量添加自定义数据\n     * @description 批量添加自定义数据\n     *\n     * @param {UdfTargetType} targetType 自定义字段目标类型， USER 表示用户、ROLE 表示角色。\n     * @param {string} targetId 自定义字段目标 id，如用户 ID\n     * @param {Object[]} [udvList]\n     * @param {boolean} [udvList.key] 自定义字段的 key\n     * @param {string} [udvList.value] 自定义字段的值\n     *\n     * @example\n     *\n     * udfManagementClient.setUdv('USER', 'userId', [{key: 'school', 'value': '清华大学'}])\n     *\n     * @returns {Promise<Array<UserDefinedData>>}\n     * @memberof UdfManagementClient\n     */\n    UdfManagementClient.prototype.setUdvBatch = function (targetType, targetId, udvList) {\n        return __awaiter(this, void 0, void 0, function () {\n            var list;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4 /*yield*/, setUdvBatch(this.graphqlClient, this.tokenProvider, {\n                            targetType: targetType,\n                            targetId: targetId,\n                            udvList: udvList.map(function (item) { return ({\n                                key: item.key,\n                                value: JSON.stringify(item.value)\n                            }); })\n                        })];\n                    case 1:\n                        list = (_a.sent()).setUdvBatch;\n                        return [2 /*return*/, convertUdv(list)];\n                }\n            });\n        });\n    };\n    return UdfManagementClient;\n}());\nexport { UdfManagementClient };\n//# sourceMappingURL=UdfManagementClient.js.map"]},"metadata":{},"sourceType":"module"}