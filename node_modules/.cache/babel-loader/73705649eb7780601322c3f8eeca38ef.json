{"ast":null,"code":"(function () {\n  // Copyright (c) 2005  Tom Wu\n  // All Rights Reserved.\n  // See \"LICENSE\" for details.\n  // Basic JavaScript BN library - subset useful for RSA encryption.\n  // Bits per digit\n  var dbits; // JavaScript engine analysis\n\n  var canary = 0xdeadbeefcafe;\n  var j_lm = (canary & 0xffffff) == 0xefcafe; // (public) Constructor\n\n  function BigInteger(a, b, c) {\n    if (a != null) if (\"number\" == typeof a) this.fromNumber(a, b, c);else if (b == null && \"string\" != typeof a) this.fromString(a, 256);else this.fromString(a, b);\n  } // return new, unset BigInteger\n\n\n  function nbi() {\n    return new BigInteger(null);\n  } // am: Compute w_j += (x*this_i), propagate carries,\n  // c is initial carry, returns final carry.\n  // c < 3*dvalue, x < 2*dvalue, this_i < dvalue\n  // We need to select the fastest one that works in this environment.\n  // am1: use a single mult and divide to get the high bits,\n  // max digit bits should be 26 because\n  // max internal value = 2*dvalue^2-2*dvalue (< 2^53)\n\n\n  function am1(i, x, w, j, c, n) {\n    while (--n >= 0) {\n      var v = x * this[i++] + w[j] + c;\n      c = Math.floor(v / 0x4000000);\n      w[j++] = v & 0x3ffffff;\n    }\n\n    return c;\n  } // am2 avoids a big mult-and-extract completely.\n  // Max digit bits should be <= 30 because we do bitwise ops\n  // on values up to 2*hdvalue^2-hdvalue-1 (< 2^31)\n\n\n  function am2(i, x, w, j, c, n) {\n    var xl = x & 0x7fff,\n        xh = x >> 15;\n\n    while (--n >= 0) {\n      var l = this[i] & 0x7fff;\n      var h = this[i++] >> 15;\n      var m = xh * l + h * xl;\n      l = xl * l + ((m & 0x7fff) << 15) + w[j] + (c & 0x3fffffff);\n      c = (l >>> 30) + (m >>> 15) + xh * h + (c >>> 30);\n      w[j++] = l & 0x3fffffff;\n    }\n\n    return c;\n  } // Alternately, set max digit bits to 28 since some\n  // browsers slow down when dealing with 32-bit numbers.\n\n\n  function am3(i, x, w, j, c, n) {\n    var xl = x & 0x3fff,\n        xh = x >> 14;\n\n    while (--n >= 0) {\n      var l = this[i] & 0x3fff;\n      var h = this[i++] >> 14;\n      var m = xh * l + h * xl;\n      l = xl * l + ((m & 0x3fff) << 14) + w[j] + c;\n      c = (l >> 28) + (m >> 14) + xh * h;\n      w[j++] = l & 0xfffffff;\n    }\n\n    return c;\n  }\n\n  var inBrowser = typeof navigator !== \"undefined\";\n\n  if (inBrowser && j_lm && navigator.appName == \"Microsoft Internet Explorer\") {\n    BigInteger.prototype.am = am2;\n    dbits = 30;\n  } else if (inBrowser && j_lm && navigator.appName != \"Netscape\") {\n    BigInteger.prototype.am = am1;\n    dbits = 26;\n  } else {\n    // Mozilla/Netscape seems to prefer am3\n    BigInteger.prototype.am = am3;\n    dbits = 28;\n  }\n\n  BigInteger.prototype.DB = dbits;\n  BigInteger.prototype.DM = (1 << dbits) - 1;\n  BigInteger.prototype.DV = 1 << dbits;\n  var BI_FP = 52;\n  BigInteger.prototype.FV = Math.pow(2, BI_FP);\n  BigInteger.prototype.F1 = BI_FP - dbits;\n  BigInteger.prototype.F2 = 2 * dbits - BI_FP; // Digit conversions\n\n  var BI_RM = \"0123456789abcdefghijklmnopqrstuvwxyz\";\n  var BI_RC = new Array();\n  var rr, vv;\n  rr = \"0\".charCodeAt(0);\n\n  for (vv = 0; vv <= 9; ++vv) {\n    BI_RC[rr++] = vv;\n  }\n\n  rr = \"a\".charCodeAt(0);\n\n  for (vv = 10; vv < 36; ++vv) {\n    BI_RC[rr++] = vv;\n  }\n\n  rr = \"A\".charCodeAt(0);\n\n  for (vv = 10; vv < 36; ++vv) {\n    BI_RC[rr++] = vv;\n  }\n\n  function int2char(n) {\n    return BI_RM.charAt(n);\n  }\n\n  function intAt(s, i) {\n    var c = BI_RC[s.charCodeAt(i)];\n    return c == null ? -1 : c;\n  } // (protected) copy this to r\n\n\n  function bnpCopyTo(r) {\n    for (var i = this.t - 1; i >= 0; --i) {\n      r[i] = this[i];\n    }\n\n    r.t = this.t;\n    r.s = this.s;\n  } // (protected) set from integer value x, -DV <= x < DV\n\n\n  function bnpFromInt(x) {\n    this.t = 1;\n    this.s = x < 0 ? -1 : 0;\n    if (x > 0) this[0] = x;else if (x < -1) this[0] = x + this.DV;else this.t = 0;\n  } // return bigint initialized to value\n\n\n  function nbv(i) {\n    var r = nbi();\n    r.fromInt(i);\n    return r;\n  } // (protected) set from string and radix\n\n\n  function bnpFromString(s, b) {\n    var k;\n    if (b == 16) k = 4;else if (b == 8) k = 3;else if (b == 256) k = 8; // byte array\n    else if (b == 2) k = 1;else if (b == 32) k = 5;else if (b == 4) k = 2;else {\n      this.fromRadix(s, b);\n      return;\n    }\n    this.t = 0;\n    this.s = 0;\n    var i = s.length,\n        mi = false,\n        sh = 0;\n\n    while (--i >= 0) {\n      var x = k == 8 ? s[i] & 0xff : intAt(s, i);\n\n      if (x < 0) {\n        if (s.charAt(i) == \"-\") mi = true;\n        continue;\n      }\n\n      mi = false;\n      if (sh == 0) this[this.t++] = x;else if (sh + k > this.DB) {\n        this[this.t - 1] |= (x & (1 << this.DB - sh) - 1) << sh;\n        this[this.t++] = x >> this.DB - sh;\n      } else this[this.t - 1] |= x << sh;\n      sh += k;\n      if (sh >= this.DB) sh -= this.DB;\n    }\n\n    if (k == 8 && (s[0] & 0x80) != 0) {\n      this.s = -1;\n      if (sh > 0) this[this.t - 1] |= (1 << this.DB - sh) - 1 << sh;\n    }\n\n    this.clamp();\n    if (mi) BigInteger.ZERO.subTo(this, this);\n  } // (protected) clamp off excess high words\n\n\n  function bnpClamp() {\n    var c = this.s & this.DM;\n\n    while (this.t > 0 && this[this.t - 1] == c) {\n      --this.t;\n    }\n  } // (public) return string representation in given radix\n\n\n  function bnToString(b) {\n    if (this.s < 0) return \"-\" + this.negate().toString(b);\n    var k;\n    if (b == 16) k = 4;else if (b == 8) k = 3;else if (b == 2) k = 1;else if (b == 32) k = 5;else if (b == 4) k = 2;else return this.toRadix(b);\n    var km = (1 << k) - 1,\n        d,\n        m = false,\n        r = \"\",\n        i = this.t;\n    var p = this.DB - i * this.DB % k;\n\n    if (i-- > 0) {\n      if (p < this.DB && (d = this[i] >> p) > 0) {\n        m = true;\n        r = int2char(d);\n      }\n\n      while (i >= 0) {\n        if (p < k) {\n          d = (this[i] & (1 << p) - 1) << k - p;\n          d |= this[--i] >> (p += this.DB - k);\n        } else {\n          d = this[i] >> (p -= k) & km;\n\n          if (p <= 0) {\n            p += this.DB;\n            --i;\n          }\n        }\n\n        if (d > 0) m = true;\n        if (m) r += int2char(d);\n      }\n    }\n\n    return m ? r : \"0\";\n  } // (public) -this\n\n\n  function bnNegate() {\n    var r = nbi();\n    BigInteger.ZERO.subTo(this, r);\n    return r;\n  } // (public) |this|\n\n\n  function bnAbs() {\n    return this.s < 0 ? this.negate() : this;\n  } // (public) return + if this > a, - if this < a, 0 if equal\n\n\n  function bnCompareTo(a) {\n    var r = this.s - a.s;\n    if (r != 0) return r;\n    var i = this.t;\n    r = i - a.t;\n    if (r != 0) return this.s < 0 ? -r : r;\n\n    while (--i >= 0) {\n      if ((r = this[i] - a[i]) != 0) return r;\n    }\n\n    return 0;\n  } // returns bit length of the integer x\n\n\n  function nbits(x) {\n    var r = 1,\n        t;\n\n    if ((t = x >>> 16) != 0) {\n      x = t;\n      r += 16;\n    }\n\n    if ((t = x >> 8) != 0) {\n      x = t;\n      r += 8;\n    }\n\n    if ((t = x >> 4) != 0) {\n      x = t;\n      r += 4;\n    }\n\n    if ((t = x >> 2) != 0) {\n      x = t;\n      r += 2;\n    }\n\n    if ((t = x >> 1) != 0) {\n      x = t;\n      r += 1;\n    }\n\n    return r;\n  } // (public) return the number of bits in \"this\"\n\n\n  function bnBitLength() {\n    if (this.t <= 0) return 0;\n    return this.DB * (this.t - 1) + nbits(this[this.t - 1] ^ this.s & this.DM);\n  } // (protected) r = this << n*DB\n\n\n  function bnpDLShiftTo(n, r) {\n    var i;\n\n    for (i = this.t - 1; i >= 0; --i) {\n      r[i + n] = this[i];\n    }\n\n    for (i = n - 1; i >= 0; --i) {\n      r[i] = 0;\n    }\n\n    r.t = this.t + n;\n    r.s = this.s;\n  } // (protected) r = this >> n*DB\n\n\n  function bnpDRShiftTo(n, r) {\n    for (var i = n; i < this.t; ++i) {\n      r[i - n] = this[i];\n    }\n\n    r.t = Math.max(this.t - n, 0);\n    r.s = this.s;\n  } // (protected) r = this << n\n\n\n  function bnpLShiftTo(n, r) {\n    var bs = n % this.DB;\n    var cbs = this.DB - bs;\n    var bm = (1 << cbs) - 1;\n    var ds = Math.floor(n / this.DB),\n        c = this.s << bs & this.DM,\n        i;\n\n    for (i = this.t - 1; i >= 0; --i) {\n      r[i + ds + 1] = this[i] >> cbs | c;\n      c = (this[i] & bm) << bs;\n    }\n\n    for (i = ds - 1; i >= 0; --i) {\n      r[i] = 0;\n    }\n\n    r[ds] = c;\n    r.t = this.t + ds + 1;\n    r.s = this.s;\n    r.clamp();\n  } // (protected) r = this >> n\n\n\n  function bnpRShiftTo(n, r) {\n    r.s = this.s;\n    var ds = Math.floor(n / this.DB);\n\n    if (ds >= this.t) {\n      r.t = 0;\n      return;\n    }\n\n    var bs = n % this.DB;\n    var cbs = this.DB - bs;\n    var bm = (1 << bs) - 1;\n    r[0] = this[ds] >> bs;\n\n    for (var i = ds + 1; i < this.t; ++i) {\n      r[i - ds - 1] |= (this[i] & bm) << cbs;\n      r[i - ds] = this[i] >> bs;\n    }\n\n    if (bs > 0) r[this.t - ds - 1] |= (this.s & bm) << cbs;\n    r.t = this.t - ds;\n    r.clamp();\n  } // (protected) r = this - a\n\n\n  function bnpSubTo(a, r) {\n    var i = 0,\n        c = 0,\n        m = Math.min(a.t, this.t);\n\n    while (i < m) {\n      c += this[i] - a[i];\n      r[i++] = c & this.DM;\n      c >>= this.DB;\n    }\n\n    if (a.t < this.t) {\n      c -= a.s;\n\n      while (i < this.t) {\n        c += this[i];\n        r[i++] = c & this.DM;\n        c >>= this.DB;\n      }\n\n      c += this.s;\n    } else {\n      c += this.s;\n\n      while (i < a.t) {\n        c -= a[i];\n        r[i++] = c & this.DM;\n        c >>= this.DB;\n      }\n\n      c -= a.s;\n    }\n\n    r.s = c < 0 ? -1 : 0;\n    if (c < -1) r[i++] = this.DV + c;else if (c > 0) r[i++] = c;\n    r.t = i;\n    r.clamp();\n  } // (protected) r = this * a, r != this,a (HAC 14.12)\n  // \"this\" should be the larger one if appropriate.\n\n\n  function bnpMultiplyTo(a, r) {\n    var x = this.abs(),\n        y = a.abs();\n    var i = x.t;\n    r.t = i + y.t;\n\n    while (--i >= 0) {\n      r[i] = 0;\n    }\n\n    for (i = 0; i < y.t; ++i) {\n      r[i + x.t] = x.am(0, y[i], r, i, 0, x.t);\n    }\n\n    r.s = 0;\n    r.clamp();\n    if (this.s != a.s) BigInteger.ZERO.subTo(r, r);\n  } // (protected) r = this^2, r != this (HAC 14.16)\n\n\n  function bnpSquareTo(r) {\n    var x = this.abs();\n    var i = r.t = 2 * x.t;\n\n    while (--i >= 0) {\n      r[i] = 0;\n    }\n\n    for (i = 0; i < x.t - 1; ++i) {\n      var c = x.am(i, x[i], r, 2 * i, 0, 1);\n\n      if ((r[i + x.t] += x.am(i + 1, 2 * x[i], r, 2 * i + 1, c, x.t - i - 1)) >= x.DV) {\n        r[i + x.t] -= x.DV;\n        r[i + x.t + 1] = 1;\n      }\n    }\n\n    if (r.t > 0) r[r.t - 1] += x.am(i, x[i], r, 2 * i, 0, 1);\n    r.s = 0;\n    r.clamp();\n  } // (protected) divide this by m, quotient and remainder to q, r (HAC 14.20)\n  // r != q, this != m.  q or r may be null.\n\n\n  function bnpDivRemTo(m, q, r) {\n    var pm = m.abs();\n    if (pm.t <= 0) return;\n    var pt = this.abs();\n\n    if (pt.t < pm.t) {\n      if (q != null) q.fromInt(0);\n      if (r != null) this.copyTo(r);\n      return;\n    }\n\n    if (r == null) r = nbi();\n    var y = nbi(),\n        ts = this.s,\n        ms = m.s;\n    var nsh = this.DB - nbits(pm[pm.t - 1]); // normalize modulus\n\n    if (nsh > 0) {\n      pm.lShiftTo(nsh, y);\n      pt.lShiftTo(nsh, r);\n    } else {\n      pm.copyTo(y);\n      pt.copyTo(r);\n    }\n\n    var ys = y.t;\n    var y0 = y[ys - 1];\n    if (y0 == 0) return;\n    var yt = y0 * (1 << this.F1) + (ys > 1 ? y[ys - 2] >> this.F2 : 0);\n    var d1 = this.FV / yt,\n        d2 = (1 << this.F1) / yt,\n        e = 1 << this.F2;\n    var i = r.t,\n        j = i - ys,\n        t = q == null ? nbi() : q;\n    y.dlShiftTo(j, t);\n\n    if (r.compareTo(t) >= 0) {\n      r[r.t++] = 1;\n      r.subTo(t, r);\n    }\n\n    BigInteger.ONE.dlShiftTo(ys, t);\n    t.subTo(y, y); // \"negative\" y so we can replace sub with am later\n\n    while (y.t < ys) {\n      y[y.t++] = 0;\n    }\n\n    while (--j >= 0) {\n      // Estimate quotient digit\n      var qd = r[--i] == y0 ? this.DM : Math.floor(r[i] * d1 + (r[i - 1] + e) * d2);\n\n      if ((r[i] += y.am(0, qd, r, j, 0, ys)) < qd) {\n        // Try it out\n        y.dlShiftTo(j, t);\n        r.subTo(t, r);\n\n        while (r[i] < --qd) {\n          r.subTo(t, r);\n        }\n      }\n    }\n\n    if (q != null) {\n      r.drShiftTo(ys, q);\n      if (ts != ms) BigInteger.ZERO.subTo(q, q);\n    }\n\n    r.t = ys;\n    r.clamp();\n    if (nsh > 0) r.rShiftTo(nsh, r); // Denormalize remainder\n\n    if (ts < 0) BigInteger.ZERO.subTo(r, r);\n  } // (public) this mod a\n\n\n  function bnMod(a) {\n    var r = nbi();\n    this.abs().divRemTo(a, null, r);\n    if (this.s < 0 && r.compareTo(BigInteger.ZERO) > 0) a.subTo(r, r);\n    return r;\n  } // Modular reduction using \"classic\" algorithm\n\n\n  function Classic(m) {\n    this.m = m;\n  }\n\n  function cConvert(x) {\n    if (x.s < 0 || x.compareTo(this.m) >= 0) return x.mod(this.m);else return x;\n  }\n\n  function cRevert(x) {\n    return x;\n  }\n\n  function cReduce(x) {\n    x.divRemTo(this.m, null, x);\n  }\n\n  function cMulTo(x, y, r) {\n    x.multiplyTo(y, r);\n    this.reduce(r);\n  }\n\n  function cSqrTo(x, r) {\n    x.squareTo(r);\n    this.reduce(r);\n  }\n\n  Classic.prototype.convert = cConvert;\n  Classic.prototype.revert = cRevert;\n  Classic.prototype.reduce = cReduce;\n  Classic.prototype.mulTo = cMulTo;\n  Classic.prototype.sqrTo = cSqrTo; // (protected) return \"-1/this % 2^DB\"; useful for Mont. reduction\n  // justification:\n  //         xy == 1 (mod m)\n  //         xy =  1+km\n  //   xy(2-xy) = (1+km)(1-km)\n  // x[y(2-xy)] = 1-k^2m^2\n  // x[y(2-xy)] == 1 (mod m^2)\n  // if y is 1/x mod m, then y(2-xy) is 1/x mod m^2\n  // should reduce x and y(2-xy) by m^2 at each step to keep size bounded.\n  // JS multiply \"overflows\" differently from C/C++, so care is needed here.\n\n  function bnpInvDigit() {\n    if (this.t < 1) return 0;\n    var x = this[0];\n    if ((x & 1) == 0) return 0;\n    var y = x & 3; // y == 1/x mod 2^2\n\n    y = y * (2 - (x & 0xf) * y) & 0xf; // y == 1/x mod 2^4\n\n    y = y * (2 - (x & 0xff) * y) & 0xff; // y == 1/x mod 2^8\n\n    y = y * (2 - ((x & 0xffff) * y & 0xffff)) & 0xffff; // y == 1/x mod 2^16\n    // last step - calculate inverse mod DV directly;\n    // assumes 16 < DB <= 32 and assumes ability to handle 48-bit ints\n\n    y = y * (2 - x * y % this.DV) % this.DV; // y == 1/x mod 2^dbits\n    // we really want the negative inverse, and -DV < y < DV\n\n    return y > 0 ? this.DV - y : -y;\n  } // Montgomery reduction\n\n\n  function Montgomery(m) {\n    this.m = m;\n    this.mp = m.invDigit();\n    this.mpl = this.mp & 0x7fff;\n    this.mph = this.mp >> 15;\n    this.um = (1 << m.DB - 15) - 1;\n    this.mt2 = 2 * m.t;\n  } // xR mod m\n\n\n  function montConvert(x) {\n    var r = nbi();\n    x.abs().dlShiftTo(this.m.t, r);\n    r.divRemTo(this.m, null, r);\n    if (x.s < 0 && r.compareTo(BigInteger.ZERO) > 0) this.m.subTo(r, r);\n    return r;\n  } // x/R mod m\n\n\n  function montRevert(x) {\n    var r = nbi();\n    x.copyTo(r);\n    this.reduce(r);\n    return r;\n  } // x = x/R mod m (HAC 14.32)\n\n\n  function montReduce(x) {\n    while (x.t <= this.mt2) {\n      // pad x so am has enough room later\n      x[x.t++] = 0;\n    }\n\n    for (var i = 0; i < this.m.t; ++i) {\n      // faster way of calculating u0 = x[i]*mp mod DV\n      var j = x[i] & 0x7fff;\n      var u0 = j * this.mpl + ((j * this.mph + (x[i] >> 15) * this.mpl & this.um) << 15) & x.DM; // use am to combine the multiply-shift-add into one call\n\n      j = i + this.m.t;\n      x[j] += this.m.am(0, u0, x, i, 0, this.m.t); // propagate carry\n\n      while (x[j] >= x.DV) {\n        x[j] -= x.DV;\n        x[++j]++;\n      }\n    }\n\n    x.clamp();\n    x.drShiftTo(this.m.t, x);\n    if (x.compareTo(this.m) >= 0) x.subTo(this.m, x);\n  } // r = \"x^2/R mod m\"; x != r\n\n\n  function montSqrTo(x, r) {\n    x.squareTo(r);\n    this.reduce(r);\n  } // r = \"xy/R mod m\"; x,y != r\n\n\n  function montMulTo(x, y, r) {\n    x.multiplyTo(y, r);\n    this.reduce(r);\n  }\n\n  Montgomery.prototype.convert = montConvert;\n  Montgomery.prototype.revert = montRevert;\n  Montgomery.prototype.reduce = montReduce;\n  Montgomery.prototype.mulTo = montMulTo;\n  Montgomery.prototype.sqrTo = montSqrTo; // (protected) true iff this is even\n\n  function bnpIsEven() {\n    return (this.t > 0 ? this[0] & 1 : this.s) == 0;\n  } // (protected) this^e, e < 2^32, doing sqr and mul with \"r\" (HAC 14.79)\n\n\n  function bnpExp(e, z) {\n    if (e > 0xffffffff || e < 1) return BigInteger.ONE;\n    var r = nbi(),\n        r2 = nbi(),\n        g = z.convert(this),\n        i = nbits(e) - 1;\n    g.copyTo(r);\n\n    while (--i >= 0) {\n      z.sqrTo(r, r2);\n      if ((e & 1 << i) > 0) z.mulTo(r2, g, r);else {\n        var t = r;\n        r = r2;\n        r2 = t;\n      }\n    }\n\n    return z.revert(r);\n  } // (public) this^e % m, 0 <= e < 2^32\n\n\n  function bnModPowInt(e, m) {\n    var z;\n    if (e < 256 || m.isEven()) z = new Classic(m);else z = new Montgomery(m);\n    return this.exp(e, z);\n  } // protected\n\n\n  BigInteger.prototype.copyTo = bnpCopyTo;\n  BigInteger.prototype.fromInt = bnpFromInt;\n  BigInteger.prototype.fromString = bnpFromString;\n  BigInteger.prototype.clamp = bnpClamp;\n  BigInteger.prototype.dlShiftTo = bnpDLShiftTo;\n  BigInteger.prototype.drShiftTo = bnpDRShiftTo;\n  BigInteger.prototype.lShiftTo = bnpLShiftTo;\n  BigInteger.prototype.rShiftTo = bnpRShiftTo;\n  BigInteger.prototype.subTo = bnpSubTo;\n  BigInteger.prototype.multiplyTo = bnpMultiplyTo;\n  BigInteger.prototype.squareTo = bnpSquareTo;\n  BigInteger.prototype.divRemTo = bnpDivRemTo;\n  BigInteger.prototype.invDigit = bnpInvDigit;\n  BigInteger.prototype.isEven = bnpIsEven;\n  BigInteger.prototype.exp = bnpExp; // public\n\n  BigInteger.prototype.toString = bnToString;\n  BigInteger.prototype.negate = bnNegate;\n  BigInteger.prototype.abs = bnAbs;\n  BigInteger.prototype.compareTo = bnCompareTo;\n  BigInteger.prototype.bitLength = bnBitLength;\n  BigInteger.prototype.mod = bnMod;\n  BigInteger.prototype.modPowInt = bnModPowInt; // \"constants\"\n\n  BigInteger.ZERO = nbv(0);\n  BigInteger.ONE = nbv(1); // Copyright (c) 2005-2009  Tom Wu\n  // All Rights Reserved.\n  // See \"LICENSE\" for details.\n  // Extended JavaScript BN functions, required for RSA private ops.\n  // Version 1.1: new BigInteger(\"0\", 10) returns \"proper\" zero\n  // Version 1.2: square() API, isProbablePrime fix\n  // (public)\n\n  function bnClone() {\n    var r = nbi();\n    this.copyTo(r);\n    return r;\n  } // (public) return value as integer\n\n\n  function bnIntValue() {\n    if (this.s < 0) {\n      if (this.t == 1) return this[0] - this.DV;else if (this.t == 0) return -1;\n    } else if (this.t == 1) return this[0];else if (this.t == 0) return 0; // assumes 16 < DB < 32\n\n\n    return (this[1] & (1 << 32 - this.DB) - 1) << this.DB | this[0];\n  } // (public) return value as byte\n\n\n  function bnByteValue() {\n    return this.t == 0 ? this.s : this[0] << 24 >> 24;\n  } // (public) return value as short (assumes DB>=16)\n\n\n  function bnShortValue() {\n    return this.t == 0 ? this.s : this[0] << 16 >> 16;\n  } // (protected) return x s.t. r^x < DV\n\n\n  function bnpChunkSize(r) {\n    return Math.floor(Math.LN2 * this.DB / Math.log(r));\n  } // (public) 0 if this == 0, 1 if this > 0\n\n\n  function bnSigNum() {\n    if (this.s < 0) return -1;else if (this.t <= 0 || this.t == 1 && this[0] <= 0) return 0;else return 1;\n  } // (protected) convert to radix string\n\n\n  function bnpToRadix(b) {\n    if (b == null) b = 10;\n    if (this.signum() == 0 || b < 2 || b > 36) return \"0\";\n    var cs = this.chunkSize(b);\n    var a = Math.pow(b, cs);\n    var d = nbv(a),\n        y = nbi(),\n        z = nbi(),\n        r = \"\";\n    this.divRemTo(d, y, z);\n\n    while (y.signum() > 0) {\n      r = (a + z.intValue()).toString(b).substr(1) + r;\n      y.divRemTo(d, y, z);\n    }\n\n    return z.intValue().toString(b) + r;\n  } // (protected) convert from radix string\n\n\n  function bnpFromRadix(s, b) {\n    this.fromInt(0);\n    if (b == null) b = 10;\n    var cs = this.chunkSize(b);\n    var d = Math.pow(b, cs),\n        mi = false,\n        j = 0,\n        w = 0;\n\n    for (var i = 0; i < s.length; ++i) {\n      var x = intAt(s, i);\n\n      if (x < 0) {\n        if (s.charAt(i) == \"-\" && this.signum() == 0) mi = true;\n        continue;\n      }\n\n      w = b * w + x;\n\n      if (++j >= cs) {\n        this.dMultiply(d);\n        this.dAddOffset(w, 0);\n        j = 0;\n        w = 0;\n      }\n    }\n\n    if (j > 0) {\n      this.dMultiply(Math.pow(b, j));\n      this.dAddOffset(w, 0);\n    }\n\n    if (mi) BigInteger.ZERO.subTo(this, this);\n  } // (protected) alternate constructor\n\n\n  function bnpFromNumber(a, b, c) {\n    if (\"number\" == typeof b) {\n      // new BigInteger(int,int,RNG)\n      if (a < 2) this.fromInt(1);else {\n        this.fromNumber(a, c);\n        if (!this.testBit(a - 1)) // force MSB set\n          this.bitwiseTo(BigInteger.ONE.shiftLeft(a - 1), op_or, this);\n        if (this.isEven()) this.dAddOffset(1, 0); // force odd\n\n        while (!this.isProbablePrime(b)) {\n          this.dAddOffset(2, 0);\n          if (this.bitLength() > a) this.subTo(BigInteger.ONE.shiftLeft(a - 1), this);\n        }\n      }\n    } else {\n      // new BigInteger(int,RNG)\n      var x = new Array(),\n          t = a & 7;\n      x.length = (a >> 3) + 1;\n      b.nextBytes(x);\n      if (t > 0) x[0] &= (1 << t) - 1;else x[0] = 0;\n      this.fromString(x, 256);\n    }\n  } // (public) convert to bigendian byte array\n\n\n  function bnToByteArray() {\n    var i = this.t,\n        r = new Array();\n    r[0] = this.s;\n    var p = this.DB - i * this.DB % 8,\n        d,\n        k = 0;\n\n    if (i-- > 0) {\n      if (p < this.DB && (d = this[i] >> p) != (this.s & this.DM) >> p) r[k++] = d | this.s << this.DB - p;\n\n      while (i >= 0) {\n        if (p < 8) {\n          d = (this[i] & (1 << p) - 1) << 8 - p;\n          d |= this[--i] >> (p += this.DB - 8);\n        } else {\n          d = this[i] >> (p -= 8) & 0xff;\n\n          if (p <= 0) {\n            p += this.DB;\n            --i;\n          }\n        }\n\n        if ((d & 0x80) != 0) d |= -256;\n        if (k == 0 && (this.s & 0x80) != (d & 0x80)) ++k;\n        if (k > 0 || d != this.s) r[k++] = d;\n      }\n    }\n\n    return r;\n  }\n\n  function bnEquals(a) {\n    return this.compareTo(a) == 0;\n  }\n\n  function bnMin(a) {\n    return this.compareTo(a) < 0 ? this : a;\n  }\n\n  function bnMax(a) {\n    return this.compareTo(a) > 0 ? this : a;\n  } // (protected) r = this op a (bitwise)\n\n\n  function bnpBitwiseTo(a, op, r) {\n    var i,\n        f,\n        m = Math.min(a.t, this.t);\n\n    for (i = 0; i < m; ++i) {\n      r[i] = op(this[i], a[i]);\n    }\n\n    if (a.t < this.t) {\n      f = a.s & this.DM;\n\n      for (i = m; i < this.t; ++i) {\n        r[i] = op(this[i], f);\n      }\n\n      r.t = this.t;\n    } else {\n      f = this.s & this.DM;\n\n      for (i = m; i < a.t; ++i) {\n        r[i] = op(f, a[i]);\n      }\n\n      r.t = a.t;\n    }\n\n    r.s = op(this.s, a.s);\n    r.clamp();\n  } // (public) this & a\n\n\n  function op_and(x, y) {\n    return x & y;\n  }\n\n  function bnAnd(a) {\n    var r = nbi();\n    this.bitwiseTo(a, op_and, r);\n    return r;\n  } // (public) this | a\n\n\n  function op_or(x, y) {\n    return x | y;\n  }\n\n  function bnOr(a) {\n    var r = nbi();\n    this.bitwiseTo(a, op_or, r);\n    return r;\n  } // (public) this ^ a\n\n\n  function op_xor(x, y) {\n    return x ^ y;\n  }\n\n  function bnXor(a) {\n    var r = nbi();\n    this.bitwiseTo(a, op_xor, r);\n    return r;\n  } // (public) this & ~a\n\n\n  function op_andnot(x, y) {\n    return x & ~y;\n  }\n\n  function bnAndNot(a) {\n    var r = nbi();\n    this.bitwiseTo(a, op_andnot, r);\n    return r;\n  } // (public) ~this\n\n\n  function bnNot() {\n    var r = nbi();\n\n    for (var i = 0; i < this.t; ++i) {\n      r[i] = this.DM & ~this[i];\n    }\n\n    r.t = this.t;\n    r.s = ~this.s;\n    return r;\n  } // (public) this << n\n\n\n  function bnShiftLeft(n) {\n    var r = nbi();\n    if (n < 0) this.rShiftTo(-n, r);else this.lShiftTo(n, r);\n    return r;\n  } // (public) this >> n\n\n\n  function bnShiftRight(n) {\n    var r = nbi();\n    if (n < 0) this.lShiftTo(-n, r);else this.rShiftTo(n, r);\n    return r;\n  } // return index of lowest 1-bit in x, x < 2^31\n\n\n  function lbit(x) {\n    if (x == 0) return -1;\n    var r = 0;\n\n    if ((x & 0xffff) == 0) {\n      x >>= 16;\n      r += 16;\n    }\n\n    if ((x & 0xff) == 0) {\n      x >>= 8;\n      r += 8;\n    }\n\n    if ((x & 0xf) == 0) {\n      x >>= 4;\n      r += 4;\n    }\n\n    if ((x & 3) == 0) {\n      x >>= 2;\n      r += 2;\n    }\n\n    if ((x & 1) == 0) ++r;\n    return r;\n  } // (public) returns index of lowest 1-bit (or -1 if none)\n\n\n  function bnGetLowestSetBit() {\n    for (var i = 0; i < this.t; ++i) {\n      if (this[i] != 0) return i * this.DB + lbit(this[i]);\n    }\n\n    if (this.s < 0) return this.t * this.DB;\n    return -1;\n  } // return number of 1 bits in x\n\n\n  function cbit(x) {\n    var r = 0;\n\n    while (x != 0) {\n      x &= x - 1;\n      ++r;\n    }\n\n    return r;\n  } // (public) return number of set bits\n\n\n  function bnBitCount() {\n    var r = 0,\n        x = this.s & this.DM;\n\n    for (var i = 0; i < this.t; ++i) {\n      r += cbit(this[i] ^ x);\n    }\n\n    return r;\n  } // (public) true iff nth bit is set\n\n\n  function bnTestBit(n) {\n    var j = Math.floor(n / this.DB);\n    if (j >= this.t) return this.s != 0;\n    return (this[j] & 1 << n % this.DB) != 0;\n  } // (protected) this op (1<<n)\n\n\n  function bnpChangeBit(n, op) {\n    var r = BigInteger.ONE.shiftLeft(n);\n    this.bitwiseTo(r, op, r);\n    return r;\n  } // (public) this | (1<<n)\n\n\n  function bnSetBit(n) {\n    return this.changeBit(n, op_or);\n  } // (public) this & ~(1<<n)\n\n\n  function bnClearBit(n) {\n    return this.changeBit(n, op_andnot);\n  } // (public) this ^ (1<<n)\n\n\n  function bnFlipBit(n) {\n    return this.changeBit(n, op_xor);\n  } // (protected) r = this + a\n\n\n  function bnpAddTo(a, r) {\n    var i = 0,\n        c = 0,\n        m = Math.min(a.t, this.t);\n\n    while (i < m) {\n      c += this[i] + a[i];\n      r[i++] = c & this.DM;\n      c >>= this.DB;\n    }\n\n    if (a.t < this.t) {\n      c += a.s;\n\n      while (i < this.t) {\n        c += this[i];\n        r[i++] = c & this.DM;\n        c >>= this.DB;\n      }\n\n      c += this.s;\n    } else {\n      c += this.s;\n\n      while (i < a.t) {\n        c += a[i];\n        r[i++] = c & this.DM;\n        c >>= this.DB;\n      }\n\n      c += a.s;\n    }\n\n    r.s = c < 0 ? -1 : 0;\n    if (c > 0) r[i++] = c;else if (c < -1) r[i++] = this.DV + c;\n    r.t = i;\n    r.clamp();\n  } // (public) this + a\n\n\n  function bnAdd(a) {\n    var r = nbi();\n    this.addTo(a, r);\n    return r;\n  } // (public) this - a\n\n\n  function bnSubtract(a) {\n    var r = nbi();\n    this.subTo(a, r);\n    return r;\n  } // (public) this * a\n\n\n  function bnMultiply(a) {\n    var r = nbi();\n    this.multiplyTo(a, r);\n    return r;\n  } // (public) this^2\n\n\n  function bnSquare() {\n    var r = nbi();\n    this.squareTo(r);\n    return r;\n  } // (public) this / a\n\n\n  function bnDivide(a) {\n    var r = nbi();\n    this.divRemTo(a, r, null);\n    return r;\n  } // (public) this % a\n\n\n  function bnRemainder(a) {\n    var r = nbi();\n    this.divRemTo(a, null, r);\n    return r;\n  } // (public) [this/a,this%a]\n\n\n  function bnDivideAndRemainder(a) {\n    var q = nbi(),\n        r = nbi();\n    this.divRemTo(a, q, r);\n    return new Array(q, r);\n  } // (protected) this *= n, this >= 0, 1 < n < DV\n\n\n  function bnpDMultiply(n) {\n    this[this.t] = this.am(0, n - 1, this, 0, 0, this.t);\n    ++this.t;\n    this.clamp();\n  } // (protected) this += n << w words, this >= 0\n\n\n  function bnpDAddOffset(n, w) {\n    if (n == 0) return;\n\n    while (this.t <= w) {\n      this[this.t++] = 0;\n    }\n\n    this[w] += n;\n\n    while (this[w] >= this.DV) {\n      this[w] -= this.DV;\n      if (++w >= this.t) this[this.t++] = 0;\n      ++this[w];\n    }\n  } // A \"null\" reducer\n\n\n  function NullExp() {}\n\n  function nNop(x) {\n    return x;\n  }\n\n  function nMulTo(x, y, r) {\n    x.multiplyTo(y, r);\n  }\n\n  function nSqrTo(x, r) {\n    x.squareTo(r);\n  }\n\n  NullExp.prototype.convert = nNop;\n  NullExp.prototype.revert = nNop;\n  NullExp.prototype.mulTo = nMulTo;\n  NullExp.prototype.sqrTo = nSqrTo; // (public) this^e\n\n  function bnPow(e) {\n    return this.exp(e, new NullExp());\n  } // (protected) r = lower n words of \"this * a\", a.t <= n\n  // \"this\" should be the larger one if appropriate.\n\n\n  function bnpMultiplyLowerTo(a, n, r) {\n    var i = Math.min(this.t + a.t, n);\n    r.s = 0; // assumes a,this >= 0\n\n    r.t = i;\n\n    while (i > 0) {\n      r[--i] = 0;\n    }\n\n    var j;\n\n    for (j = r.t - this.t; i < j; ++i) {\n      r[i + this.t] = this.am(0, a[i], r, i, 0, this.t);\n    }\n\n    for (j = Math.min(a.t, n); i < j; ++i) {\n      this.am(0, a[i], r, i, 0, n - i);\n    }\n\n    r.clamp();\n  } // (protected) r = \"this * a\" without lower n words, n > 0\n  // \"this\" should be the larger one if appropriate.\n\n\n  function bnpMultiplyUpperTo(a, n, r) {\n    --n;\n    var i = r.t = this.t + a.t - n;\n    r.s = 0; // assumes a,this >= 0\n\n    while (--i >= 0) {\n      r[i] = 0;\n    }\n\n    for (i = Math.max(n - this.t, 0); i < a.t; ++i) {\n      r[this.t + i - n] = this.am(n - i, a[i], r, 0, 0, this.t + i - n);\n    }\n\n    r.clamp();\n    r.drShiftTo(1, r);\n  } // Barrett modular reduction\n\n\n  function Barrett(m) {\n    // setup Barrett\n    this.r2 = nbi();\n    this.q3 = nbi();\n    BigInteger.ONE.dlShiftTo(2 * m.t, this.r2);\n    this.mu = this.r2.divide(m);\n    this.m = m;\n  }\n\n  function barrettConvert(x) {\n    if (x.s < 0 || x.t > 2 * this.m.t) return x.mod(this.m);else if (x.compareTo(this.m) < 0) return x;else {\n      var r = nbi();\n      x.copyTo(r);\n      this.reduce(r);\n      return r;\n    }\n  }\n\n  function barrettRevert(x) {\n    return x;\n  } // x = x mod m (HAC 14.42)\n\n\n  function barrettReduce(x) {\n    x.drShiftTo(this.m.t - 1, this.r2);\n\n    if (x.t > this.m.t + 1) {\n      x.t = this.m.t + 1;\n      x.clamp();\n    }\n\n    this.mu.multiplyUpperTo(this.r2, this.m.t + 1, this.q3);\n    this.m.multiplyLowerTo(this.q3, this.m.t + 1, this.r2);\n\n    while (x.compareTo(this.r2) < 0) {\n      x.dAddOffset(1, this.m.t + 1);\n    }\n\n    x.subTo(this.r2, x);\n\n    while (x.compareTo(this.m) >= 0) {\n      x.subTo(this.m, x);\n    }\n  } // r = x^2 mod m; x != r\n\n\n  function barrettSqrTo(x, r) {\n    x.squareTo(r);\n    this.reduce(r);\n  } // r = x*y mod m; x,y != r\n\n\n  function barrettMulTo(x, y, r) {\n    x.multiplyTo(y, r);\n    this.reduce(r);\n  }\n\n  Barrett.prototype.convert = barrettConvert;\n  Barrett.prototype.revert = barrettRevert;\n  Barrett.prototype.reduce = barrettReduce;\n  Barrett.prototype.mulTo = barrettMulTo;\n  Barrett.prototype.sqrTo = barrettSqrTo; // (public) this^e % m (HAC 14.85)\n\n  function bnModPow(e, m) {\n    var i = e.bitLength(),\n        k,\n        r = nbv(1),\n        z;\n    if (i <= 0) return r;else if (i < 18) k = 1;else if (i < 48) k = 3;else if (i < 144) k = 4;else if (i < 768) k = 5;else k = 6;\n    if (i < 8) z = new Classic(m);else if (m.isEven()) z = new Barrett(m);else z = new Montgomery(m); // precomputation\n\n    var g = new Array(),\n        n = 3,\n        k1 = k - 1,\n        km = (1 << k) - 1;\n    g[1] = z.convert(this);\n\n    if (k > 1) {\n      var g2 = nbi();\n      z.sqrTo(g[1], g2);\n\n      while (n <= km) {\n        g[n] = nbi();\n        z.mulTo(g2, g[n - 2], g[n]);\n        n += 2;\n      }\n    }\n\n    var j = e.t - 1,\n        w,\n        is1 = true,\n        r2 = nbi(),\n        t;\n    i = nbits(e[j]) - 1;\n\n    while (j >= 0) {\n      if (i >= k1) w = e[j] >> i - k1 & km;else {\n        w = (e[j] & (1 << i + 1) - 1) << k1 - i;\n        if (j > 0) w |= e[j - 1] >> this.DB + i - k1;\n      }\n      n = k;\n\n      while ((w & 1) == 0) {\n        w >>= 1;\n        --n;\n      }\n\n      if ((i -= n) < 0) {\n        i += this.DB;\n        --j;\n      }\n\n      if (is1) {\n        // ret == 1, don't bother squaring or multiplying it\n        g[w].copyTo(r);\n        is1 = false;\n      } else {\n        while (n > 1) {\n          z.sqrTo(r, r2);\n          z.sqrTo(r2, r);\n          n -= 2;\n        }\n\n        if (n > 0) z.sqrTo(r, r2);else {\n          t = r;\n          r = r2;\n          r2 = t;\n        }\n        z.mulTo(r2, g[w], r);\n      }\n\n      while (j >= 0 && (e[j] & 1 << i) == 0) {\n        z.sqrTo(r, r2);\n        t = r;\n        r = r2;\n        r2 = t;\n\n        if (--i < 0) {\n          i = this.DB - 1;\n          --j;\n        }\n      }\n    }\n\n    return z.revert(r);\n  } // (public) gcd(this,a) (HAC 14.54)\n\n\n  function bnGCD(a) {\n    var x = this.s < 0 ? this.negate() : this.clone();\n    var y = a.s < 0 ? a.negate() : a.clone();\n\n    if (x.compareTo(y) < 0) {\n      var t = x;\n      x = y;\n      y = t;\n    }\n\n    var i = x.getLowestSetBit(),\n        g = y.getLowestSetBit();\n    if (g < 0) return x;\n    if (i < g) g = i;\n\n    if (g > 0) {\n      x.rShiftTo(g, x);\n      y.rShiftTo(g, y);\n    }\n\n    while (x.signum() > 0) {\n      if ((i = x.getLowestSetBit()) > 0) x.rShiftTo(i, x);\n      if ((i = y.getLowestSetBit()) > 0) y.rShiftTo(i, y);\n\n      if (x.compareTo(y) >= 0) {\n        x.subTo(y, x);\n        x.rShiftTo(1, x);\n      } else {\n        y.subTo(x, y);\n        y.rShiftTo(1, y);\n      }\n    }\n\n    if (g > 0) y.lShiftTo(g, y);\n    return y;\n  } // (protected) this % n, n < 2^26\n\n\n  function bnpModInt(n) {\n    if (n <= 0) return 0;\n    var d = this.DV % n,\n        r = this.s < 0 ? n - 1 : 0;\n    if (this.t > 0) if (d == 0) r = this[0] % n;else for (var i = this.t - 1; i >= 0; --i) {\n      r = (d * r + this[i]) % n;\n    }\n    return r;\n  } // (public) 1/this % m (HAC 14.61)\n\n\n  function bnModInverse(m) {\n    var ac = m.isEven();\n    if (this.isEven() && ac || m.signum() == 0) return BigInteger.ZERO;\n    var u = m.clone(),\n        v = this.clone();\n    var a = nbv(1),\n        b = nbv(0),\n        c = nbv(0),\n        d = nbv(1);\n\n    while (u.signum() != 0) {\n      while (u.isEven()) {\n        u.rShiftTo(1, u);\n\n        if (ac) {\n          if (!a.isEven() || !b.isEven()) {\n            a.addTo(this, a);\n            b.subTo(m, b);\n          }\n\n          a.rShiftTo(1, a);\n        } else if (!b.isEven()) b.subTo(m, b);\n\n        b.rShiftTo(1, b);\n      }\n\n      while (v.isEven()) {\n        v.rShiftTo(1, v);\n\n        if (ac) {\n          if (!c.isEven() || !d.isEven()) {\n            c.addTo(this, c);\n            d.subTo(m, d);\n          }\n\n          c.rShiftTo(1, c);\n        } else if (!d.isEven()) d.subTo(m, d);\n\n        d.rShiftTo(1, d);\n      }\n\n      if (u.compareTo(v) >= 0) {\n        u.subTo(v, u);\n        if (ac) a.subTo(c, a);\n        b.subTo(d, b);\n      } else {\n        v.subTo(u, v);\n        if (ac) c.subTo(a, c);\n        d.subTo(b, d);\n      }\n    }\n\n    if (v.compareTo(BigInteger.ONE) != 0) return BigInteger.ZERO;\n    if (d.compareTo(m) >= 0) return d.subtract(m);\n    if (d.signum() < 0) d.addTo(m, d);else return d;\n    if (d.signum() < 0) return d.add(m);else return d;\n  }\n\n  var lowprimes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997];\n  var lplim = (1 << 26) / lowprimes[lowprimes.length - 1]; // (public) test primality with certainty >= 1-.5^t\n\n  function bnIsProbablePrime(t) {\n    var i,\n        x = this.abs();\n\n    if (x.t == 1 && x[0] <= lowprimes[lowprimes.length - 1]) {\n      for (i = 0; i < lowprimes.length; ++i) {\n        if (x[0] == lowprimes[i]) return true;\n      }\n\n      return false;\n    }\n\n    if (x.isEven()) return false;\n    i = 1;\n\n    while (i < lowprimes.length) {\n      var m = lowprimes[i],\n          j = i + 1;\n\n      while (j < lowprimes.length && m < lplim) {\n        m *= lowprimes[j++];\n      }\n\n      m = x.modInt(m);\n\n      while (i < j) {\n        if (m % lowprimes[i++] == 0) return false;\n      }\n    }\n\n    return x.millerRabin(t);\n  } // (protected) true if probably prime (HAC 4.24, Miller-Rabin)\n\n\n  function bnpMillerRabin(t) {\n    var n1 = this.subtract(BigInteger.ONE);\n    var k = n1.getLowestSetBit();\n    if (k <= 0) return false;\n    var r = n1.shiftRight(k);\n    t = t + 1 >> 1;\n    if (t > lowprimes.length) t = lowprimes.length;\n    var a = nbi();\n\n    for (var i = 0; i < t; ++i) {\n      //Pick bases at random, instead of starting at 2\n      a.fromInt(lowprimes[Math.floor(Math.random() * lowprimes.length)]);\n      var y = a.modPow(r, this);\n\n      if (y.compareTo(BigInteger.ONE) != 0 && y.compareTo(n1) != 0) {\n        var j = 1;\n\n        while (j++ < k && y.compareTo(n1) != 0) {\n          y = y.modPowInt(2, this);\n          if (y.compareTo(BigInteger.ONE) == 0) return false;\n        }\n\n        if (y.compareTo(n1) != 0) return false;\n      }\n    }\n\n    return true;\n  } // protected\n\n\n  BigInteger.prototype.chunkSize = bnpChunkSize;\n  BigInteger.prototype.toRadix = bnpToRadix;\n  BigInteger.prototype.fromRadix = bnpFromRadix;\n  BigInteger.prototype.fromNumber = bnpFromNumber;\n  BigInteger.prototype.bitwiseTo = bnpBitwiseTo;\n  BigInteger.prototype.changeBit = bnpChangeBit;\n  BigInteger.prototype.addTo = bnpAddTo;\n  BigInteger.prototype.dMultiply = bnpDMultiply;\n  BigInteger.prototype.dAddOffset = bnpDAddOffset;\n  BigInteger.prototype.multiplyLowerTo = bnpMultiplyLowerTo;\n  BigInteger.prototype.multiplyUpperTo = bnpMultiplyUpperTo;\n  BigInteger.prototype.modInt = bnpModInt;\n  BigInteger.prototype.millerRabin = bnpMillerRabin; // public\n\n  BigInteger.prototype.clone = bnClone;\n  BigInteger.prototype.intValue = bnIntValue;\n  BigInteger.prototype.byteValue = bnByteValue;\n  BigInteger.prototype.shortValue = bnShortValue;\n  BigInteger.prototype.signum = bnSigNum;\n  BigInteger.prototype.toByteArray = bnToByteArray;\n  BigInteger.prototype.equals = bnEquals;\n  BigInteger.prototype.min = bnMin;\n  BigInteger.prototype.max = bnMax;\n  BigInteger.prototype.and = bnAnd;\n  BigInteger.prototype.or = bnOr;\n  BigInteger.prototype.xor = bnXor;\n  BigInteger.prototype.andNot = bnAndNot;\n  BigInteger.prototype.not = bnNot;\n  BigInteger.prototype.shiftLeft = bnShiftLeft;\n  BigInteger.prototype.shiftRight = bnShiftRight;\n  BigInteger.prototype.getLowestSetBit = bnGetLowestSetBit;\n  BigInteger.prototype.bitCount = bnBitCount;\n  BigInteger.prototype.testBit = bnTestBit;\n  BigInteger.prototype.setBit = bnSetBit;\n  BigInteger.prototype.clearBit = bnClearBit;\n  BigInteger.prototype.flipBit = bnFlipBit;\n  BigInteger.prototype.add = bnAdd;\n  BigInteger.prototype.subtract = bnSubtract;\n  BigInteger.prototype.multiply = bnMultiply;\n  BigInteger.prototype.divide = bnDivide;\n  BigInteger.prototype.remainder = bnRemainder;\n  BigInteger.prototype.divideAndRemainder = bnDivideAndRemainder;\n  BigInteger.prototype.modPow = bnModPow;\n  BigInteger.prototype.modInverse = bnModInverse;\n  BigInteger.prototype.pow = bnPow;\n  BigInteger.prototype.gcd = bnGCD;\n  BigInteger.prototype.isProbablePrime = bnIsProbablePrime; // JSBN-specific extension\n\n  BigInteger.prototype.square = bnSquare; // Expose the Barrett function\n\n  BigInteger.prototype.Barrett = Barrett; // BigInteger interfaces not implemented in jsbn:\n  // BigInteger(int signum, byte[] magnitude)\n  // double doubleValue()\n  // float floatValue()\n  // int hashCode()\n  // long longValue()\n  // static BigInteger valueOf(long val)\n  // Random number generator - requires a PRNG backend, e.g. prng4.js\n  // For best results, put code like\n  // <body onClick='rng_seed_time();' onKeyPress='rng_seed_time();'>\n  // in your main HTML document.\n\n  var rng_state;\n  var rng_pool;\n  var rng_pptr; // Mix in a 32-bit integer into the pool\n\n  function rng_seed_int(x) {\n    rng_pool[rng_pptr++] ^= x & 255;\n    rng_pool[rng_pptr++] ^= x >> 8 & 255;\n    rng_pool[rng_pptr++] ^= x >> 16 & 255;\n    rng_pool[rng_pptr++] ^= x >> 24 & 255;\n    if (rng_pptr >= rng_psize) rng_pptr -= rng_psize;\n  } // Mix in the current time (w/milliseconds) into the pool\n\n\n  function rng_seed_time() {\n    rng_seed_int(new Date().getTime());\n  } // Initialize the pool with junk if needed.\n\n\n  if (rng_pool == null) {\n    rng_pool = new Array();\n    rng_pptr = 0;\n    var t;\n\n    if (typeof window !== \"undefined\" && window.crypto) {\n      if (window.crypto.getRandomValues) {\n        // Use webcrypto if available\n        var ua = new Uint8Array(32);\n        window.crypto.getRandomValues(ua);\n\n        for (t = 0; t < 32; ++t) {\n          rng_pool[rng_pptr++] = ua[t];\n        }\n      } else if (navigator.appName == \"Netscape\" && navigator.appVersion < \"5\") {\n        // Extract entropy (256 bits) from NS4 RNG if available\n        var z = window.crypto.random(32);\n\n        for (t = 0; t < z.length; ++t) {\n          rng_pool[rng_pptr++] = z.charCodeAt(t) & 255;\n        }\n      }\n    }\n\n    while (rng_pptr < rng_psize) {\n      // extract some randomness from Math.random()\n      t = Math.floor(65536 * Math.random());\n      rng_pool[rng_pptr++] = t >>> 8;\n      rng_pool[rng_pptr++] = t & 255;\n    }\n\n    rng_pptr = 0;\n    rng_seed_time(); //rng_seed_int(window.screenX);\n    //rng_seed_int(window.screenY);\n  }\n\n  function rng_get_byte() {\n    if (rng_state == null) {\n      rng_seed_time();\n      rng_state = prng_newstate();\n      rng_state.init(rng_pool);\n\n      for (rng_pptr = 0; rng_pptr < rng_pool.length; ++rng_pptr) {\n        rng_pool[rng_pptr] = 0;\n      }\n\n      rng_pptr = 0; //rng_pool = null;\n    } // TODO: allow reseeding after first request\n\n\n    return rng_state.next();\n  }\n\n  function rng_get_bytes(ba) {\n    var i;\n\n    for (i = 0; i < ba.length; ++i) {\n      ba[i] = rng_get_byte();\n    }\n  }\n\n  function SecureRandom() {}\n\n  SecureRandom.prototype.nextBytes = rng_get_bytes; // prng4.js - uses Arcfour as a PRNG\n\n  function Arcfour() {\n    this.i = 0;\n    this.j = 0;\n    this.S = new Array();\n  } // Initialize arcfour context from key, an array of ints, each from [0..255]\n\n\n  function ARC4init(key) {\n    var i, j, t;\n\n    for (i = 0; i < 256; ++i) {\n      this.S[i] = i;\n    }\n\n    j = 0;\n\n    for (i = 0; i < 256; ++i) {\n      j = j + this.S[i] + key[i % key.length] & 255;\n      t = this.S[i];\n      this.S[i] = this.S[j];\n      this.S[j] = t;\n    }\n\n    this.i = 0;\n    this.j = 0;\n  }\n\n  function ARC4next() {\n    var t;\n    this.i = this.i + 1 & 255;\n    this.j = this.j + this.S[this.i] & 255;\n    t = this.S[this.i];\n    this.S[this.i] = this.S[this.j];\n    this.S[this.j] = t;\n    return this.S[t + this.S[this.i] & 255];\n  }\n\n  Arcfour.prototype.init = ARC4init;\n  Arcfour.prototype.next = ARC4next; // Plug in your RNG constructor here\n\n  function prng_newstate() {\n    return new Arcfour();\n  } // Pool size must be a multiple of 4 and greater than 32.\n  // An array of bytes the size of the pool will be passed to init()\n\n\n  var rng_psize = 256;\n  BigInteger.SecureRandom = SecureRandom;\n  BigInteger.BigInteger = BigInteger;\n\n  if (typeof exports !== 'undefined') {\n    exports = module.exports = BigInteger;\n  } else {\n    this.BigInteger = BigInteger;\n    this.SecureRandom = SecureRandom;\n  }\n}).call(this);","map":{"version":3,"names":["dbits","canary","j_lm","BigInteger","a","b","c","fromNumber","fromString","nbi","am1","i","x","w","j","n","v","Math","floor","am2","xl","xh","l","h","m","am3","inBrowser","navigator","appName","prototype","am","DB","DM","DV","BI_FP","FV","pow","F1","F2","BI_RM","BI_RC","Array","rr","vv","charCodeAt","int2char","charAt","intAt","s","bnpCopyTo","r","t","bnpFromInt","nbv","fromInt","bnpFromString","k","fromRadix","length","mi","sh","clamp","ZERO","subTo","bnpClamp","bnToString","negate","toString","toRadix","km","d","p","bnNegate","bnAbs","bnCompareTo","nbits","bnBitLength","bnpDLShiftTo","bnpDRShiftTo","max","bnpLShiftTo","bs","cbs","bm","ds","bnpRShiftTo","bnpSubTo","min","bnpMultiplyTo","abs","y","bnpSquareTo","bnpDivRemTo","q","pm","pt","copyTo","ts","ms","nsh","lShiftTo","ys","y0","yt","d1","d2","e","dlShiftTo","compareTo","ONE","qd","drShiftTo","rShiftTo","bnMod","divRemTo","Classic","cConvert","mod","cRevert","cReduce","cMulTo","multiplyTo","reduce","cSqrTo","squareTo","convert","revert","mulTo","sqrTo","bnpInvDigit","Montgomery","mp","invDigit","mpl","mph","um","mt2","montConvert","montRevert","montReduce","u0","montSqrTo","montMulTo","bnpIsEven","bnpExp","z","r2","g","bnModPowInt","isEven","exp","bitLength","modPowInt","bnClone","bnIntValue","bnByteValue","bnShortValue","bnpChunkSize","LN2","log","bnSigNum","bnpToRadix","signum","cs","chunkSize","intValue","substr","bnpFromRadix","dMultiply","dAddOffset","bnpFromNumber","testBit","bitwiseTo","shiftLeft","op_or","isProbablePrime","nextBytes","bnToByteArray","bnEquals","bnMin","bnMax","bnpBitwiseTo","op","f","op_and","bnAnd","bnOr","op_xor","bnXor","op_andnot","bnAndNot","bnNot","bnShiftLeft","bnShiftRight","lbit","bnGetLowestSetBit","cbit","bnBitCount","bnTestBit","bnpChangeBit","bnSetBit","changeBit","bnClearBit","bnFlipBit","bnpAddTo","bnAdd","addTo","bnSubtract","bnMultiply","bnSquare","bnDivide","bnRemainder","bnDivideAndRemainder","bnpDMultiply","bnpDAddOffset","NullExp","nNop","nMulTo","nSqrTo","bnPow","bnpMultiplyLowerTo","bnpMultiplyUpperTo","Barrett","q3","mu","divide","barrettConvert","barrettRevert","barrettReduce","multiplyUpperTo","multiplyLowerTo","barrettSqrTo","barrettMulTo","bnModPow","k1","g2","is1","bnGCD","clone","getLowestSetBit","bnpModInt","bnModInverse","ac","u","subtract","add","lowprimes","lplim","bnIsProbablePrime","modInt","millerRabin","bnpMillerRabin","n1","shiftRight","random","modPow","byteValue","shortValue","toByteArray","equals","and","or","xor","andNot","not","bitCount","setBit","clearBit","flipBit","multiply","remainder","divideAndRemainder","modInverse","gcd","square","rng_state","rng_pool","rng_pptr","rng_seed_int","rng_psize","rng_seed_time","Date","getTime","window","crypto","getRandomValues","ua","Uint8Array","appVersion","rng_get_byte","prng_newstate","init","next","rng_get_bytes","ba","SecureRandom","Arcfour","S","ARC4init","key","ARC4next","exports","module","call"],"sources":["/Users/mikey/Desktop/yc-blog/node_modules/jsbn/index.js"],"sourcesContent":["(function(){\n\n    // Copyright (c) 2005  Tom Wu\n    // All Rights Reserved.\n    // See \"LICENSE\" for details.\n\n    // Basic JavaScript BN library - subset useful for RSA encryption.\n\n    // Bits per digit\n    var dbits;\n\n    // JavaScript engine analysis\n    var canary = 0xdeadbeefcafe;\n    var j_lm = ((canary&0xffffff)==0xefcafe);\n\n    // (public) Constructor\n    function BigInteger(a,b,c) {\n      if(a != null)\n        if(\"number\" == typeof a) this.fromNumber(a,b,c);\n        else if(b == null && \"string\" != typeof a) this.fromString(a,256);\n        else this.fromString(a,b);\n    }\n\n    // return new, unset BigInteger\n    function nbi() { return new BigInteger(null); }\n\n    // am: Compute w_j += (x*this_i), propagate carries,\n    // c is initial carry, returns final carry.\n    // c < 3*dvalue, x < 2*dvalue, this_i < dvalue\n    // We need to select the fastest one that works in this environment.\n\n    // am1: use a single mult and divide to get the high bits,\n    // max digit bits should be 26 because\n    // max internal value = 2*dvalue^2-2*dvalue (< 2^53)\n    function am1(i,x,w,j,c,n) {\n      while(--n >= 0) {\n        var v = x*this[i++]+w[j]+c;\n        c = Math.floor(v/0x4000000);\n        w[j++] = v&0x3ffffff;\n      }\n      return c;\n    }\n    // am2 avoids a big mult-and-extract completely.\n    // Max digit bits should be <= 30 because we do bitwise ops\n    // on values up to 2*hdvalue^2-hdvalue-1 (< 2^31)\n    function am2(i,x,w,j,c,n) {\n      var xl = x&0x7fff, xh = x>>15;\n      while(--n >= 0) {\n        var l = this[i]&0x7fff;\n        var h = this[i++]>>15;\n        var m = xh*l+h*xl;\n        l = xl*l+((m&0x7fff)<<15)+w[j]+(c&0x3fffffff);\n        c = (l>>>30)+(m>>>15)+xh*h+(c>>>30);\n        w[j++] = l&0x3fffffff;\n      }\n      return c;\n    }\n    // Alternately, set max digit bits to 28 since some\n    // browsers slow down when dealing with 32-bit numbers.\n    function am3(i,x,w,j,c,n) {\n      var xl = x&0x3fff, xh = x>>14;\n      while(--n >= 0) {\n        var l = this[i]&0x3fff;\n        var h = this[i++]>>14;\n        var m = xh*l+h*xl;\n        l = xl*l+((m&0x3fff)<<14)+w[j]+c;\n        c = (l>>28)+(m>>14)+xh*h;\n        w[j++] = l&0xfffffff;\n      }\n      return c;\n    }\n    var inBrowser = typeof navigator !== \"undefined\";\n    if(inBrowser && j_lm && (navigator.appName == \"Microsoft Internet Explorer\")) {\n      BigInteger.prototype.am = am2;\n      dbits = 30;\n    }\n    else if(inBrowser && j_lm && (navigator.appName != \"Netscape\")) {\n      BigInteger.prototype.am = am1;\n      dbits = 26;\n    }\n    else { // Mozilla/Netscape seems to prefer am3\n      BigInteger.prototype.am = am3;\n      dbits = 28;\n    }\n\n    BigInteger.prototype.DB = dbits;\n    BigInteger.prototype.DM = ((1<<dbits)-1);\n    BigInteger.prototype.DV = (1<<dbits);\n\n    var BI_FP = 52;\n    BigInteger.prototype.FV = Math.pow(2,BI_FP);\n    BigInteger.prototype.F1 = BI_FP-dbits;\n    BigInteger.prototype.F2 = 2*dbits-BI_FP;\n\n    // Digit conversions\n    var BI_RM = \"0123456789abcdefghijklmnopqrstuvwxyz\";\n    var BI_RC = new Array();\n    var rr,vv;\n    rr = \"0\".charCodeAt(0);\n    for(vv = 0; vv <= 9; ++vv) BI_RC[rr++] = vv;\n    rr = \"a\".charCodeAt(0);\n    for(vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;\n    rr = \"A\".charCodeAt(0);\n    for(vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;\n\n    function int2char(n) { return BI_RM.charAt(n); }\n    function intAt(s,i) {\n      var c = BI_RC[s.charCodeAt(i)];\n      return (c==null)?-1:c;\n    }\n\n    // (protected) copy this to r\n    function bnpCopyTo(r) {\n      for(var i = this.t-1; i >= 0; --i) r[i] = this[i];\n      r.t = this.t;\n      r.s = this.s;\n    }\n\n    // (protected) set from integer value x, -DV <= x < DV\n    function bnpFromInt(x) {\n      this.t = 1;\n      this.s = (x<0)?-1:0;\n      if(x > 0) this[0] = x;\n      else if(x < -1) this[0] = x+this.DV;\n      else this.t = 0;\n    }\n\n    // return bigint initialized to value\n    function nbv(i) { var r = nbi(); r.fromInt(i); return r; }\n\n    // (protected) set from string and radix\n    function bnpFromString(s,b) {\n      var k;\n      if(b == 16) k = 4;\n      else if(b == 8) k = 3;\n      else if(b == 256) k = 8; // byte array\n      else if(b == 2) k = 1;\n      else if(b == 32) k = 5;\n      else if(b == 4) k = 2;\n      else { this.fromRadix(s,b); return; }\n      this.t = 0;\n      this.s = 0;\n      var i = s.length, mi = false, sh = 0;\n      while(--i >= 0) {\n        var x = (k==8)?s[i]&0xff:intAt(s,i);\n        if(x < 0) {\n          if(s.charAt(i) == \"-\") mi = true;\n          continue;\n        }\n        mi = false;\n        if(sh == 0)\n          this[this.t++] = x;\n        else if(sh+k > this.DB) {\n          this[this.t-1] |= (x&((1<<(this.DB-sh))-1))<<sh;\n          this[this.t++] = (x>>(this.DB-sh));\n        }\n        else\n          this[this.t-1] |= x<<sh;\n        sh += k;\n        if(sh >= this.DB) sh -= this.DB;\n      }\n      if(k == 8 && (s[0]&0x80) != 0) {\n        this.s = -1;\n        if(sh > 0) this[this.t-1] |= ((1<<(this.DB-sh))-1)<<sh;\n      }\n      this.clamp();\n      if(mi) BigInteger.ZERO.subTo(this,this);\n    }\n\n    // (protected) clamp off excess high words\n    function bnpClamp() {\n      var c = this.s&this.DM;\n      while(this.t > 0 && this[this.t-1] == c) --this.t;\n    }\n\n    // (public) return string representation in given radix\n    function bnToString(b) {\n      if(this.s < 0) return \"-\"+this.negate().toString(b);\n      var k;\n      if(b == 16) k = 4;\n      else if(b == 8) k = 3;\n      else if(b == 2) k = 1;\n      else if(b == 32) k = 5;\n      else if(b == 4) k = 2;\n      else return this.toRadix(b);\n      var km = (1<<k)-1, d, m = false, r = \"\", i = this.t;\n      var p = this.DB-(i*this.DB)%k;\n      if(i-- > 0) {\n        if(p < this.DB && (d = this[i]>>p) > 0) { m = true; r = int2char(d); }\n        while(i >= 0) {\n          if(p < k) {\n            d = (this[i]&((1<<p)-1))<<(k-p);\n            d |= this[--i]>>(p+=this.DB-k);\n          }\n          else {\n            d = (this[i]>>(p-=k))&km;\n            if(p <= 0) { p += this.DB; --i; }\n          }\n          if(d > 0) m = true;\n          if(m) r += int2char(d);\n        }\n      }\n      return m?r:\"0\";\n    }\n\n    // (public) -this\n    function bnNegate() { var r = nbi(); BigInteger.ZERO.subTo(this,r); return r; }\n\n    // (public) |this|\n    function bnAbs() { return (this.s<0)?this.negate():this; }\n\n    // (public) return + if this > a, - if this < a, 0 if equal\n    function bnCompareTo(a) {\n      var r = this.s-a.s;\n      if(r != 0) return r;\n      var i = this.t;\n      r = i-a.t;\n      if(r != 0) return (this.s<0)?-r:r;\n      while(--i >= 0) if((r=this[i]-a[i]) != 0) return r;\n      return 0;\n    }\n\n    // returns bit length of the integer x\n    function nbits(x) {\n      var r = 1, t;\n      if((t=x>>>16) != 0) { x = t; r += 16; }\n      if((t=x>>8) != 0) { x = t; r += 8; }\n      if((t=x>>4) != 0) { x = t; r += 4; }\n      if((t=x>>2) != 0) { x = t; r += 2; }\n      if((t=x>>1) != 0) { x = t; r += 1; }\n      return r;\n    }\n\n    // (public) return the number of bits in \"this\"\n    function bnBitLength() {\n      if(this.t <= 0) return 0;\n      return this.DB*(this.t-1)+nbits(this[this.t-1]^(this.s&this.DM));\n    }\n\n    // (protected) r = this << n*DB\n    function bnpDLShiftTo(n,r) {\n      var i;\n      for(i = this.t-1; i >= 0; --i) r[i+n] = this[i];\n      for(i = n-1; i >= 0; --i) r[i] = 0;\n      r.t = this.t+n;\n      r.s = this.s;\n    }\n\n    // (protected) r = this >> n*DB\n    function bnpDRShiftTo(n,r) {\n      for(var i = n; i < this.t; ++i) r[i-n] = this[i];\n      r.t = Math.max(this.t-n,0);\n      r.s = this.s;\n    }\n\n    // (protected) r = this << n\n    function bnpLShiftTo(n,r) {\n      var bs = n%this.DB;\n      var cbs = this.DB-bs;\n      var bm = (1<<cbs)-1;\n      var ds = Math.floor(n/this.DB), c = (this.s<<bs)&this.DM, i;\n      for(i = this.t-1; i >= 0; --i) {\n        r[i+ds+1] = (this[i]>>cbs)|c;\n        c = (this[i]&bm)<<bs;\n      }\n      for(i = ds-1; i >= 0; --i) r[i] = 0;\n      r[ds] = c;\n      r.t = this.t+ds+1;\n      r.s = this.s;\n      r.clamp();\n    }\n\n    // (protected) r = this >> n\n    function bnpRShiftTo(n,r) {\n      r.s = this.s;\n      var ds = Math.floor(n/this.DB);\n      if(ds >= this.t) { r.t = 0; return; }\n      var bs = n%this.DB;\n      var cbs = this.DB-bs;\n      var bm = (1<<bs)-1;\n      r[0] = this[ds]>>bs;\n      for(var i = ds+1; i < this.t; ++i) {\n        r[i-ds-1] |= (this[i]&bm)<<cbs;\n        r[i-ds] = this[i]>>bs;\n      }\n      if(bs > 0) r[this.t-ds-1] |= (this.s&bm)<<cbs;\n      r.t = this.t-ds;\n      r.clamp();\n    }\n\n    // (protected) r = this - a\n    function bnpSubTo(a,r) {\n      var i = 0, c = 0, m = Math.min(a.t,this.t);\n      while(i < m) {\n        c += this[i]-a[i];\n        r[i++] = c&this.DM;\n        c >>= this.DB;\n      }\n      if(a.t < this.t) {\n        c -= a.s;\n        while(i < this.t) {\n          c += this[i];\n          r[i++] = c&this.DM;\n          c >>= this.DB;\n        }\n        c += this.s;\n      }\n      else {\n        c += this.s;\n        while(i < a.t) {\n          c -= a[i];\n          r[i++] = c&this.DM;\n          c >>= this.DB;\n        }\n        c -= a.s;\n      }\n      r.s = (c<0)?-1:0;\n      if(c < -1) r[i++] = this.DV+c;\n      else if(c > 0) r[i++] = c;\n      r.t = i;\n      r.clamp();\n    }\n\n    // (protected) r = this * a, r != this,a (HAC 14.12)\n    // \"this\" should be the larger one if appropriate.\n    function bnpMultiplyTo(a,r) {\n      var x = this.abs(), y = a.abs();\n      var i = x.t;\n      r.t = i+y.t;\n      while(--i >= 0) r[i] = 0;\n      for(i = 0; i < y.t; ++i) r[i+x.t] = x.am(0,y[i],r,i,0,x.t);\n      r.s = 0;\n      r.clamp();\n      if(this.s != a.s) BigInteger.ZERO.subTo(r,r);\n    }\n\n    // (protected) r = this^2, r != this (HAC 14.16)\n    function bnpSquareTo(r) {\n      var x = this.abs();\n      var i = r.t = 2*x.t;\n      while(--i >= 0) r[i] = 0;\n      for(i = 0; i < x.t-1; ++i) {\n        var c = x.am(i,x[i],r,2*i,0,1);\n        if((r[i+x.t]+=x.am(i+1,2*x[i],r,2*i+1,c,x.t-i-1)) >= x.DV) {\n          r[i+x.t] -= x.DV;\n          r[i+x.t+1] = 1;\n        }\n      }\n      if(r.t > 0) r[r.t-1] += x.am(i,x[i],r,2*i,0,1);\n      r.s = 0;\n      r.clamp();\n    }\n\n    // (protected) divide this by m, quotient and remainder to q, r (HAC 14.20)\n    // r != q, this != m.  q or r may be null.\n    function bnpDivRemTo(m,q,r) {\n      var pm = m.abs();\n      if(pm.t <= 0) return;\n      var pt = this.abs();\n      if(pt.t < pm.t) {\n        if(q != null) q.fromInt(0);\n        if(r != null) this.copyTo(r);\n        return;\n      }\n      if(r == null) r = nbi();\n      var y = nbi(), ts = this.s, ms = m.s;\n      var nsh = this.DB-nbits(pm[pm.t-1]);   // normalize modulus\n      if(nsh > 0) { pm.lShiftTo(nsh,y); pt.lShiftTo(nsh,r); }\n      else { pm.copyTo(y); pt.copyTo(r); }\n      var ys = y.t;\n      var y0 = y[ys-1];\n      if(y0 == 0) return;\n      var yt = y0*(1<<this.F1)+((ys>1)?y[ys-2]>>this.F2:0);\n      var d1 = this.FV/yt, d2 = (1<<this.F1)/yt, e = 1<<this.F2;\n      var i = r.t, j = i-ys, t = (q==null)?nbi():q;\n      y.dlShiftTo(j,t);\n      if(r.compareTo(t) >= 0) {\n        r[r.t++] = 1;\n        r.subTo(t,r);\n      }\n      BigInteger.ONE.dlShiftTo(ys,t);\n      t.subTo(y,y);  // \"negative\" y so we can replace sub with am later\n      while(y.t < ys) y[y.t++] = 0;\n      while(--j >= 0) {\n        // Estimate quotient digit\n        var qd = (r[--i]==y0)?this.DM:Math.floor(r[i]*d1+(r[i-1]+e)*d2);\n        if((r[i]+=y.am(0,qd,r,j,0,ys)) < qd) {   // Try it out\n          y.dlShiftTo(j,t);\n          r.subTo(t,r);\n          while(r[i] < --qd) r.subTo(t,r);\n        }\n      }\n      if(q != null) {\n        r.drShiftTo(ys,q);\n        if(ts != ms) BigInteger.ZERO.subTo(q,q);\n      }\n      r.t = ys;\n      r.clamp();\n      if(nsh > 0) r.rShiftTo(nsh,r); // Denormalize remainder\n      if(ts < 0) BigInteger.ZERO.subTo(r,r);\n    }\n\n    // (public) this mod a\n    function bnMod(a) {\n      var r = nbi();\n      this.abs().divRemTo(a,null,r);\n      if(this.s < 0 && r.compareTo(BigInteger.ZERO) > 0) a.subTo(r,r);\n      return r;\n    }\n\n    // Modular reduction using \"classic\" algorithm\n    function Classic(m) { this.m = m; }\n    function cConvert(x) {\n      if(x.s < 0 || x.compareTo(this.m) >= 0) return x.mod(this.m);\n      else return x;\n    }\n    function cRevert(x) { return x; }\n    function cReduce(x) { x.divRemTo(this.m,null,x); }\n    function cMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }\n    function cSqrTo(x,r) { x.squareTo(r); this.reduce(r); }\n\n    Classic.prototype.convert = cConvert;\n    Classic.prototype.revert = cRevert;\n    Classic.prototype.reduce = cReduce;\n    Classic.prototype.mulTo = cMulTo;\n    Classic.prototype.sqrTo = cSqrTo;\n\n    // (protected) return \"-1/this % 2^DB\"; useful for Mont. reduction\n    // justification:\n    //         xy == 1 (mod m)\n    //         xy =  1+km\n    //   xy(2-xy) = (1+km)(1-km)\n    // x[y(2-xy)] = 1-k^2m^2\n    // x[y(2-xy)] == 1 (mod m^2)\n    // if y is 1/x mod m, then y(2-xy) is 1/x mod m^2\n    // should reduce x and y(2-xy) by m^2 at each step to keep size bounded.\n    // JS multiply \"overflows\" differently from C/C++, so care is needed here.\n    function bnpInvDigit() {\n      if(this.t < 1) return 0;\n      var x = this[0];\n      if((x&1) == 0) return 0;\n      var y = x&3;       // y == 1/x mod 2^2\n      y = (y*(2-(x&0xf)*y))&0xf; // y == 1/x mod 2^4\n      y = (y*(2-(x&0xff)*y))&0xff;   // y == 1/x mod 2^8\n      y = (y*(2-(((x&0xffff)*y)&0xffff)))&0xffff;    // y == 1/x mod 2^16\n      // last step - calculate inverse mod DV directly;\n      // assumes 16 < DB <= 32 and assumes ability to handle 48-bit ints\n      y = (y*(2-x*y%this.DV))%this.DV;       // y == 1/x mod 2^dbits\n      // we really want the negative inverse, and -DV < y < DV\n      return (y>0)?this.DV-y:-y;\n    }\n\n    // Montgomery reduction\n    function Montgomery(m) {\n      this.m = m;\n      this.mp = m.invDigit();\n      this.mpl = this.mp&0x7fff;\n      this.mph = this.mp>>15;\n      this.um = (1<<(m.DB-15))-1;\n      this.mt2 = 2*m.t;\n    }\n\n    // xR mod m\n    function montConvert(x) {\n      var r = nbi();\n      x.abs().dlShiftTo(this.m.t,r);\n      r.divRemTo(this.m,null,r);\n      if(x.s < 0 && r.compareTo(BigInteger.ZERO) > 0) this.m.subTo(r,r);\n      return r;\n    }\n\n    // x/R mod m\n    function montRevert(x) {\n      var r = nbi();\n      x.copyTo(r);\n      this.reduce(r);\n      return r;\n    }\n\n    // x = x/R mod m (HAC 14.32)\n    function montReduce(x) {\n      while(x.t <= this.mt2) // pad x so am has enough room later\n        x[x.t++] = 0;\n      for(var i = 0; i < this.m.t; ++i) {\n        // faster way of calculating u0 = x[i]*mp mod DV\n        var j = x[i]&0x7fff;\n        var u0 = (j*this.mpl+(((j*this.mph+(x[i]>>15)*this.mpl)&this.um)<<15))&x.DM;\n        // use am to combine the multiply-shift-add into one call\n        j = i+this.m.t;\n        x[j] += this.m.am(0,u0,x,i,0,this.m.t);\n        // propagate carry\n        while(x[j] >= x.DV) { x[j] -= x.DV; x[++j]++; }\n      }\n      x.clamp();\n      x.drShiftTo(this.m.t,x);\n      if(x.compareTo(this.m) >= 0) x.subTo(this.m,x);\n    }\n\n    // r = \"x^2/R mod m\"; x != r\n    function montSqrTo(x,r) { x.squareTo(r); this.reduce(r); }\n\n    // r = \"xy/R mod m\"; x,y != r\n    function montMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }\n\n    Montgomery.prototype.convert = montConvert;\n    Montgomery.prototype.revert = montRevert;\n    Montgomery.prototype.reduce = montReduce;\n    Montgomery.prototype.mulTo = montMulTo;\n    Montgomery.prototype.sqrTo = montSqrTo;\n\n    // (protected) true iff this is even\n    function bnpIsEven() { return ((this.t>0)?(this[0]&1):this.s) == 0; }\n\n    // (protected) this^e, e < 2^32, doing sqr and mul with \"r\" (HAC 14.79)\n    function bnpExp(e,z) {\n      if(e > 0xffffffff || e < 1) return BigInteger.ONE;\n      var r = nbi(), r2 = nbi(), g = z.convert(this), i = nbits(e)-1;\n      g.copyTo(r);\n      while(--i >= 0) {\n        z.sqrTo(r,r2);\n        if((e&(1<<i)) > 0) z.mulTo(r2,g,r);\n        else { var t = r; r = r2; r2 = t; }\n      }\n      return z.revert(r);\n    }\n\n    // (public) this^e % m, 0 <= e < 2^32\n    function bnModPowInt(e,m) {\n      var z;\n      if(e < 256 || m.isEven()) z = new Classic(m); else z = new Montgomery(m);\n      return this.exp(e,z);\n    }\n\n    // protected\n    BigInteger.prototype.copyTo = bnpCopyTo;\n    BigInteger.prototype.fromInt = bnpFromInt;\n    BigInteger.prototype.fromString = bnpFromString;\n    BigInteger.prototype.clamp = bnpClamp;\n    BigInteger.prototype.dlShiftTo = bnpDLShiftTo;\n    BigInteger.prototype.drShiftTo = bnpDRShiftTo;\n    BigInteger.prototype.lShiftTo = bnpLShiftTo;\n    BigInteger.prototype.rShiftTo = bnpRShiftTo;\n    BigInteger.prototype.subTo = bnpSubTo;\n    BigInteger.prototype.multiplyTo = bnpMultiplyTo;\n    BigInteger.prototype.squareTo = bnpSquareTo;\n    BigInteger.prototype.divRemTo = bnpDivRemTo;\n    BigInteger.prototype.invDigit = bnpInvDigit;\n    BigInteger.prototype.isEven = bnpIsEven;\n    BigInteger.prototype.exp = bnpExp;\n\n    // public\n    BigInteger.prototype.toString = bnToString;\n    BigInteger.prototype.negate = bnNegate;\n    BigInteger.prototype.abs = bnAbs;\n    BigInteger.prototype.compareTo = bnCompareTo;\n    BigInteger.prototype.bitLength = bnBitLength;\n    BigInteger.prototype.mod = bnMod;\n    BigInteger.prototype.modPowInt = bnModPowInt;\n\n    // \"constants\"\n    BigInteger.ZERO = nbv(0);\n    BigInteger.ONE = nbv(1);\n\n    // Copyright (c) 2005-2009  Tom Wu\n    // All Rights Reserved.\n    // See \"LICENSE\" for details.\n\n    // Extended JavaScript BN functions, required for RSA private ops.\n\n    // Version 1.1: new BigInteger(\"0\", 10) returns \"proper\" zero\n    // Version 1.2: square() API, isProbablePrime fix\n\n    // (public)\n    function bnClone() { var r = nbi(); this.copyTo(r); return r; }\n\n    // (public) return value as integer\n    function bnIntValue() {\n      if(this.s < 0) {\n        if(this.t == 1) return this[0]-this.DV;\n        else if(this.t == 0) return -1;\n      }\n      else if(this.t == 1) return this[0];\n      else if(this.t == 0) return 0;\n      // assumes 16 < DB < 32\n      return ((this[1]&((1<<(32-this.DB))-1))<<this.DB)|this[0];\n    }\n\n    // (public) return value as byte\n    function bnByteValue() { return (this.t==0)?this.s:(this[0]<<24)>>24; }\n\n    // (public) return value as short (assumes DB>=16)\n    function bnShortValue() { return (this.t==0)?this.s:(this[0]<<16)>>16; }\n\n    // (protected) return x s.t. r^x < DV\n    function bnpChunkSize(r) { return Math.floor(Math.LN2*this.DB/Math.log(r)); }\n\n    // (public) 0 if this == 0, 1 if this > 0\n    function bnSigNum() {\n      if(this.s < 0) return -1;\n      else if(this.t <= 0 || (this.t == 1 && this[0] <= 0)) return 0;\n      else return 1;\n    }\n\n    // (protected) convert to radix string\n    function bnpToRadix(b) {\n      if(b == null) b = 10;\n      if(this.signum() == 0 || b < 2 || b > 36) return \"0\";\n      var cs = this.chunkSize(b);\n      var a = Math.pow(b,cs);\n      var d = nbv(a), y = nbi(), z = nbi(), r = \"\";\n      this.divRemTo(d,y,z);\n      while(y.signum() > 0) {\n        r = (a+z.intValue()).toString(b).substr(1) + r;\n        y.divRemTo(d,y,z);\n      }\n      return z.intValue().toString(b) + r;\n    }\n\n    // (protected) convert from radix string\n    function bnpFromRadix(s,b) {\n      this.fromInt(0);\n      if(b == null) b = 10;\n      var cs = this.chunkSize(b);\n      var d = Math.pow(b,cs), mi = false, j = 0, w = 0;\n      for(var i = 0; i < s.length; ++i) {\n        var x = intAt(s,i);\n        if(x < 0) {\n          if(s.charAt(i) == \"-\" && this.signum() == 0) mi = true;\n          continue;\n        }\n        w = b*w+x;\n        if(++j >= cs) {\n          this.dMultiply(d);\n          this.dAddOffset(w,0);\n          j = 0;\n          w = 0;\n        }\n      }\n      if(j > 0) {\n        this.dMultiply(Math.pow(b,j));\n        this.dAddOffset(w,0);\n      }\n      if(mi) BigInteger.ZERO.subTo(this,this);\n    }\n\n    // (protected) alternate constructor\n    function bnpFromNumber(a,b,c) {\n      if(\"number\" == typeof b) {\n        // new BigInteger(int,int,RNG)\n        if(a < 2) this.fromInt(1);\n        else {\n          this.fromNumber(a,c);\n          if(!this.testBit(a-1))\t// force MSB set\n            this.bitwiseTo(BigInteger.ONE.shiftLeft(a-1),op_or,this);\n          if(this.isEven()) this.dAddOffset(1,0); // force odd\n          while(!this.isProbablePrime(b)) {\n            this.dAddOffset(2,0);\n            if(this.bitLength() > a) this.subTo(BigInteger.ONE.shiftLeft(a-1),this);\n          }\n        }\n      }\n      else {\n        // new BigInteger(int,RNG)\n        var x = new Array(), t = a&7;\n        x.length = (a>>3)+1;\n        b.nextBytes(x);\n        if(t > 0) x[0] &= ((1<<t)-1); else x[0] = 0;\n        this.fromString(x,256);\n      }\n    }\n\n    // (public) convert to bigendian byte array\n    function bnToByteArray() {\n      var i = this.t, r = new Array();\n      r[0] = this.s;\n      var p = this.DB-(i*this.DB)%8, d, k = 0;\n      if(i-- > 0) {\n        if(p < this.DB && (d = this[i]>>p) != (this.s&this.DM)>>p)\n          r[k++] = d|(this.s<<(this.DB-p));\n        while(i >= 0) {\n          if(p < 8) {\n            d = (this[i]&((1<<p)-1))<<(8-p);\n            d |= this[--i]>>(p+=this.DB-8);\n          }\n          else {\n            d = (this[i]>>(p-=8))&0xff;\n            if(p <= 0) { p += this.DB; --i; }\n          }\n          if((d&0x80) != 0) d |= -256;\n          if(k == 0 && (this.s&0x80) != (d&0x80)) ++k;\n          if(k > 0 || d != this.s) r[k++] = d;\n        }\n      }\n      return r;\n    }\n\n    function bnEquals(a) { return(this.compareTo(a)==0); }\n    function bnMin(a) { return(this.compareTo(a)<0)?this:a; }\n    function bnMax(a) { return(this.compareTo(a)>0)?this:a; }\n\n    // (protected) r = this op a (bitwise)\n    function bnpBitwiseTo(a,op,r) {\n      var i, f, m = Math.min(a.t,this.t);\n      for(i = 0; i < m; ++i) r[i] = op(this[i],a[i]);\n      if(a.t < this.t) {\n        f = a.s&this.DM;\n        for(i = m; i < this.t; ++i) r[i] = op(this[i],f);\n        r.t = this.t;\n      }\n      else {\n        f = this.s&this.DM;\n        for(i = m; i < a.t; ++i) r[i] = op(f,a[i]);\n        r.t = a.t;\n      }\n      r.s = op(this.s,a.s);\n      r.clamp();\n    }\n\n    // (public) this & a\n    function op_and(x,y) { return x&y; }\n    function bnAnd(a) { var r = nbi(); this.bitwiseTo(a,op_and,r); return r; }\n\n    // (public) this | a\n    function op_or(x,y) { return x|y; }\n    function bnOr(a) { var r = nbi(); this.bitwiseTo(a,op_or,r); return r; }\n\n    // (public) this ^ a\n    function op_xor(x,y) { return x^y; }\n    function bnXor(a) { var r = nbi(); this.bitwiseTo(a,op_xor,r); return r; }\n\n    // (public) this & ~a\n    function op_andnot(x,y) { return x&~y; }\n    function bnAndNot(a) { var r = nbi(); this.bitwiseTo(a,op_andnot,r); return r; }\n\n    // (public) ~this\n    function bnNot() {\n      var r = nbi();\n      for(var i = 0; i < this.t; ++i) r[i] = this.DM&~this[i];\n      r.t = this.t;\n      r.s = ~this.s;\n      return r;\n    }\n\n    // (public) this << n\n    function bnShiftLeft(n) {\n      var r = nbi();\n      if(n < 0) this.rShiftTo(-n,r); else this.lShiftTo(n,r);\n      return r;\n    }\n\n    // (public) this >> n\n    function bnShiftRight(n) {\n      var r = nbi();\n      if(n < 0) this.lShiftTo(-n,r); else this.rShiftTo(n,r);\n      return r;\n    }\n\n    // return index of lowest 1-bit in x, x < 2^31\n    function lbit(x) {\n      if(x == 0) return -1;\n      var r = 0;\n      if((x&0xffff) == 0) { x >>= 16; r += 16; }\n      if((x&0xff) == 0) { x >>= 8; r += 8; }\n      if((x&0xf) == 0) { x >>= 4; r += 4; }\n      if((x&3) == 0) { x >>= 2; r += 2; }\n      if((x&1) == 0) ++r;\n      return r;\n    }\n\n    // (public) returns index of lowest 1-bit (or -1 if none)\n    function bnGetLowestSetBit() {\n      for(var i = 0; i < this.t; ++i)\n        if(this[i] != 0) return i*this.DB+lbit(this[i]);\n      if(this.s < 0) return this.t*this.DB;\n      return -1;\n    }\n\n    // return number of 1 bits in x\n    function cbit(x) {\n      var r = 0;\n      while(x != 0) { x &= x-1; ++r; }\n      return r;\n    }\n\n    // (public) return number of set bits\n    function bnBitCount() {\n      var r = 0, x = this.s&this.DM;\n      for(var i = 0; i < this.t; ++i) r += cbit(this[i]^x);\n      return r;\n    }\n\n    // (public) true iff nth bit is set\n    function bnTestBit(n) {\n      var j = Math.floor(n/this.DB);\n      if(j >= this.t) return(this.s!=0);\n      return((this[j]&(1<<(n%this.DB)))!=0);\n    }\n\n    // (protected) this op (1<<n)\n    function bnpChangeBit(n,op) {\n      var r = BigInteger.ONE.shiftLeft(n);\n      this.bitwiseTo(r,op,r);\n      return r;\n    }\n\n    // (public) this | (1<<n)\n    function bnSetBit(n) { return this.changeBit(n,op_or); }\n\n    // (public) this & ~(1<<n)\n    function bnClearBit(n) { return this.changeBit(n,op_andnot); }\n\n    // (public) this ^ (1<<n)\n    function bnFlipBit(n) { return this.changeBit(n,op_xor); }\n\n    // (protected) r = this + a\n    function bnpAddTo(a,r) {\n      var i = 0, c = 0, m = Math.min(a.t,this.t);\n      while(i < m) {\n        c += this[i]+a[i];\n        r[i++] = c&this.DM;\n        c >>= this.DB;\n      }\n      if(a.t < this.t) {\n        c += a.s;\n        while(i < this.t) {\n          c += this[i];\n          r[i++] = c&this.DM;\n          c >>= this.DB;\n        }\n        c += this.s;\n      }\n      else {\n        c += this.s;\n        while(i < a.t) {\n          c += a[i];\n          r[i++] = c&this.DM;\n          c >>= this.DB;\n        }\n        c += a.s;\n      }\n      r.s = (c<0)?-1:0;\n      if(c > 0) r[i++] = c;\n      else if(c < -1) r[i++] = this.DV+c;\n      r.t = i;\n      r.clamp();\n    }\n\n    // (public) this + a\n    function bnAdd(a) { var r = nbi(); this.addTo(a,r); return r; }\n\n    // (public) this - a\n    function bnSubtract(a) { var r = nbi(); this.subTo(a,r); return r; }\n\n    // (public) this * a\n    function bnMultiply(a) { var r = nbi(); this.multiplyTo(a,r); return r; }\n\n    // (public) this^2\n    function bnSquare() { var r = nbi(); this.squareTo(r); return r; }\n\n    // (public) this / a\n    function bnDivide(a) { var r = nbi(); this.divRemTo(a,r,null); return r; }\n\n    // (public) this % a\n    function bnRemainder(a) { var r = nbi(); this.divRemTo(a,null,r); return r; }\n\n    // (public) [this/a,this%a]\n    function bnDivideAndRemainder(a) {\n      var q = nbi(), r = nbi();\n      this.divRemTo(a,q,r);\n      return new Array(q,r);\n    }\n\n    // (protected) this *= n, this >= 0, 1 < n < DV\n    function bnpDMultiply(n) {\n      this[this.t] = this.am(0,n-1,this,0,0,this.t);\n      ++this.t;\n      this.clamp();\n    }\n\n    // (protected) this += n << w words, this >= 0\n    function bnpDAddOffset(n,w) {\n      if(n == 0) return;\n      while(this.t <= w) this[this.t++] = 0;\n      this[w] += n;\n      while(this[w] >= this.DV) {\n        this[w] -= this.DV;\n        if(++w >= this.t) this[this.t++] = 0;\n        ++this[w];\n      }\n    }\n\n    // A \"null\" reducer\n    function NullExp() {}\n    function nNop(x) { return x; }\n    function nMulTo(x,y,r) { x.multiplyTo(y,r); }\n    function nSqrTo(x,r) { x.squareTo(r); }\n\n    NullExp.prototype.convert = nNop;\n    NullExp.prototype.revert = nNop;\n    NullExp.prototype.mulTo = nMulTo;\n    NullExp.prototype.sqrTo = nSqrTo;\n\n    // (public) this^e\n    function bnPow(e) { return this.exp(e,new NullExp()); }\n\n    // (protected) r = lower n words of \"this * a\", a.t <= n\n    // \"this\" should be the larger one if appropriate.\n    function bnpMultiplyLowerTo(a,n,r) {\n      var i = Math.min(this.t+a.t,n);\n      r.s = 0; // assumes a,this >= 0\n      r.t = i;\n      while(i > 0) r[--i] = 0;\n      var j;\n      for(j = r.t-this.t; i < j; ++i) r[i+this.t] = this.am(0,a[i],r,i,0,this.t);\n      for(j = Math.min(a.t,n); i < j; ++i) this.am(0,a[i],r,i,0,n-i);\n      r.clamp();\n    }\n\n    // (protected) r = \"this * a\" without lower n words, n > 0\n    // \"this\" should be the larger one if appropriate.\n    function bnpMultiplyUpperTo(a,n,r) {\n      --n;\n      var i = r.t = this.t+a.t-n;\n      r.s = 0; // assumes a,this >= 0\n      while(--i >= 0) r[i] = 0;\n      for(i = Math.max(n-this.t,0); i < a.t; ++i)\n        r[this.t+i-n] = this.am(n-i,a[i],r,0,0,this.t+i-n);\n      r.clamp();\n      r.drShiftTo(1,r);\n    }\n\n    // Barrett modular reduction\n    function Barrett(m) {\n      // setup Barrett\n      this.r2 = nbi();\n      this.q3 = nbi();\n      BigInteger.ONE.dlShiftTo(2*m.t,this.r2);\n      this.mu = this.r2.divide(m);\n      this.m = m;\n    }\n\n    function barrettConvert(x) {\n      if(x.s < 0 || x.t > 2*this.m.t) return x.mod(this.m);\n      else if(x.compareTo(this.m) < 0) return x;\n      else { var r = nbi(); x.copyTo(r); this.reduce(r); return r; }\n    }\n\n    function barrettRevert(x) { return x; }\n\n    // x = x mod m (HAC 14.42)\n    function barrettReduce(x) {\n      x.drShiftTo(this.m.t-1,this.r2);\n      if(x.t > this.m.t+1) { x.t = this.m.t+1; x.clamp(); }\n      this.mu.multiplyUpperTo(this.r2,this.m.t+1,this.q3);\n      this.m.multiplyLowerTo(this.q3,this.m.t+1,this.r2);\n      while(x.compareTo(this.r2) < 0) x.dAddOffset(1,this.m.t+1);\n      x.subTo(this.r2,x);\n      while(x.compareTo(this.m) >= 0) x.subTo(this.m,x);\n    }\n\n    // r = x^2 mod m; x != r\n    function barrettSqrTo(x,r) { x.squareTo(r); this.reduce(r); }\n\n    // r = x*y mod m; x,y != r\n    function barrettMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }\n\n    Barrett.prototype.convert = barrettConvert;\n    Barrett.prototype.revert = barrettRevert;\n    Barrett.prototype.reduce = barrettReduce;\n    Barrett.prototype.mulTo = barrettMulTo;\n    Barrett.prototype.sqrTo = barrettSqrTo;\n\n    // (public) this^e % m (HAC 14.85)\n    function bnModPow(e,m) {\n      var i = e.bitLength(), k, r = nbv(1), z;\n      if(i <= 0) return r;\n      else if(i < 18) k = 1;\n      else if(i < 48) k = 3;\n      else if(i < 144) k = 4;\n      else if(i < 768) k = 5;\n      else k = 6;\n      if(i < 8)\n        z = new Classic(m);\n      else if(m.isEven())\n        z = new Barrett(m);\n      else\n        z = new Montgomery(m);\n\n      // precomputation\n      var g = new Array(), n = 3, k1 = k-1, km = (1<<k)-1;\n      g[1] = z.convert(this);\n      if(k > 1) {\n        var g2 = nbi();\n        z.sqrTo(g[1],g2);\n        while(n <= km) {\n          g[n] = nbi();\n          z.mulTo(g2,g[n-2],g[n]);\n          n += 2;\n        }\n      }\n\n      var j = e.t-1, w, is1 = true, r2 = nbi(), t;\n      i = nbits(e[j])-1;\n      while(j >= 0) {\n        if(i >= k1) w = (e[j]>>(i-k1))&km;\n        else {\n          w = (e[j]&((1<<(i+1))-1))<<(k1-i);\n          if(j > 0) w |= e[j-1]>>(this.DB+i-k1);\n        }\n\n        n = k;\n        while((w&1) == 0) { w >>= 1; --n; }\n        if((i -= n) < 0) { i += this.DB; --j; }\n        if(is1) {\t// ret == 1, don't bother squaring or multiplying it\n          g[w].copyTo(r);\n          is1 = false;\n        }\n        else {\n          while(n > 1) { z.sqrTo(r,r2); z.sqrTo(r2,r); n -= 2; }\n          if(n > 0) z.sqrTo(r,r2); else { t = r; r = r2; r2 = t; }\n          z.mulTo(r2,g[w],r);\n        }\n\n        while(j >= 0 && (e[j]&(1<<i)) == 0) {\n          z.sqrTo(r,r2); t = r; r = r2; r2 = t;\n          if(--i < 0) { i = this.DB-1; --j; }\n        }\n      }\n      return z.revert(r);\n    }\n\n    // (public) gcd(this,a) (HAC 14.54)\n    function bnGCD(a) {\n      var x = (this.s<0)?this.negate():this.clone();\n      var y = (a.s<0)?a.negate():a.clone();\n      if(x.compareTo(y) < 0) { var t = x; x = y; y = t; }\n      var i = x.getLowestSetBit(), g = y.getLowestSetBit();\n      if(g < 0) return x;\n      if(i < g) g = i;\n      if(g > 0) {\n        x.rShiftTo(g,x);\n        y.rShiftTo(g,y);\n      }\n      while(x.signum() > 0) {\n        if((i = x.getLowestSetBit()) > 0) x.rShiftTo(i,x);\n        if((i = y.getLowestSetBit()) > 0) y.rShiftTo(i,y);\n        if(x.compareTo(y) >= 0) {\n          x.subTo(y,x);\n          x.rShiftTo(1,x);\n        }\n        else {\n          y.subTo(x,y);\n          y.rShiftTo(1,y);\n        }\n      }\n      if(g > 0) y.lShiftTo(g,y);\n      return y;\n    }\n\n    // (protected) this % n, n < 2^26\n    function bnpModInt(n) {\n      if(n <= 0) return 0;\n      var d = this.DV%n, r = (this.s<0)?n-1:0;\n      if(this.t > 0)\n        if(d == 0) r = this[0]%n;\n        else for(var i = this.t-1; i >= 0; --i) r = (d*r+this[i])%n;\n      return r;\n    }\n\n    // (public) 1/this % m (HAC 14.61)\n    function bnModInverse(m) {\n      var ac = m.isEven();\n      if((this.isEven() && ac) || m.signum() == 0) return BigInteger.ZERO;\n      var u = m.clone(), v = this.clone();\n      var a = nbv(1), b = nbv(0), c = nbv(0), d = nbv(1);\n      while(u.signum() != 0) {\n        while(u.isEven()) {\n          u.rShiftTo(1,u);\n          if(ac) {\n            if(!a.isEven() || !b.isEven()) { a.addTo(this,a); b.subTo(m,b); }\n            a.rShiftTo(1,a);\n          }\n          else if(!b.isEven()) b.subTo(m,b);\n          b.rShiftTo(1,b);\n        }\n        while(v.isEven()) {\n          v.rShiftTo(1,v);\n          if(ac) {\n            if(!c.isEven() || !d.isEven()) { c.addTo(this,c); d.subTo(m,d); }\n            c.rShiftTo(1,c);\n          }\n          else if(!d.isEven()) d.subTo(m,d);\n          d.rShiftTo(1,d);\n        }\n        if(u.compareTo(v) >= 0) {\n          u.subTo(v,u);\n          if(ac) a.subTo(c,a);\n          b.subTo(d,b);\n        }\n        else {\n          v.subTo(u,v);\n          if(ac) c.subTo(a,c);\n          d.subTo(b,d);\n        }\n      }\n      if(v.compareTo(BigInteger.ONE) != 0) return BigInteger.ZERO;\n      if(d.compareTo(m) >= 0) return d.subtract(m);\n      if(d.signum() < 0) d.addTo(m,d); else return d;\n      if(d.signum() < 0) return d.add(m); else return d;\n    }\n\n    var lowprimes = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97,101,103,107,109,113,127,131,137,139,149,151,157,163,167,173,179,181,191,193,197,199,211,223,227,229,233,239,241,251,257,263,269,271,277,281,283,293,307,311,313,317,331,337,347,349,353,359,367,373,379,383,389,397,401,409,419,421,431,433,439,443,449,457,461,463,467,479,487,491,499,503,509,521,523,541,547,557,563,569,571,577,587,593,599,601,607,613,617,619,631,641,643,647,653,659,661,673,677,683,691,701,709,719,727,733,739,743,751,757,761,769,773,787,797,809,811,821,823,827,829,839,853,857,859,863,877,881,883,887,907,911,919,929,937,941,947,953,967,971,977,983,991,997];\n    var lplim = (1<<26)/lowprimes[lowprimes.length-1];\n\n    // (public) test primality with certainty >= 1-.5^t\n    function bnIsProbablePrime(t) {\n      var i, x = this.abs();\n      if(x.t == 1 && x[0] <= lowprimes[lowprimes.length-1]) {\n        for(i = 0; i < lowprimes.length; ++i)\n          if(x[0] == lowprimes[i]) return true;\n        return false;\n      }\n      if(x.isEven()) return false;\n      i = 1;\n      while(i < lowprimes.length) {\n        var m = lowprimes[i], j = i+1;\n        while(j < lowprimes.length && m < lplim) m *= lowprimes[j++];\n        m = x.modInt(m);\n        while(i < j) if(m%lowprimes[i++] == 0) return false;\n      }\n      return x.millerRabin(t);\n    }\n\n    // (protected) true if probably prime (HAC 4.24, Miller-Rabin)\n    function bnpMillerRabin(t) {\n      var n1 = this.subtract(BigInteger.ONE);\n      var k = n1.getLowestSetBit();\n      if(k <= 0) return false;\n      var r = n1.shiftRight(k);\n      t = (t+1)>>1;\n      if(t > lowprimes.length) t = lowprimes.length;\n      var a = nbi();\n      for(var i = 0; i < t; ++i) {\n        //Pick bases at random, instead of starting at 2\n        a.fromInt(lowprimes[Math.floor(Math.random()*lowprimes.length)]);\n        var y = a.modPow(r,this);\n        if(y.compareTo(BigInteger.ONE) != 0 && y.compareTo(n1) != 0) {\n          var j = 1;\n          while(j++ < k && y.compareTo(n1) != 0) {\n            y = y.modPowInt(2,this);\n            if(y.compareTo(BigInteger.ONE) == 0) return false;\n          }\n          if(y.compareTo(n1) != 0) return false;\n        }\n      }\n      return true;\n    }\n\n    // protected\n    BigInteger.prototype.chunkSize = bnpChunkSize;\n    BigInteger.prototype.toRadix = bnpToRadix;\n    BigInteger.prototype.fromRadix = bnpFromRadix;\n    BigInteger.prototype.fromNumber = bnpFromNumber;\n    BigInteger.prototype.bitwiseTo = bnpBitwiseTo;\n    BigInteger.prototype.changeBit = bnpChangeBit;\n    BigInteger.prototype.addTo = bnpAddTo;\n    BigInteger.prototype.dMultiply = bnpDMultiply;\n    BigInteger.prototype.dAddOffset = bnpDAddOffset;\n    BigInteger.prototype.multiplyLowerTo = bnpMultiplyLowerTo;\n    BigInteger.prototype.multiplyUpperTo = bnpMultiplyUpperTo;\n    BigInteger.prototype.modInt = bnpModInt;\n    BigInteger.prototype.millerRabin = bnpMillerRabin;\n\n    // public\n    BigInteger.prototype.clone = bnClone;\n    BigInteger.prototype.intValue = bnIntValue;\n    BigInteger.prototype.byteValue = bnByteValue;\n    BigInteger.prototype.shortValue = bnShortValue;\n    BigInteger.prototype.signum = bnSigNum;\n    BigInteger.prototype.toByteArray = bnToByteArray;\n    BigInteger.prototype.equals = bnEquals;\n    BigInteger.prototype.min = bnMin;\n    BigInteger.prototype.max = bnMax;\n    BigInteger.prototype.and = bnAnd;\n    BigInteger.prototype.or = bnOr;\n    BigInteger.prototype.xor = bnXor;\n    BigInteger.prototype.andNot = bnAndNot;\n    BigInteger.prototype.not = bnNot;\n    BigInteger.prototype.shiftLeft = bnShiftLeft;\n    BigInteger.prototype.shiftRight = bnShiftRight;\n    BigInteger.prototype.getLowestSetBit = bnGetLowestSetBit;\n    BigInteger.prototype.bitCount = bnBitCount;\n    BigInteger.prototype.testBit = bnTestBit;\n    BigInteger.prototype.setBit = bnSetBit;\n    BigInteger.prototype.clearBit = bnClearBit;\n    BigInteger.prototype.flipBit = bnFlipBit;\n    BigInteger.prototype.add = bnAdd;\n    BigInteger.prototype.subtract = bnSubtract;\n    BigInteger.prototype.multiply = bnMultiply;\n    BigInteger.prototype.divide = bnDivide;\n    BigInteger.prototype.remainder = bnRemainder;\n    BigInteger.prototype.divideAndRemainder = bnDivideAndRemainder;\n    BigInteger.prototype.modPow = bnModPow;\n    BigInteger.prototype.modInverse = bnModInverse;\n    BigInteger.prototype.pow = bnPow;\n    BigInteger.prototype.gcd = bnGCD;\n    BigInteger.prototype.isProbablePrime = bnIsProbablePrime;\n\n    // JSBN-specific extension\n    BigInteger.prototype.square = bnSquare;\n\n    // Expose the Barrett function\n    BigInteger.prototype.Barrett = Barrett\n\n    // BigInteger interfaces not implemented in jsbn:\n\n    // BigInteger(int signum, byte[] magnitude)\n    // double doubleValue()\n    // float floatValue()\n    // int hashCode()\n    // long longValue()\n    // static BigInteger valueOf(long val)\n\n\t// Random number generator - requires a PRNG backend, e.g. prng4.js\n\n\t// For best results, put code like\n\t// <body onClick='rng_seed_time();' onKeyPress='rng_seed_time();'>\n\t// in your main HTML document.\n\n\tvar rng_state;\n\tvar rng_pool;\n\tvar rng_pptr;\n\n\t// Mix in a 32-bit integer into the pool\n\tfunction rng_seed_int(x) {\n\t  rng_pool[rng_pptr++] ^= x & 255;\n\t  rng_pool[rng_pptr++] ^= (x >> 8) & 255;\n\t  rng_pool[rng_pptr++] ^= (x >> 16) & 255;\n\t  rng_pool[rng_pptr++] ^= (x >> 24) & 255;\n\t  if(rng_pptr >= rng_psize) rng_pptr -= rng_psize;\n\t}\n\n\t// Mix in the current time (w/milliseconds) into the pool\n\tfunction rng_seed_time() {\n\t  rng_seed_int(new Date().getTime());\n\t}\n\n\t// Initialize the pool with junk if needed.\n\tif(rng_pool == null) {\n\t  rng_pool = new Array();\n\t  rng_pptr = 0;\n\t  var t;\n\t  if(typeof window !== \"undefined\" && window.crypto) {\n\t\tif (window.crypto.getRandomValues) {\n\t\t  // Use webcrypto if available\n\t\t  var ua = new Uint8Array(32);\n\t\t  window.crypto.getRandomValues(ua);\n\t\t  for(t = 0; t < 32; ++t)\n\t\t\trng_pool[rng_pptr++] = ua[t];\n\t\t}\n\t\telse if(navigator.appName == \"Netscape\" && navigator.appVersion < \"5\") {\n\t\t  // Extract entropy (256 bits) from NS4 RNG if available\n\t\t  var z = window.crypto.random(32);\n\t\t  for(t = 0; t < z.length; ++t)\n\t\t\trng_pool[rng_pptr++] = z.charCodeAt(t) & 255;\n\t\t}\n\t  }\n\t  while(rng_pptr < rng_psize) {  // extract some randomness from Math.random()\n\t\tt = Math.floor(65536 * Math.random());\n\t\trng_pool[rng_pptr++] = t >>> 8;\n\t\trng_pool[rng_pptr++] = t & 255;\n\t  }\n\t  rng_pptr = 0;\n\t  rng_seed_time();\n\t  //rng_seed_int(window.screenX);\n\t  //rng_seed_int(window.screenY);\n\t}\n\n\tfunction rng_get_byte() {\n\t  if(rng_state == null) {\n\t\trng_seed_time();\n\t\trng_state = prng_newstate();\n\t\trng_state.init(rng_pool);\n\t\tfor(rng_pptr = 0; rng_pptr < rng_pool.length; ++rng_pptr)\n\t\t  rng_pool[rng_pptr] = 0;\n\t\trng_pptr = 0;\n\t\t//rng_pool = null;\n\t  }\n\t  // TODO: allow reseeding after first request\n\t  return rng_state.next();\n\t}\n\n\tfunction rng_get_bytes(ba) {\n\t  var i;\n\t  for(i = 0; i < ba.length; ++i) ba[i] = rng_get_byte();\n\t}\n\n\tfunction SecureRandom() {}\n\n\tSecureRandom.prototype.nextBytes = rng_get_bytes;\n\n\t// prng4.js - uses Arcfour as a PRNG\n\n\tfunction Arcfour() {\n\t  this.i = 0;\n\t  this.j = 0;\n\t  this.S = new Array();\n\t}\n\n\t// Initialize arcfour context from key, an array of ints, each from [0..255]\n\tfunction ARC4init(key) {\n\t  var i, j, t;\n\t  for(i = 0; i < 256; ++i)\n\t\tthis.S[i] = i;\n\t  j = 0;\n\t  for(i = 0; i < 256; ++i) {\n\t\tj = (j + this.S[i] + key[i % key.length]) & 255;\n\t\tt = this.S[i];\n\t\tthis.S[i] = this.S[j];\n\t\tthis.S[j] = t;\n\t  }\n\t  this.i = 0;\n\t  this.j = 0;\n\t}\n\n\tfunction ARC4next() {\n\t  var t;\n\t  this.i = (this.i + 1) & 255;\n\t  this.j = (this.j + this.S[this.i]) & 255;\n\t  t = this.S[this.i];\n\t  this.S[this.i] = this.S[this.j];\n\t  this.S[this.j] = t;\n\t  return this.S[(t + this.S[this.i]) & 255];\n\t}\n\n\tArcfour.prototype.init = ARC4init;\n\tArcfour.prototype.next = ARC4next;\n\n\t// Plug in your RNG constructor here\n\tfunction prng_newstate() {\n\t  return new Arcfour();\n\t}\n\n\t// Pool size must be a multiple of 4 and greater than 32.\n\t// An array of bytes the size of the pool will be passed to init()\n\tvar rng_psize = 256;\n\n  BigInteger.SecureRandom = SecureRandom;\n  BigInteger.BigInteger = BigInteger;\n  if (typeof exports !== 'undefined') {\n    exports = module.exports = BigInteger;\n  } else {\n    this.BigInteger = BigInteger;\n    this.SecureRandom = SecureRandom;\n  }\n\n}).call(this);\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}