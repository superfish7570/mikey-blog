"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var ManagementClient_1 = require("./ManagementClient");
var testing_helper_1 = require("../testing-helper");
var ava_1 = __importDefault(require("ava"));
var utils_1 = require("../utils");
var __1 = require("../..");
var managementClient = new ManagementClient_1.ManagementClient(testing_helper_1.getOptionsFromEnv());
// 初始化数据
var initData = function () { return __awaiter(void 0, void 0, void 0, function () {
    var namespaceCode, namespaceName, namespace, user, roleCode, role, org, group, resource;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                namespaceCode = utils_1.generateRandomString();
                namespaceName = utils_1.generateRandomString();
                return [4 /*yield*/, managementClient.acl.createNamespace(namespaceCode, namespaceName)];
            case 1:
                namespace = _a.sent();
                return [4 /*yield*/, managementClient.users.create({
                        username: utils_1.generateRandomString(30)
                    })];
            case 2:
                user = _a.sent();
                roleCode = utils_1.generateRandomString();
                return [4 /*yield*/, managementClient.roles.create(roleCode, '', namespace.code)];
            case 3:
                role = _a.sent();
                return [4 /*yield*/, managementClient.org.create(utils_1.generateRandomString(), utils_1.generateRandomString())];
            case 4:
                org = _a.sent();
                return [4 /*yield*/, managementClient.groups.create(utils_1.generateRandomString(), utils_1.generateRandomString())];
            case 5:
                group = _a.sent();
                return [4 /*yield*/, managementClient.acl.createResource({
                        namespace: namespace.code,
                        code: 'ec2',
                        type: 'DATA',
                        description: '服务器',
                        actions: [
                            {
                                name: 'ec2:Start',
                                description: '启动服务器'
                            },
                            {
                                name: 'ec2:Delete',
                                description: '删除服务器'
                            },
                            {
                                name: 'ec2:Release',
                                description: '释放服务器'
                            },
                            {
                                name: 'ec2:Restart',
                                description: '重启服务器'
                            },
                            {
                                name: 'ec2:UpdateBasicInformation',
                                description: '修改服务器基础描述信息'
                            },
                            {
                                name: 'ec2:ViewMonitoringStatistics',
                                description: '查看服务器监控信息'
                            }
                        ]
                    })];
            case 6:
                resource = _a.sent();
                return [2 /*return*/, {
                        namespace: namespace,
                        role: role,
                        user: user,
                        org: org,
                        group: group,
                        resource: resource
                    }];
        }
    });
}); };
ava_1.default('AclManagementClient.authorizeResources', function (t) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, namespace, user, group, role, org, resource, isAllowed1;
    return __generator(this, function (_b) {
        switch (_b.label) {
            case 0: return [4 /*yield*/, initData()];
            case 1:
                _a = _b.sent(), namespace = _a.namespace, user = _a.user, group = _a.group, role = _a.role, org = _a.org, resource = _a.resource;
                return [4 /*yield*/, managementClient.acl.authorizeResources({
                        namespace: namespace.code,
                        opts: [
                            {
                                targetType: __1.PolicyAssignmentTargetType.User,
                                targetIdentifiers: [user.id],
                                resources: [
                                    {
                                        code: resource.code + ":1",
                                        actions: ['ec2:Start'],
                                        resourceType: __1.ResourceType.Data
                                    }
                                ]
                            },
                            {
                                targetType: __1.PolicyAssignmentTargetType.Group,
                                targetIdentifiers: [group.code],
                                resources: [
                                    {
                                        code: resource.code + ":1",
                                        actions: ['ec2:Stop'],
                                        resourceType: __1.ResourceType.Data
                                    }
                                ]
                            },
                            {
                                targetType: __1.PolicyAssignmentTargetType.Role,
                                targetIdentifiers: [role.code],
                                resources: [
                                    {
                                        code: resource.code + ":1",
                                        actions: ['ec2:UpdateBasicInformation'],
                                        resourceType: __1.ResourceType.Data
                                    }
                                ]
                            },
                            {
                                targetType: __1.PolicyAssignmentTargetType.Org,
                                targetIdentifiers: [org.rootNode.id],
                                resources: [
                                    {
                                        code: resource.code + ":1",
                                        actions: ['ec2:ViewMonitoringStatistics'],
                                        resourceType: __1.ResourceType.Data
                                    }
                                ]
                            }
                        ]
                    })];
            case 2:
                _b.sent();
                return [4 /*yield*/, managementClient.acl.isAllowed(user.id, 'ec2:1', 'ec2:Start', {
                        namespace: namespace.code
                    })];
            case 3:
                isAllowed1 = _b.sent();
                t.assert(isAllowed1);
                return [2 /*return*/];
        }
    });
}); });
ava_1.default.only('AclManagementClient.listAuthorizedResourcesBatch', function (t) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, namespace, user, group, role, org, resource, list;
    return __generator(this, function (_b) {
        switch (_b.label) {
            case 0: return [4 /*yield*/, initData()];
            case 1:
                _a = _b.sent(), namespace = _a.namespace, user = _a.user, group = _a.group, role = _a.role, org = _a.org, resource = _a.resource;
                return [4 /*yield*/, managementClient.acl.authorizeResources({
                        namespace: namespace.code,
                        opts: [
                            {
                                targetType: __1.PolicyAssignmentTargetType.User,
                                targetIdentifiers: [user.id],
                                resources: [
                                    {
                                        code: resource.code + ":1",
                                        actions: ['ec2:Start'],
                                        resourceType: __1.ResourceType.Data
                                    }
                                ]
                            },
                            {
                                targetType: __1.PolicyAssignmentTargetType.Group,
                                targetIdentifiers: [group.code],
                                resources: [
                                    {
                                        code: resource.code + ":1",
                                        actions: ['ec2:Stop'],
                                        resourceType: __1.ResourceType.Data
                                    }
                                ]
                            },
                            {
                                targetType: __1.PolicyAssignmentTargetType.Role,
                                targetIdentifiers: [role.code],
                                resources: [
                                    {
                                        code: resource.code + ":1",
                                        actions: ['ec2:UpdateBasicInformation'],
                                        resourceType: __1.ResourceType.Data
                                    }
                                ]
                            },
                            {
                                targetType: __1.PolicyAssignmentTargetType.Org,
                                targetIdentifiers: [org.rootNode.id],
                                resources: [
                                    {
                                        code: resource.code + ":1",
                                        actions: ['ec2:ViewMonitoringStatistics'],
                                        resourceType: __1.ResourceType.Data
                                    }
                                ]
                            }
                        ]
                    })];
            case 2:
                _b.sent();
                return [4 /*yield*/, managementClient.acl.listAuthorizedResourcesBatch({
                        namespace: namespace.code,
                        targets: [
                            {
                                targetType: __1.PolicyAssignmentTargetType.User,
                                targetIdentifier: user.id
                            },
                            {
                                targetType: __1.PolicyAssignmentTargetType.Group,
                                targetIdentifier: group.code
                            },
                            {
                                targetType: __1.PolicyAssignmentTargetType.Role,
                                targetIdentifier: role.code
                            },
                            {
                                targetType: __1.PolicyAssignmentTargetType.Org,
                                targetIdentifier: org.rootNode.id
                            }
                        ]
                    })];
            case 3:
                list = (_b.sent()).list;
                t.assert(list[0].list[0].code === 'ec2:1');
                t.assert(list[0].list[0].actions.includes('ec2:Start'));
                t.assert(list[1].list[0].code === 'ec2:1');
                t.assert(list[1].list[0].actions.includes('ec2:Stop'));
                t.assert(list[2].list[0].code === 'ec2:1');
                t.assert(list[2].list[0].actions.includes('ec2:UpdateBasicInformation'));
                t.assert(list[3].list[0].code === 'ec2:1');
                t.assert(list[3].list[0].actions.includes('ec2:ViewMonitoringStatistics'));
                return [2 /*return*/];
        }
    });
}); });
ava_1.default('getPoliciesAssignmentsCondition', function (t) { return __awaiter(void 0, void 0, void 0, function () {
    var result;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, managementClient.acl.getPoliciesAssignmentsCondition("default", "wIHHgw9zG", "ROLE")];
            case 1:
                result = _a.sent();
                console.log(result);
                t.assert(result != null);
                return [2 /*return*/];
        }
    });
}); });
ava_1.default('AclManagementClient.revokeResources', function (t) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, namespace, user, group, role, org, resource, isAllowed1;
    return __generator(this, function (_b) {
        switch (_b.label) {
            case 0: return [4 /*yield*/, initData()];
            case 1:
                _a = _b.sent(), namespace = _a.namespace, user = _a.user, group = _a.group, role = _a.role, org = _a.org, resource = _a.resource;
                return [4 /*yield*/, managementClient.acl.authorizeResources({
                        namespace: namespace.code,
                        opts: [
                            {
                                targetType: __1.PolicyAssignmentTargetType.User,
                                targetIdentifiers: [user.id],
                                resources: [
                                    {
                                        code: resource.code + ":1",
                                        actions: ['ec2:Start'],
                                        resourceType: __1.ResourceType.Data
                                    }
                                ]
                            },
                            {
                                targetType: __1.PolicyAssignmentTargetType.Group,
                                targetIdentifiers: [group.code],
                                resources: [
                                    {
                                        code: resource.code + ":1",
                                        actions: ['ec2:Stop'],
                                        resourceType: __1.ResourceType.Data
                                    }
                                ]
                            },
                            {
                                targetType: __1.PolicyAssignmentTargetType.Role,
                                targetIdentifiers: [role.code],
                                resources: [
                                    {
                                        code: resource.code + ":1",
                                        actions: ['ec2:UpdateBasicInformation'],
                                        resourceType: __1.ResourceType.Data
                                    }
                                ]
                            },
                            {
                                targetType: __1.PolicyAssignmentTargetType.Org,
                                targetIdentifiers: [org.rootNode.id],
                                resources: [
                                    {
                                        code: resource.code + ":1",
                                        actions: ['ec2:ViewMonitoringStatistics'],
                                        resourceType: __1.ResourceType.Data
                                    }
                                ]
                            }
                        ]
                    })];
            case 2:
                _b.sent();
                return [4 /*yield*/, managementClient.acl.revokeResources({
                        namespace: namespace.code,
                        opts: [
                            {
                                targetType: __1.PolicyAssignmentTargetType.User,
                                targetIdentifiers: [user.id],
                                resources: [
                                    {
                                        code: resource.code + ":1",
                                        actions: ['ec2:Start'],
                                        resourceType: __1.ResourceType.Data
                                    }
                                ]
                            },
                            {
                                targetType: __1.PolicyAssignmentTargetType.Group,
                                targetIdentifiers: [group.code],
                                resources: [
                                    {
                                        code: resource.code + ":1",
                                        actions: ['ec2:Stop'],
                                        resourceType: __1.ResourceType.Data
                                    }
                                ]
                            },
                            {
                                targetType: __1.PolicyAssignmentTargetType.Role,
                                targetIdentifiers: [role.code],
                                resources: [
                                    {
                                        code: resource.code + ":1",
                                        actions: ['ec2:UpdateBasicInformation'],
                                        resourceType: __1.ResourceType.Data
                                    }
                                ]
                            },
                            {
                                targetType: __1.PolicyAssignmentTargetType.Org,
                                targetIdentifiers: [org.rootNode.id],
                                resources: [
                                    {
                                        code: resource.code + ":1",
                                        actions: ['ec2:ViewMonitoringStatistics'],
                                        resourceType: __1.ResourceType.Data
                                    }
                                ]
                            }
                        ]
                    })];
            case 3:
                _b.sent();
                return [4 /*yield*/, managementClient.acl.isAllowed(user.id, 'ec2:1', 'ec2:Start', {
                        namespace: namespace.code
                    })];
            case 4:
                isAllowed1 = _b.sent();
                t.assert(isAllowed1 === false);
                return [2 /*return*/];
        }
    });
}); });
//# sourceMappingURL=AclManagementClient.spec.js.map