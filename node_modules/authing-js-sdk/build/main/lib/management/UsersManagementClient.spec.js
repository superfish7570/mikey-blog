"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var ManagementClient_1 = require("./ManagementClient");
var testing_helper_1 = require("../testing-helper");
var ava_1 = __importDefault(require("ava"));
var moment_1 = __importDefault(require("moment"));
var graphql_v2_1 = require("../../types/graphql.v2");
var AuthenticationClient_1 = require("../authentication/AuthenticationClient");
var managementClient = new ManagementClient_1.ManagementClient(testing_helper_1.getOptionsFromEnv());
var authenticationClient = new AuthenticationClient_1.AuthenticationClient(testing_helper_1.getOptionsFromEnv());
ava_1.default('创建用户', function (t) { return __awaiter(void 0, void 0, void 0, function () {
    var username, email, phone, unionid, user;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                username = testing_helper_1.generateRandomString(10);
                email = testing_helper_1.generateRandomString(10);
                phone = testing_helper_1.generateRandomPhone();
                unionid = testing_helper_1.generateRandomString(10);
                return [4 /*yield*/, managementClient.users.create({
                        username: username,
                        email: email,
                        phone: phone,
                        unionid: unionid
                    })];
            case 1:
                user = _a.sent();
                t.assert(user);
                t.assert(user.email === email.toLowerCase());
                t.assert(user.username === username);
                t.assert(user.phone === phone);
                t.assert(user.unionid === unionid);
                return [2 /*return*/];
        }
    });
}); });
ava_1.default('创建用户 # 必须指定一种唯一标志', function (t) { return __awaiter(void 0, void 0, void 0, function () {
    var failed, _a;
    return __generator(this, function (_b) {
        switch (_b.label) {
            case 0:
                failed = false;
                _b.label = 1;
            case 1:
                _b.trys.push([1, 3, , 4]);
                return [4 /*yield*/, managementClient.users.create({
                        password: testing_helper_1.generateRandomString(10)
                    })];
            case 2:
                _b.sent();
                return [3 /*break*/, 4];
            case 3:
                _a = _b.sent();
                failed = true;
                return [3 /*break*/, 4];
            case 4:
                t.assert(failed);
                return [2 /*return*/];
        }
    });
}); });
ava_1.default('创建用户 # 时间格式1', function (t) { return __awaiter(void 0, void 0, void 0, function () {
    var user;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, managementClient.users.create({
                    username: testing_helper_1.generateRandomString(),
                    lastLogin: '2017-06-07T14:34:08+04:00'
                })];
            case 1:
                user = _a.sent();
                return [4 /*yield*/, managementClient.users.detail(user.id)];
            case 2:
                user = _a.sent();
                t.assert(user);
                return [2 /*return*/];
        }
    });
}); });
ava_1.default('创建用户 # signedUp', function (t) { return __awaiter(void 0, void 0, void 0, function () {
    var signedUp, user;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                signedUp = '2017-06-07T14:34:08+04:00';
                return [4 /*yield*/, managementClient.users.create({
                        username: testing_helper_1.generateRandomString(),
                        signedUp: signedUp
                    })];
            case 1:
                user = _a.sent();
                return [4 /*yield*/, managementClient.users.detail(user.id)];
            case 2:
                user = _a.sent();
                t.assert(moment_1.default(user.signedUp).unix() === moment_1.default(signedUp).unix());
                return [2 /*return*/];
        }
    });
}); });
ava_1.default('创建用户 # 错误时间格式', function (t) { return __awaiter(void 0, void 0, void 0, function () {
    var failed, _a;
    return __generator(this, function (_b) {
        switch (_b.label) {
            case 0:
                failed = false;
                _b.label = 1;
            case 1:
                _b.trys.push([1, 3, , 4]);
                return [4 /*yield*/, managementClient.users.create({
                        username: testing_helper_1.generateRandomString(),
                        lastLogin: '1602756997950'
                    })];
            case 2:
                _b.sent();
                return [3 /*break*/, 4];
            case 3:
                _a = _b.sent();
                failed = true;
                return [3 /*break*/, 4];
            case 4:
                t.assert(failed);
                return [2 /*return*/];
        }
    });
}); });
ava_1.default.skip('创建用户 # 附带身份信息', function (t) { return __awaiter(void 0, void 0, void 0, function () {
    var user, result, token, result2;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, managementClient.users.create({
                    username: testing_helper_1.generateRandomString()
                }, {
                    identity: {
                        userIdInIdp: '1111',
                        provider: 'wechat'
                    }
                })];
            case 1:
                user = _a.sent();
                return [4 /*yield*/, managementClient.users.find({
                        identity: {
                            userIdInIdp: '1111',
                            provider: 'wechat'
                        }
                    })];
            case 2:
                result = _a.sent();
                t.assert(user.id === result.id);
                return [4 /*yield*/, managementClient.users.refreshToken(user.id)];
            case 3:
                token = _a.sent();
                console.log(token);
                return [4 /*yield*/, managementClient.users.find({
                        identity: {
                            userIdInIdp: '1111',
                            provider: 'wechat'
                        }
                    })];
            case 4:
                result2 = _a.sent();
                console.log(result2);
                return [4 /*yield*/, managementClient.users.delete(user.id)];
            case 5:
                _a.sent();
                return [2 /*return*/];
        }
    });
}); });
ava_1.default('检查用户是否存在', function (t) { return __awaiter(void 0, void 0, void 0, function () {
    var exists1, username, email, phone, _a, _b, _c, _d, _e, _f;
    return __generator(this, function (_g) {
        switch (_g.label) {
            case 0: return [4 /*yield*/, managementClient.users.exists({
                    username: testing_helper_1.generateRandomString(10)
                })];
            case 1:
                exists1 = _g.sent();
                t.assert(exists1 === false);
                username = testing_helper_1.generateRandomString(10);
                email = testing_helper_1.generateRandomString(10) + '@qq.com';
                phone = testing_helper_1.generateRandomPhone();
                return [4 /*yield*/, managementClient.users.create({
                        username: username
                    })];
            case 2:
                _g.sent();
                _b = (_a = t).assert;
                return [4 /*yield*/, managementClient.users.exists({ username: username })];
            case 3:
                _b.apply(_a, [_g.sent()]);
                return [4 /*yield*/, managementClient.users.create({ email: email })];
            case 4:
                _g.sent();
                _d = (_c = t).assert;
                return [4 /*yield*/, managementClient.users.exists({ email: email })];
            case 5:
                _d.apply(_c, [_g.sent()]);
                return [4 /*yield*/, managementClient.users.create({ phone: phone })];
            case 6:
                _g.sent();
                _f = (_e = t).assert;
                return [4 /*yield*/, managementClient.users.exists({ phone: phone })];
            case 7:
                _f.apply(_e, [_g.sent()]);
                return [2 /*return*/];
        }
    });
}); });
ava_1.default('查询用户详情', function (t) { return __awaiter(void 0, void 0, void 0, function () {
    var user, detail;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, managementClient.users.create({
                    username: testing_helper_1.generateRandomString(),
                    password: testing_helper_1.generateRandomString()
                })];
            case 1:
                user = _a.sent();
                return [4 /*yield*/, managementClient.users.detail(user.id)];
            case 2:
                detail = _a.sent();
                t.assert(user.id === detail.id);
                return [2 /*return*/];
        }
    });
}); });
ava_1.default('查询用户详情 # 不属于该用户池的用户', function (t) { return __awaiter(void 0, void 0, void 0, function () {
    var detail;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, managementClient.users.detail('xxx')];
            case 1:
                detail = _a.sent();
                t.assert(detail === null);
                return [2 /*return*/];
        }
    });
}); });
ava_1.default.skip('find withCustomData', function (t) { return __awaiter(void 0, void 0, void 0, function () {
    var user;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, managementClient.users.find({
                    withCustomData: true,
                    phone: '15210165828'
                })];
            case 1:
                user = _a.sent();
                console.log(user);
                t.assert(user);
                return [2 /*return*/];
        }
    });
}); });
ava_1.default('管理员通过 username 查询用户', function (t) { return __awaiter(void 0, void 0, void 0, function () {
    var username, password, user;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                username = testing_helper_1.generateRandomString();
                password = testing_helper_1.generateRandomString();
                return [4 /*yield*/, managementClient.users.create({
                        username: username,
                        password: password
                    })];
            case 1:
                _a.sent();
                return [4 /*yield*/, managementClient.users.find({
                        username: username
                    })];
            case 2:
                user = _a.sent();
                t.assert(user.id);
                return [4 /*yield*/, managementClient.users.delete(user.id)];
            case 3:
                _a.sent();
                return [2 /*return*/];
        }
    });
}); });
ava_1.default('管理员通过 emmail 查询用户', function (t) { return __awaiter(void 0, void 0, void 0, function () {
    var email, password, user;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                email = testing_helper_1.generateRandomString() + '@test.com';
                password = testing_helper_1.generateRandomString();
                return [4 /*yield*/, managementClient.users.create({
                        email: email,
                        password: password
                    })];
            case 1:
                _a.sent();
                return [4 /*yield*/, managementClient.users.find({
                        email: email
                    })];
            case 2:
                user = _a.sent();
                t.assert(user.id);
                return [4 /*yield*/, managementClient.users.delete(user.id)];
            case 3:
                _a.sent();
                return [2 /*return*/];
        }
    });
}); });
ava_1.default('管理员通过 phone 查询用户', function (t) { return __awaiter(void 0, void 0, void 0, function () {
    var rand1, rand2, phone, password, user;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                rand1 = Math.floor(Math.random() * 8999) + 1000;
                rand2 = Math.floor(Math.random() * 8999) + 1000;
                phone = '131' + rand1.toString() + rand2.toString();
                password = testing_helper_1.generateRandomString();
                return [4 /*yield*/, managementClient.users.create({
                        phone: phone,
                        password: password
                    })];
            case 1:
                _a.sent();
                return [4 /*yield*/, managementClient.users.find({
                        phone: phone
                    })];
            case 2:
                user = _a.sent();
                t.assert(user.id);
                return [4 /*yield*/, managementClient.users.delete(user.id)];
            case 3:
                _a.sent();
                return [2 /*return*/];
        }
    });
}); });
ava_1.default('管理员通过 externalId 查询用户', function (t) { return __awaiter(void 0, void 0, void 0, function () {
    var username, password, userCreated, externalId, user;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                username = testing_helper_1.generateRandomString();
                password = testing_helper_1.generateRandomString();
                return [4 /*yield*/, managementClient.users.create({
                        username: username,
                        password: password
                    })];
            case 1:
                userCreated = _a.sent();
                externalId = testing_helper_1.generateRandomString();
                return [4 /*yield*/, managementClient.users.update(userCreated.id, { externalId: externalId })];
            case 2:
                _a.sent();
                return [4 /*yield*/, managementClient.users.find({
                        externalId: externalId
                    })];
            case 3:
                user = _a.sent();
                t.assert(user.id);
                return [4 /*yield*/, managementClient.users.delete(user.id)];
            case 4:
                _a.sent();
                return [2 /*return*/];
        }
    });
}); });
ava_1.default('list withCustomData', function (t) { return __awaiter(void 0, void 0, void 0, function () {
    var user;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, managementClient.users.list(1, 10, {
                    withCustomData: true
                })];
            case 1:
                user = _a.sent();
                console.log(user);
                t.assert(user);
                return [2 /*return*/];
        }
    });
}); });
ava_1.default('filter', function (t) { return __awaiter(void 0, void 0, void 0, function () {
    var users;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, managementClient.users.filter({
                    filter: [
                        [
                            { type: "userDefinedFields", value: "isForbidden" },
                            "NEQ",
                            "forbidden"
                        ],
                        [
                            { type: "OtherFields", value: "app" },
                            "EQ",
                            { id: "60ab28843baf2e2c075dbeae", label: "新形态教材网" }
                        ]
                    ]
                })];
            case 1:
                users = _a.sent();
                t.assert(users.list.length > 0);
                return [2 /*return*/];
        }
    });
}); });
ava_1.default('批量查询用户', function (t) { return __awaiter(void 0, void 0, void 0, function () {
    var list, i, user, data;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                list = [];
                i = 0;
                _a.label = 1;
            case 1:
                if (!(i <= 10)) return [3 /*break*/, 4];
                return [4 /*yield*/, managementClient.users.create({
                        username: testing_helper_1.generateRandomString(10),
                        password: '123456!'
                    })];
            case 2:
                user = _a.sent();
                list.push(user.id);
                _a.label = 3;
            case 3:
                i++;
                return [3 /*break*/, 1];
            case 4: return [4 /*yield*/, managementClient.users.batch(list)];
            case 5:
                data = _a.sent();
                t.assert(data.length === list.length);
                return [2 /*return*/];
        }
    });
}); });
ava_1.default('搜索用户', function (t) { return __awaiter(void 0, void 0, void 0, function () {
    var query, _a, list, totalCount;
    return __generator(this, function (_b) {
        switch (_b.label) {
            case 0:
                query = 'c';
                return [4 /*yield*/, managementClient.users.search(query)];
            case 1:
                _a = _b.sent(), list = _a.list, totalCount = _a.totalCount;
                t.assert(list !== undefined);
                t.assert(totalCount !== undefined);
                return [2 /*return*/];
        }
    });
}); });
ava_1.default('修改用户资料', function (t) { return __awaiter(void 0, void 0, void 0, function () {
    var user, nickname, updated;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, managementClient.users.create({
                    username: testing_helper_1.generateRandomString(),
                    password: '123456!'
                })];
            case 1:
                user = _a.sent();
                nickname = testing_helper_1.generateRandomString(10);
                return [4 /*yield*/, managementClient.users.update(user.id, {
                        nickname: nickname
                    })];
            case 2:
                updated = _a.sent();
                t.assert(updated.nickname === nickname);
                return [2 /*return*/];
        }
    });
}); });
ava_1.default('修改用户资料 # 邮箱', function (t) { return __awaiter(void 0, void 0, void 0, function () {
    var user, email, updated;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, managementClient.users.create({
                    username: testing_helper_1.generateRandomString(),
                    password: '123456!'
                })];
            case 1:
                user = _a.sent();
                email = testing_helper_1.generateRandomString() + '@test.com';
                return [4 /*yield*/, managementClient.users.update(user.id, {
                        email: email
                    })];
            case 2:
                updated = _a.sent();
                t.assert(updated.email === email.toLowerCase());
                return [2 /*return*/];
        }
    });
}); });
ava_1.default('修改用户资料 # 手机号', function (t) { return __awaiter(void 0, void 0, void 0, function () {
    var user, phone, updated;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, managementClient.users.create({
                    username: testing_helper_1.generateRandomString(),
                    password: '123456!'
                })];
            case 1:
                user = _a.sent();
                phone = testing_helper_1.generateRandomPhone();
                return [4 /*yield*/, managementClient.users.update(user.id, {
                        phone: phone
                    })];
            case 2:
                updated = _a.sent();
                t.assert(updated.phone === phone);
                return [2 /*return*/];
        }
    });
}); });
ava_1.default('获取用户角色列表', function (t) { return __awaiter(void 0, void 0, void 0, function () {
    var user, role, roles;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, managementClient.users.create({
                    username: testing_helper_1.generateRandomString(),
                    password: '123456!'
                })];
            case 1:
                user = _a.sent();
                return [4 /*yield*/, managementClient.roles.create(testing_helper_1.generateRandomString())];
            case 2:
                role = _a.sent();
                return [4 /*yield*/, managementClient.roles.addUsers(role.code, [user.id])];
            case 3:
                _a.sent();
                return [4 /*yield*/, managementClient.users.listRoles(user.id)];
            case 4:
                roles = _a.sent();
                t.assert(roles.totalCount === 1);
                t.assert(roles.list[0].code === role.code);
                return [2 /*return*/];
        }
    });
}); });
ava_1.default.skip('获取用户角色列表 namespace', function (t) { return __awaiter(void 0, void 0, void 0, function () {
    var roles;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, managementClient.users.listRoles('603f567865d782899ffb0b6e', '603f52f97cd214a8805c0cc8')];
            case 1:
                roles = _a.sent();
                console.log(roles);
                t.assert(roles);
                return [2 /*return*/];
        }
    });
}); });
ava_1.default('删除用户', function (t) { return __awaiter(void 0, void 0, void 0, function () {
    var user, user2;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, managementClient.users.create({
                    username: testing_helper_1.generateRandomString(),
                    password: '123456!'
                })];
            case 1:
                user = _a.sent();
                return [4 /*yield*/, managementClient.users.delete(user.id)];
            case 2:
                _a.sent();
                return [4 /*yield*/, managementClient.users.detail(user.id)];
            case 3:
                user2 = _a.sent();
                t.assert(user2 === null);
                return [2 /*return*/];
        }
    });
}); });
ava_1.default('refreshToken', function (t) { return __awaiter(void 0, void 0, void 0, function () {
    var user, token, data;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, managementClient.users.create({
                    username: testing_helper_1.generateRandomString(),
                    password: '123456!'
                })];
            case 1:
                user = _a.sent();
                return [4 /*yield*/, managementClient.users.refreshToken(user.id)];
            case 2:
                token = (_a.sent()).token;
                t.assert(token);
                return [4 /*yield*/, managementClient.checkLoginStatus(token, {
                        fetchUserDetail: true
                    })];
            case 3:
                data = _a.sent();
                t.assert(user.id === data.id);
                return [2 /*return*/];
        }
    });
}); });
ava_1.default.skip('获取用户组织机构列表', function (t) { return __awaiter(void 0, void 0, void 0, function () {
    var data;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, managementClient.users.listOrgs('5f9976a7389b6dccb23a4c54')];
            case 1:
                data = _a.sent();
                t.assert(data);
                return [2 /*return*/];
        }
    });
}); });
ava_1.default.skip('listAuthorizedResources', function (t) { return __awaiter(void 0, void 0, void 0, function () {
    var data;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, managementClient.users.listAuthorizedResources('603f2c49e91d695739d7206c', '6018bab016c246d458ef0ad2', {
                    resourceType: graphql_v2_1.ResourceType.Menu
                })];
            case 1:
                data = _a.sent();
                console.log(JSON.stringify(data, null, 4));
                t.assert(data);
                return [2 /*return*/];
        }
    });
}); });
ava_1.default('自定义数据', function (t) { return __awaiter(void 0, void 0, void 0, function () {
    var userId, data, data2;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                userId = '603f2c49e91d695739d7206c';
                return [4 /*yield*/, managementClient.users.setUdfValue(userId, {
                        school: '华中科技大学'
                    })];
            case 1:
                _a.sent();
                return [4 /*yield*/, managementClient.users.getUdfValue(userId)];
            case 2:
                data = _a.sent();
                console.log(data);
                t.assert(data);
                return [4 /*yield*/, managementClient.users.removeUdfValue(userId, 'school')];
            case 3:
                _a.sent();
                return [4 /*yield*/, managementClient.users.getUdfValue(userId)];
            case 4:
                data2 = _a.sent();
                console.log(data2);
                t.assert(data);
                return [2 /*return*/];
        }
    });
}); });
ava_1.default('getUdfValueBatch', function (t) { return __awaiter(void 0, void 0, void 0, function () {
    var userId, data;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                userId = '603f2c49e91d695739d7206c';
                return [4 /*yield*/, managementClient.users.setUdfValue(userId, {
                        school: '华中科技大学'
                    })];
            case 1:
                _a.sent();
                return [4 /*yield*/, managementClient.users.getUdfValueBatch([userId])];
            case 2:
                data = _a.sent();
                console.log(data);
                t.assert(data);
                return [2 /*return*/];
        }
    });
}); });
ava_1.default('setUdfValueBatch', function (t) { return __awaiter(void 0, void 0, void 0, function () {
    var data, error_1;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                t.assert(true);
                _a.label = 1;
            case 1:
                _a.trys.push([1, 4, , 5]);
                return [4 /*yield*/, managementClient.users.setUdfValueBatch([
                        {
                            userId: '603f2c49e91d695739d7206c',
                            data: {
                                school: '华中科技大学'
                            }
                        },
                        {
                            userId: '603f2c4910dfc09f1f3ecce5',
                            data: {
                                school: '清华大学',
                                age: 100
                            }
                        }
                    ])];
            case 2:
                _a.sent();
                return [4 /*yield*/, managementClient.users.getUdfValueBatch([
                        '603f2c49e91d695739d7206c',
                        '603f2c4910dfc09f1f3ecce5'
                    ])];
            case 3:
                data = _a.sent();
                console.log(data);
                t.assert(data);
                return [3 /*break*/, 5];
            case 4:
                error_1 = _a.sent();
                console.log(error_1);
                return [3 /*break*/, 5];
            case 5: return [2 /*return*/];
        }
    });
}); });
ava_1.default('踢下线一批用户', function (t) { return __awaiter(void 0, void 0, void 0, function () {
    var username, pwd, user, data;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                username = Math.random()
                    .toString(26)
                    .slice(2);
                pwd = '123456';
                return [4 /*yield*/, managementClient.users.create({ username: username, password: pwd })];
            case 1:
                user = _a.sent();
                return [4 /*yield*/, managementClient.users.kick([user.id])];
            case 2:
                data = _a.sent();
                t.assert(data.code === 200);
                return [2 /*return*/];
        }
    });
}); });
ava_1.default('用户池管理员根据用户 id 查询用户的登录状态', function (t) { return __awaiter(void 0, void 0, void 0, function () {
    var username, pwd, user, res2;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                username = Math.random()
                    .toString(26)
                    .slice(2);
                pwd = '123456';
                return [4 /*yield*/, managementClient.users.create({ username: username, password: pwd })];
            case 1:
                user = _a.sent();
                return [4 /*yield*/, authenticationClient.loginByUsername(username, pwd)];
            case 2:
                _a.sent();
                return [4 /*yield*/, managementClient.users.checkLoginStatus(user.id)];
            case 3:
                res2 = _a.sent();
                t.assert(res2.isLogin === true);
                t.assert(res2.user);
                t.assert(res2.application.length > 0);
                return [2 /*return*/];
        }
    });
}); });
ava_1.default('用户池管理员强制下线用户在某个应用的登录态', function (t) { return __awaiter(void 0, void 0, void 0, function () {
    var username, pwd, user, res2;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                username = Math.random()
                    .toString(26)
                    .slice(2);
                pwd = '123456';
                return [4 /*yield*/, managementClient.users.create({ username: username, password: pwd })];
            case 1:
                user = _a.sent();
                return [4 /*yield*/, authenticationClient.loginByUsername(username, pwd)];
            case 2:
                _a.sent();
                return [4 /*yield*/, managementClient.users.logout({
                        userId: user.id,
                        appId: testing_helper_1.getOptionsFromEnv().appId
                    })];
            case 3:
                res2 = _a.sent();
                t.assert(res2.code === 200);
                return [2 /*return*/];
        }
    });
}); });
ava_1.default('用户池管理员强制下线用户在所有应用的登录态', function (t) { return __awaiter(void 0, void 0, void 0, function () {
    var username, pwd, user, res2;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                username = Math.random()
                    .toString(26)
                    .slice(2);
                pwd = '123456';
                return [4 /*yield*/, managementClient.users.create({ username: username, password: pwd })];
            case 1:
                user = _a.sent();
                return [4 /*yield*/, authenticationClient.loginByUsername(username, pwd)];
            case 2:
                _a.sent();
                return [4 /*yield*/, managementClient.users.logout({
                        userId: user.id
                    })];
            case 3:
                res2 = _a.sent();
                t.assert(res2.code === 200);
                return [2 /*return*/];
        }
    });
}); });
ava_1.default.skip('statistics.listUserActions', function (t) { return __awaiter(void 0, void 0, void 0, function () {
    var data;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, managementClient.statistics.listUserActions()];
            case 1:
                data = _a.sent();
                console.log(data);
                t.assert(data);
                return [2 /*return*/];
        }
    });
}); });
ava_1.default.skip('users.listUserActions', function (t) { return __awaiter(void 0, void 0, void 0, function () {
    var data;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, managementClient.statistics.listUserActions()];
            case 1:
                data = _a.sent();
                console.log(data);
                t.assert(data);
                return [2 /*return*/];
        }
    });
}); });
ava_1.default('detail withCustomData', function (t) { return __awaiter(void 0, void 0, void 0, function () {
    var user;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, managementClient.users.detail('60e31b9b94b5795362256698', {
                    withCustomData: true
                })];
            case 1:
                user = _a.sent();
                console.log(JSON.stringify(user, null, 4));
                t.assert(user.customData);
                return [2 /*return*/];
        }
    });
}); });
ava_1.default('batch withCustomData', function (t) { return __awaiter(void 0, void 0, void 0, function () {
    var users;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, managementClient.users.batch(['60e31b9b94b5795362256698', '60e320959d6c08c325a3510f'], {
                    queryField: 'id',
                    withCustomData: true
                })];
            case 1:
                users = _a.sent();
                console.log(JSON.stringify(users, null, 4));
                t.assert(users);
                return [2 /*return*/];
        }
    });
}); });
ava_1.default.only('getUserTenants', function (t) { return __awaiter(void 0, void 0, void 0, function () {
    var tenants;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, managementClient.users.getUserTenants('6194bb53a6c4dca57363182c')];
            case 1:
                tenants = _a.sent();
                console.log(tenants);
                t.assert(tenants);
                return [2 /*return*/];
        }
    });
}); });
// test.only('linkIdentity', async t => {
//   const result = await managementClient.users.linkIdentity({
//     userId: '619b07826feaa09f07b598de',
//     userIdInIdp: 'zy001',
//     isSocial: true,
//     type: 'openid',
//     identifier: 'wechat',
//   });
//   console.log(result);
//   t.assert(result);
//
//
// });
//
// test.only('unlinkIdentity', async t => {
//   const result = await managementClient.users.unlinkIdentity({
//     userId: '619b07826feaa09f07b598de',
//     isSocial: true,
//     type: 'openid',
//     identifier: 'wechat',
//   });
//   console.log(result);
//   t.assert(result);
// });
ava_1.default('getApplicationLoginUserNum', function (t) { return __awaiter(void 0, void 0, void 0, function () {
    var res;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, managementClient.users.getApplicationLoginUserNum({
                    appId: '60ab28843baf2e2c075dbeae'
                })];
            case 1:
                res = _a.sent();
                t.assert(res);
                return [2 /*return*/];
        }
    });
}); });
ava_1.default('getUdfFieldUserNum', function (t) { return __awaiter(void 0, void 0, void 0, function () {
    var res;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, managementClient.users.getUdfFieldUserNum({
                    definedFieldKey: 'hep_isTeacher',
                    appId: '60ab28843baf2e2c075dbeae'
                })];
            case 1:
                res = _a.sent();
                t.assert(res);
                return [2 /*return*/];
        }
    });
}); });
//# sourceMappingURL=UsersManagementClient.spec.js.map