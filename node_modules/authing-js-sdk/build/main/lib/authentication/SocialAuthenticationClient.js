"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SocialAuthenticationClient = void 0;
var utils_1 = require("../utils");
var BaseAuthenticationClient_1 = require("./BaseAuthenticationClient");
/**
 * @class SocialAuthenticationClient 社会化登录模块
 * @description 此模块封装了社会化登录的功能，可以通过简洁的 API 快速使用社会化登录获取用户信息。
 *
 * 发起社会化登录授权请求：
 *
 * \`\`\`javascript
 * import { AuthenticationClient } from "authing-js-sdk"
 * const authenticationClient = new AuthenticationClient({
 *    appId: "YOUR_APP_ID",
 * })
 * await authenticationClient.social.authorize("github", {
 *    onSuccess: (user) => { console.log(user) },
 *    onError: (code, message) => {  }
 * })
 * \`\`\`
 *
 *
 * @name SocialAuthenticationClient
 */
var SocialAuthenticationClient = /** @class */ (function () {
    function SocialAuthenticationClient(options, tokenProvider, httpClient) {
        this.options = options;
        this.tokenProvider = tokenProvider;
        this.httpClient = httpClient;
        this.baseClient = new BaseAuthenticationClient_1.BaseAuthenticationClient(options);
    }
    /**
     * @name authorize
     * @name_zh 发送授权登录请求
     * @description 发送授权登录请求，该方法会直接打开一个新窗口，跳转到第三方社会化登录服务商（如 GitHub、微信、钉钉等）的登录授权页面，用户
     * 完成授权之后，会自动关闭此窗口，并触发 onSuccess 回调函数，通过此函数，你可以获取到用户信息。
     *
     * @param {string} provider 社会化登录服务商的标志。
     * @param {object} [options]
     * @param {boolean} [options.popup=true] 是否通过弹窗的方式打开社会化登录窗口，如果设置为 false，将会以 window.open 的方式打开一个新的浏览器  tab 。
     * @param {Function} [options.onSuccess] 用户同意授权事件回调函数，第一个参数为用户信息。
     * @param {Function} [options.onError] 社会化登录失败事件回调函数，第一个参数 code 为错误码，第二个参数 message 为错误提示。详细的错误码列表请见：详细说明请见：[Authing 错误代码列表](https://docs.authing.co/advanced/error-code.html)
     * @param {object} [options.position] 只有当 options.popup 为 ture 的时候有效，弹出窗口的位置，默认为 { w: 585, h: 649 } 。
     * @param {object} [options.authorizationParams] 请求时的额外参数
     *
     * @example
     *
     * // 使用 GitHub 登录
     *
     * const authenticationClient = new AuthenticationClient({
     *    appId: "YOUR_APP_ID",
     * })
     *
     * await authenticationClient.social.authorize("github", {
     *    onSuccess: (user) => { console.log(user) },
     *    onError: (code, message) => {  },
     *    // 自定义弹出窗口的位置
     *    position: {
     *      w: 100,
     *      h: 100
     *    }
     * })
     *
     * @example
     *
     * // 使用新建浏览器 tab 的形式打开社会化登录页面
     *
     * const authenticationClient = new AuthenticationClient({
     *    appId: "YOUR_APP_ID",
     * })
     *
     * await authenticationClient.social.authorize("github", {
     *    popup: false,
     *    onSuccess: (user) => { console.log(user) },
     *    onError: (code, message) => {  },
     * })
     *
     * @memberof SocialAuthenticationClient
     */
    SocialAuthenticationClient.prototype.authorize = function (provider, options) {
        var _this = this;
        options = options || {};
        var position = options.position, _a = options.popup, popup = _a === void 0 ? true : _a, onSuccess = options.onSuccess, onError = options.onError, authorization_params = options.authorization_params, authorizationParams = options.authorizationParams, context = options.context, customData = options.customData, _b = options.withIdentities, withIdentities = _b === void 0 ? false : _b, _c = options.protocol, protocol = _c === void 0 ? 'oidc' : _c, uuid = options.uuid, _d = options.withCustomData, withCustomData = _d === void 0 ? false : _d, targetUrl = options.targetUrl, relayMethod = options.relayMethod, guardVersion = options.guardVersion;
        // if (!uuid) {
        //   uuid = generateRandomString(20);
        // }
        var query = {
            from_guard: '1',
            app_id: this.options.appId,
            authorization_params: JSON.stringify(authorization_params || authorizationParams),
            with_identities: withIdentities ? '1' : '0',
            with_custom_data: withCustomData ? '1' : '0',
            protocol: protocol,
            uuid: uuid,
            target_url: targetUrl,
            relay_method: relayMethod,
            guard_version: guardVersion
        };
        if (context) {
            query.context = JSON.stringify(context);
        }
        if (this.options.tenantId) {
            query.tenant_id = this.options.tenantId;
        }
        if (customData) {
            query.custom_data = JSON.stringify(customData);
        }
        var url = this.baseClient.appHost + "/connections/social/" + provider + "?" + utils_1.serialize(query);
        var onMessage = function (e) {
            var _a = e.data, code = _a.code, message = _a.message, resData = _a.data, event = _a.event;
            event = event || {};
            var source = event.source, eventType = event.eventType;
            if (source !== 'authing' || eventType !== 'socialLogin') {
                return;
            }
            try {
                var parsedMsg = JSON.parse(message);
                code = parsedMsg.code;
            }
            catch (e) {
                // do nothing...
            }
            if (code === 200) {
                // 保存用户的 token
                _this.tokenProvider.setUser(resData);
                onSuccess && onSuccess(resData);
            }
            else {
                onError && onError(code, message, resData);
            }
            window.removeEventListener('message', onMessage);
        };
        window.addEventListener('message', onMessage);
        if (utils_1.isMobileBrowser()) {
            // 在微信内直接打开
            window.location.href = url;
        }
        else if (popup) {
            utils_1.popupCenter(url, position);
        }
        else {
            window.open(url);
        }
        return Promise.resolve();
    };
    return SocialAuthenticationClient;
}());
exports.SocialAuthenticationClient = SocialAuthenticationClient;
//# sourceMappingURL=SocialAuthenticationClient.js.map