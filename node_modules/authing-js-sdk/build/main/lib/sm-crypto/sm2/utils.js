"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.verifyPublicKey = exports.hexToArray = exports.arrayToUtf8 = exports.arrayToHex = exports.leftPad = exports.utf8ToHex = exports.generateKeyPairHex = exports.generateEcparam = exports.getGlobalCurve = void 0;
/* eslint-disable no-bitwise, no-mixed-operators, no-use-before-define, max-len */
var ec_1 = require("./ec");
var jsbn_1 = require("jsbn");
var rng = new jsbn_1.SecureRandom();
var _a = generateEcparam(), curve = _a.curve, G = _a.G, n = _a.n;
/**
 * 获取公共椭圆曲线
 */
function getGlobalCurve() {
    return curve;
}
exports.getGlobalCurve = getGlobalCurve;
/**
 * 生成ecparam
 */
function generateEcparam() {
    // 椭圆曲线
    var p = new jsbn_1.BigInteger('FFFFFFFEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00000000FFFFFFFFFFFFFFFF', 16);
    var a = new jsbn_1.BigInteger('FFFFFFFEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00000000FFFFFFFFFFFFFFFC', 16);
    var b = new jsbn_1.BigInteger('28E9FA9E9D9F5E344D5A9E4BCF6509A7F39789F515AB8F92DDBCBD414D940E93', 16);
    var curve = new ec_1.ECCurveFp(p, a, b);
    // 基点
    var gxHex = '32C4AE2C1F1981195F9904466A39C9948FE30BBFF2660BE1715A4589334C74C7';
    var gyHex = 'BC3736A2F4F6779C59BDCEE36B692153D0A9877CC62A474002DF32E52139F0A0';
    var G = curve.decodePointHex('04' + gxHex + gyHex);
    var n = new jsbn_1.BigInteger('FFFFFFFEFFFFFFFFFFFFFFFFFFFFFFFF7203DF6B21C6052B53BBF40939D54123', 16);
    return { curve: curve, G: G, n: n };
}
exports.generateEcparam = generateEcparam;
/**
 * 生成密钥对：publicKey = privateKey * G
 */
function generateKeyPairHex(a, b, c) {
    var random = a ? new jsbn_1.BigInteger(a, b, c) : new jsbn_1.BigInteger(n.bitLength(), rng);
    var d = random.mod(n.subtract(jsbn_1.BigInteger.ONE)).add(jsbn_1.BigInteger.ONE); // 随机数
    var privateKey = leftPad(d.toString(16), 64);
    var P = G.multiply(d); // P = dG，p 为公钥，d 为私钥
    var Px = leftPad(P.getX().toBigInteger().toString(16), 64);
    var Py = leftPad(P.getY().toBigInteger().toString(16), 64);
    var publicKey = '04' + Px + Py;
    return { privateKey: privateKey, publicKey: publicKey };
}
exports.generateKeyPairHex = generateKeyPairHex;
/**
 * utf8串转16进制串
 */
function utf8ToHex(input) {
    input = unescape(encodeURIComponent(input));
    var length = input.length;
    // 转换到字数组
    var words = [];
    for (var i = 0; i < length; i++) {
        words[i >>> 2] |= (input.charCodeAt(i) & 0xff) << (24 - (i % 4) * 8);
    }
    // 转换到16进制
    var hexChars = [];
    for (var i = 0; i < length; i++) {
        var bite = (words[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;
        hexChars.push((bite >>> 4).toString(16));
        hexChars.push((bite & 0x0f).toString(16));
    }
    return hexChars.join('');
}
exports.utf8ToHex = utf8ToHex;
/**
 * 补全16进制字符串
 */
function leftPad(input, num) {
    if (input.length >= num)
        return input;
    return (new Array(num - input.length + 1)).join('0') + input;
}
exports.leftPad = leftPad;
/**
 * 转成16进制串
 */
function arrayToHex(arr) {
    return arr.map(function (item) {
        item = item.toString(16);
        return item.length === 1 ? '0' + item : item;
    }).join('');
}
exports.arrayToHex = arrayToHex;
/**
 * 转成utf8串
 */
function arrayToUtf8(arr) {
    var words = [];
    var j = 0;
    for (var i = 0; i < arr.length * 2; i += 2) {
        words[i >>> 3] |= parseInt(arr[j], 10) << (24 - (i % 8) * 4);
        j++;
    }
    try {
        var latin1Chars = [];
        for (var i = 0; i < arr.length; i++) {
            var bite = (words[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;
            latin1Chars.push(String.fromCharCode(bite));
        }
        return decodeURIComponent(escape(latin1Chars.join('')));
    }
    catch (e) {
        throw new Error('Malformed UTF-8 data');
    }
}
exports.arrayToUtf8 = arrayToUtf8;
/**
 * 转成字节数组
 */
function hexToArray(hexStr) {
    var words = [];
    var hexStrLength = hexStr.length;
    if (hexStrLength % 2 !== 0) {
        hexStr = leftPad(hexStr, hexStrLength + 1);
    }
    hexStrLength = hexStr.length;
    for (var i = 0; i < hexStrLength; i += 2) {
        words.push(parseInt(hexStr.substr(i, 2), 16));
    }
    return words;
}
exports.hexToArray = hexToArray;
/**
 * 验证公钥是否为椭圆曲线上的点
 */
function verifyPublicKey(publicKey) {
    var point = curve.decodePointHex(publicKey);
    if (!point)
        return false;
    var x = point.getX();
    var y = point.getY();
    // 验证 y^2 是否等于 x^3 + ax + b
    return y.square().equals(x.multiply(x.square()).add(x.multiply(curve.a)).add(curve.b));
}
exports.verifyPublicKey = verifyPublicKey;
//# sourceMappingURL=utils.js.map