var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
import { ManagementClient } from './ManagementClient';
import test from 'ava';
import { ResourceType } from '../../types/graphql.v2';
import { generateRandomString } from '../testing-helper';
import { ApplicationType } from './types';
require('dotenv').config({
    path: '.env'
});
var APP_ID = '607543c1ec30828efb065adb';
var managementClient = new ManagementClient({
    userPoolId: process.env.AUTHING_USERPOOL_ID,
    secret: process.env.AUTHING_USERPOOL_SECRET,
    host: process.env.AUTHING_HOST
});
var applications = managementClient.applications;
test('list applications', function (t) { return __awaiter(void 0, void 0, void 0, function () {
    var _a, list, totalCount;
    return __generator(this, function (_b) {
        switch (_b.label) {
            case 0: return [4 /*yield*/, managementClient.applications.list()];
            case 1:
                _a = _b.sent(), list = _a.list, totalCount = _a.totalCount;
                console.log(list);
                t.assert(totalCount);
                t.assert(list.length);
                return [2 /*return*/];
        }
    });
}); });
test('applications findById', function (t) { return __awaiter(void 0, void 0, void 0, function () {
    var list, application;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, managementClient.applications.list()];
            case 1:
                list = (_a.sent()).list;
                return [4 /*yield*/, managementClient.applications.findById(list[0].id)];
            case 2:
                application = _a.sent();
                t.assert(application);
                t.assert(application.id);
                return [2 /*return*/];
        }
    });
}); });
test('资源', function (t) { return __awaiter(void 0, void 0, void 0, function () {
    var res;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, applications.listResources(APP_ID)];
            case 1:
                res = _a.sent();
                t.assert(Array.isArray(res.list));
                t.assert(Reflect.has(res, 'totalCount'));
                return [2 /*return*/];
        }
    });
}); });
test('创建资源', function (t) { return __awaiter(void 0, void 0, void 0, function () {
    var code, res;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                code = Math.random()
                    .toString(26)
                    .slice(2);
                return [4 /*yield*/, applications.createResource(APP_ID, {
                        code: code,
                        type: ResourceType.Data,
                        description: 'chair',
                        actions: [
                            {
                                name: 'book:write',
                                description: '图书写入操作'
                            }
                        ]
                    })];
            case 1:
                res = _a.sent();
                t.assert(Reflect.has(res, 'id'));
                return [2 /*return*/];
        }
    });
}); });
test('修改资源', function (t) { return __awaiter(void 0, void 0, void 0, function () {
    var code, res, updated;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                code = Math.random()
                    .toString(26)
                    .slice(2);
                return [4 /*yield*/, applications.createResource(APP_ID, {
                        code: code,
                        type: ResourceType.Data,
                        description: 'chair',
                        actions: [
                            {
                                name: 'book:write',
                                description: '图书写入操作'
                            }
                        ]
                    })];
            case 1:
                res = _a.sent();
                t.assert(Reflect.has(res, 'id'));
                return [4 /*yield*/, applications.updateResource(APP_ID, {
                        code: code,
                        description: '新的描述',
                        type: ResourceType.Api,
                        actions: [
                            { name: 'cardiovascular', description: '心血管的' },
                            { name: 'surge', description: '激增' }
                        ]
                    })];
            case 2:
                updated = _a.sent();
                t.assert(updated.id);
                t.assert(updated.actions[0].name === 'cardiovascular');
                t.assert(updated.actions[0].description === '心血管的');
                t.assert(updated.actions[1].name === 'surge');
                t.assert(updated.actions[1].description === '激增');
                t.assert(updated.description === '新的描述');
                return [2 /*return*/];
        }
    });
}); });
test('删除资源', function (t) { return __awaiter(void 0, void 0, void 0, function () {
    var code, res, deleted;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                code = Math.random()
                    .toString(26)
                    .slice(2);
                return [4 /*yield*/, applications.createResource(APP_ID, {
                        code: code,
                        type: ResourceType.Data,
                        description: 'chair',
                        actions: [
                            {
                                name: 'book:write',
                                description: '图书写入操作'
                            }
                        ]
                    })];
            case 1:
                res = _a.sent();
                t.assert(Reflect.has(res, 'id'));
                return [4 /*yield*/, applications.deleteResource(APP_ID, code)];
            case 2:
                deleted = _a.sent();
                t.assert(deleted);
                return [2 /*return*/];
        }
    });
}); });
test('获取应用访问控制策略', function (t) { return __awaiter(void 0, void 0, void 0, function () {
    var list;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, applications.getAccessPolicies(APP_ID)];
            case 1:
                list = _a.sent();
                t.assert(Array.isArray(list.list));
                t.assert(typeof list.totalCount === 'number');
                return [2 /*return*/];
        }
    });
}); });
test('配置「允许主体（用户、角色、分组、组织机构节点）访问应用」的控制策略', function (t) { return __awaiter(void 0, void 0, void 0, function () {
    var username, pwd, user, res, res2;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                username = Math.random()
                    .toString(26)
                    .slice(2);
                pwd = '123456';
                return [4 /*yield*/, managementClient.users.create({ username: username, password: pwd })];
            case 1:
                user = _a.sent();
                return [4 /*yield*/, applications.allowAccess(APP_ID, {
                        targetType: 'USER',
                        targetIdentifiers: [user.id]
                    })];
            case 2:
                res = _a.sent();
                t.assert(res.code === 200);
                return [4 /*yield*/, applications.getAccessPolicies(APP_ID)];
            case 3:
                res2 = _a.sent();
                t.truthy(res2.list.find(function (v) { return v.targetIdentifier === user.id; }));
                return [2 /*return*/];
        }
    });
}); });
test('启用应用访问控制策略', function (t) { return __awaiter(void 0, void 0, void 0, function () {
    var username, pwd, user, res;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                username = Math.random()
                    .toString(26)
                    .slice(2);
                pwd = '123456';
                return [4 /*yield*/, managementClient.users.create({ username: username, password: pwd })];
            case 1:
                user = _a.sent();
                return [4 /*yield*/, applications.allowAccess(APP_ID, {
                        targetType: 'USER',
                        targetIdentifiers: [user.id]
                    })];
            case 2:
                _a.sent();
                return [4 /*yield*/, applications.enableAccessPolicy(APP_ID, {
                        targetType: 'USER',
                        targetIdentifiers: [user.id]
                    })];
            case 3:
                res = _a.sent();
                t.assert(res.code === 200);
                return [2 /*return*/];
        }
    });
}); });
test('配置「拒绝主体（用户、角色、分组、组织机构节点）访问应用」的控制策略', function (t) { return __awaiter(void 0, void 0, void 0, function () {
    var username, pwd, user, res, res2;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                username = Math.random()
                    .toString(26)
                    .slice(2);
                pwd = '123456';
                return [4 /*yield*/, managementClient.users.create({ username: username, password: pwd })];
            case 1:
                user = _a.sent();
                return [4 /*yield*/, applications.denyAccess(APP_ID, {
                        targetType: 'USER',
                        targetIdentifiers: [user.id]
                    })];
            case 2:
                res = _a.sent();
                t.assert(res.code === 200);
                return [4 /*yield*/, applications.getAccessPolicies(APP_ID)];
            case 3:
                res2 = _a.sent();
                t.truthy(res2.list.find(function (v) { return v.targetIdentifier === user.id; }));
                return [2 /*return*/];
        }
    });
}); });
test('更改默认应用访问策略（默认拒绝所有用户访问应用、默认允许所有用户访问应用）', function (t) { return __awaiter(void 0, void 0, void 0, function () {
    var res2, res3;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, applications.updateDefaultAccessPolicy(APP_ID, 'DENY_ALL')];
            case 1:
                res2 = _a.sent();
                t.assert(res2.permissionStrategy.defaultStrategy === 'DENY_ALL');
                return [4 /*yield*/, applications.updateDefaultAccessPolicy(APP_ID, 'ALLOW_ALL')];
            case 2:
                res3 = _a.sent();
                t.assert(res3.permissionStrategy.defaultStrategy === 'ALLOW_ALL');
                return [2 /*return*/];
        }
    });
}); });
test('创建角色', function (t) { return __awaiter(void 0, void 0, void 0, function () {
    var code, role, roleInfo;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                code = generateRandomString(5);
                return [4 /*yield*/, applications.createRole(APP_ID, {
                        code: code
                    })];
            case 1:
                role = _a.sent();
                return [4 /*yield*/, applications.findRole(APP_ID, code)];
            case 2:
                roleInfo = _a.sent();
                t.assert(role.code === roleInfo.code);
                t.assert(role.code === code);
                return [2 /*return*/];
        }
    });
}); });
test('更新角色', function (t) { return __awaiter(void 0, void 0, void 0, function () {
    var code, description, role, newCode, roleUpdatedCode;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                code = generateRandomString(5);
                return [4 /*yield*/, applications.createRole(APP_ID, { code: code })];
            case 1:
                _a.sent();
                description = generateRandomString(10);
                return [4 /*yield*/, applications.updateRole(APP_ID, {
                        code: code,
                        description: description
                    })];
            case 2:
                role = _a.sent();
                t.assert(role.description === description);
                newCode = generateRandomString();
                return [4 /*yield*/, applications.updateRole(APP_ID, {
                        code: code,
                        newCode: newCode,
                        description: description
                    })];
            case 3:
                roleUpdatedCode = _a.sent();
                t.assert(roleUpdatedCode.code === newCode);
                return [2 /*return*/];
        }
    });
}); });
test('查询角色详情', function (t) { return __awaiter(void 0, void 0, void 0, function () {
    var code, role;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                code = generateRandomString(5);
                return [4 /*yield*/, applications.createRole(APP_ID, { code: code })];
            case 1:
                _a.sent();
                return [4 /*yield*/, applications.findRole(APP_ID, code)];
            case 2:
                role = _a.sent();
                t.assert(role);
                t.assert(role.code === code);
                return [2 /*return*/];
        }
    });
}); });
test('删除角色', function (t) { return __awaiter(void 0, void 0, void 0, function () {
    var code, role;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                code = generateRandomString(5);
                return [4 /*yield*/, applications.createRole(APP_ID, { code: code })];
            case 1:
                _a.sent();
                return [4 /*yield*/, applications.deleteRole(APP_ID, code)];
            case 2:
                _a.sent();
                return [4 /*yield*/, applications.findRole(APP_ID, code)];
            case 3:
                role = _a.sent();
                t.assert(!role);
                return [2 /*return*/];
        }
    });
}); });
test('批量删除角色', function (t) { return __awaiter(void 0, void 0, void 0, function () {
    var index, codes, code, role;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                index = 0;
                codes = [];
                _a.label = 1;
            case 1:
                if (!(index < 3)) return [3 /*break*/, 3];
                code = generateRandomString(5);
                return [4 /*yield*/, applications.createRole(APP_ID, { code: code })];
            case 2:
                _a.sent();
                codes.push();
                index++;
                return [3 /*break*/, 1];
            case 3: return [4 /*yield*/, applications.deleteRoles(APP_ID, codes)];
            case 4:
                role = _a.sent();
                t.assert(role.code === 200);
                return [2 /*return*/];
        }
    });
}); });
test('查询空 Code 的角色', function (t) { return __awaiter(void 0, void 0, void 0, function () {
    var code, role;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                code = generateRandomString(5);
                return [4 /*yield*/, applications.findRole(APP_ID, code)];
            case 1:
                role = _a.sent();
                t.assert(!role);
                return [2 /*return*/];
        }
    });
}); });
test('listAuthorizedResources', function (t) { return __awaiter(void 0, void 0, void 0, function () {
    var code, data;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                code = generateRandomString(5);
                return [4 /*yield*/, applications.createRole(APP_ID, { code: code })];
            case 1:
                _a.sent();
                return [4 /*yield*/, applications.listAuthorizedResourcesByRole(APP_ID, code, ResourceType.Data)];
            case 2:
                data = _a.sent();
                t.assert(data);
                return [2 /*return*/];
        }
    });
}); });
test('创建注册协议', function (t) { return __awaiter(void 0, void 0, void 0, function () {
    var title;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, applications.createAgreement(APP_ID, {
                    title: 'A test agreement',
                    required: true
                })];
            case 1:
                title = (_a.sent()).title;
                t.assert(title === 'A test agreement');
                return [2 /*return*/];
        }
    });
}); });
test('修改注册协议', function (t) { return __awaiter(void 0, void 0, void 0, function () {
    var id, title;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, applications.createAgreement(APP_ID, {
                    title: 'test',
                    required: true
                })];
            case 1:
                id = (_a.sent()).id;
                return [4 /*yield*/, applications.modifyAgreement(APP_ID, id, {
                        title: 'new test'
                    })];
            case 2:
                title = (_a.sent()).title;
                t.assert(title === 'new test');
                return [2 /*return*/];
        }
    });
}); });
test('注册协议排序', function (t) { return __awaiter(void 0, void 0, void 0, function () {
    var prevOrder, newOrder, ordered;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, Promise.all(['name1', 'name2', 'name3', 'name4'].map(function (name) {
                    return applications.createAgreement(APP_ID, {
                        title: name,
                        required: true
                    });
                }))];
            case 1:
                _a.sent();
                return [4 /*yield*/, applications.listAgreement(APP_ID)];
            case 2:
                prevOrder = (_a.sent()).list.map(function (item) { return item.id; });
                newOrder = prevOrder.sort(function () { return (Math.random() > 0.5 ? 1 : -1); });
                return [4 /*yield*/, applications.sortAgreement(APP_ID, newOrder)];
            case 3:
                _a.sent();
                return [4 /*yield*/, applications.listAgreement(APP_ID)];
            case 4:
                ordered = (_a.sent()).list.map(function (item) { return item.id; });
                t.assert(newOrder.join('') === ordered.join(''));
                return [2 /*return*/];
        }
    });
}); });
test.serial('删除注册协议和注册协议列表', function (t) { return __awaiter(void 0, void 0, void 0, function () {
    var id, oldLength, newLength;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, applications.createAgreement(APP_ID, {
                    title: '要删除的',
                    required: true
                })];
            case 1:
                id = (_a.sent()).id;
                return [4 /*yield*/, applications.listAgreement(APP_ID)];
            case 2:
                oldLength = (_a.sent()).totalCount;
                return [4 /*yield*/, applications.deleteAgreement(APP_ID, id)];
            case 3:
                _a.sent();
                return [4 /*yield*/, applications.listAgreement(APP_ID)];
            case 4:
                newLength = (_a.sent()).totalCount;
                t.assert(oldLength - 1 === newLength);
                return [2 /*return*/];
        }
    });
}); });
test('changeTenantConfig', function (t) { return __awaiter(void 0, void 0, void 0, function () {
    var result;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, applications.changeApplicationType('6194a3c595908f00ff698d3a', ApplicationType.BOTH)];
            case 1:
                result = _a.sent();
                console.log(result);
                t.assert(result.appType === ApplicationType.BOTH);
                return [2 /*return*/];
        }
    });
}); });
test('applicationTenants', function (t) { return __awaiter(void 0, void 0, void 0, function () {
    var result;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, applications.applicationTenants('6194a3c595908f00ff698d3a')];
            case 1:
                result = _a.sent();
                console.log(result);
                t.assert(result.tenants);
                return [2 /*return*/];
        }
    });
}); });
//# sourceMappingURL=ApplicationsManagementClient.spec.js.map