function str2ab(str) {
    var buf = new ArrayBuffer(str.length);
    var bufView = new Uint8Array(buf);
    for (var i = 0, strLen = str.length; i < strLen; i++) {
        bufView[i] = str.charCodeAt(i);
    }
    return buf;
}
function importECDHES(pem) {
    // fetch the part of the PEM string between header and footer
    var pemHeader = '-----BEGIN PRIVATE KEY-----';
    var pemFooter = '-----END PRIVATE KEY-----';
    var pemContents = pem.substring(pemHeader.length, pem.length - pemFooter.length);
    // base64 decode the string to get the binary data
    var binaryDerString = window.atob(pemContents);
    // convert from a binary string to an ArrayBuffer
    var binaryDer = str2ab(binaryDerString);
    return window.crypto.subtle.importKey('pkcs8', binaryDer, {
        name: 'ECDH',
        namedCurve: 'P-256',
    }, true, ['deriveBits']);
}
function importRSAOAEP(pem) {
    // fetch the part of the PEM string between header and footer
    var pemHeader = '-----BEGIN PRIVATE KEY-----';
    var pemFooter = '-----END PRIVATE KEY-----';
    var pemContents = pem.substring(pemHeader.length, pem.length - pemFooter.length);
    // base64 decode the string to get the binary data
    var binaryDerString = window.atob(pemContents);
    // convert from a binary string to an ArrayBuffer
    var binaryDer = str2ab(binaryDerString);
    return window.crypto.subtle.importKey('pkcs8', binaryDer, {
        name: 'RSA-OAEP',
        hash: 'SHA-1',
    }, true, ['decrypt']);
}
function importHS256(key) {
    var binaryDer = str2ab(key);
    return window.crypto.subtle.importKey('raw', binaryDer, {
        name: 'HMAC',
        hash: 'SHA-256',
    }, true, ['verify']);
}
function importAESKW(key) {
    var buf = str2ab(key);
    return window.crypto.subtle.importKey('raw', buf, 'AES-KW', true, ['unwrapKey']);
}
export { importECDHES, importRSAOAEP, importHS256, importAESKW };
//# sourceMappingURL=BrowserKeyImportHelper.js.map