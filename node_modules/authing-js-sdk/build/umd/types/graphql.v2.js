(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define(["require", "exports"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.WhitelistDocument = exports.UsersWithCustomDataDocument = exports.UsersDocument = exports.UserpoolsDocument = exports.UserpoolTypesDocument = exports.UserpoolDocument = exports.UserWithCustomDataDocument = exports.UserBatchWithCustomDataDocument = exports.UserBatchDocument = exports.UserDocument = exports.UdvDocument = exports.UdfValueBatchDocument = exports.UdfDocument = exports.TemplateCodeDocument = exports.SearchUserWithCustomDataDocument = exports.SearchUserDocument = exports.SearchNodesDocument = exports.RootNodeDocument = exports.RolesDocument = exports.RoleWithUsersWithCustomDataDocument = exports.RoleWithUsersDocument = exports.RoleDocument = exports.QueryMfaDocument = exports.QiniuUptokenDocument = exports.PreviewEmailDocument = exports.PolicyWithAssignmentsDocument = exports.PolicyAssignmentsDocument = exports.PolicyDocument = exports.PoliciesDocument = exports.OrgsDocument = exports.OrgDocument = exports.NodeByIdWithMembersDocument = exports.NodeByIdDocument = exports.NodeByCodeWithMembersDocument = exports.NodeByCodeDocument = exports.ListUserAuthorizedResourcesDocument = exports.ListRoleAuthorizedResourcesDocument = exports.ListNodeByIdAuthorizedResourcesDocument = exports.ListNodeByCodeAuthorizedResourcesDocument = exports.ListGroupAuthorizedResourcesDocument = exports.AuthorizedResourcesDocument = exports.IsUserExistsDocument = exports.IsRootNodeDocument = exports.IsDomainAvaliableDocument = exports.IsActionDeniedDocument = exports.IsActionAllowedDocument = exports.GroupsDocument = exports.GroupWithUsersWithCustomDataDocument = exports.GroupWithUsersDocument = exports.GroupDocument = exports.GetUserRolesDocument = exports.GetUserGroupsDocument = exports.GetUserDepartmentsDocument = exports.FunctionsDocument = exports.FunctionDocument = exports.FindUserWithCustomDataDocument = exports.FindUserDocument = exports.EmailTemplatesDocument = exports.ChildrenNodesDocument = exports.CheckPasswordStrengthDocument = exports.CheckLoginStatusDocument = exports.AuthorizedTargetsDocument = exports.ArchivedUsersDocument = exports.AccessTokenDocument = exports.UpdateUserpoolDocument = exports.UpdateUserDocument = exports.UpdateRoleDocument = exports.UpdatePolicyDocument = exports.UpdatePhoneDocument = exports.UpdatePasswordDocument = exports.UpdateNodeDocument = exports.UpdateGroupDocument = exports.UpdateFunctionDocument = exports.UpdateEmailDocument = exports.UnbindPhoneDocument = exports.UnbindEmailDocument = exports.SetUdvBatchDocument = exports.SetUdvDocument = exports.SetUdfValueBatchDocument = exports.SetUdfDocument = exports.SetMainDepartmentDocument = exports.SendFirstLoginVerifyEmailDocument = exports.SendEmailDocument = exports.RevokeRoleDocument = exports.ResetPasswordByForceResetTokenDocument = exports.ResetPasswordByFirstLoginTokenDocument = exports.ResetPasswordDocument = exports.RemoveWhitelistDocument = exports.RemoveUserFromGroupDocument = exports.RemoveUdvDocument = exports.RemoveUdfDocument = exports.RemovePolicyAssignmentsDocument = exports.RemoveMemberDocument = exports.RegisterByUsernameDocument = exports.RegisterByPhoneCodeDocument = exports.RegisterByEmailDocument = exports.RefreshUserpoolSecretDocument = exports.RefreshTokenDocument = exports.RefreshAccessTokenDocument = exports.MoveNodeDocument = exports.MoveMembersDocument = exports.LoginByUsernameDocument = exports.LoginBySubAccountDocument = exports.LoginByPhonePasswordDocument = exports.LoginByPhoneCodeDocument = exports.LoginByEmailDocument = exports.EnablePolicyAssignmentDocument = exports.EnableEmailTemplateDocument = exports.DisbalePolicyAssignmentDocument = exports.DisableEmailTemplateDocument = exports.DeleteUsersDocument = exports.DeleteUserpoolDocument = exports.DeleteUserDocument = exports.DeleteRolesDocument = exports.DeleteRoleDocument = exports.DeletePolicyDocument = exports.DeletePoliciesDocument = exports.DeleteOrgDocument = exports.DeleteNodeDocument = exports.DeleteGroupsDocument = exports.DeleteFunctionDocument = exports.CreateUserpoolDocument = exports.CreateUserWithCustomDataDocument = exports.CreateUserDocument = exports.CreateRoleDocument = exports.CreatePolicyDocument = exports.CreateOrgDocument = exports.CreateGroupDocument = exports.CreateFunctionDocument = exports.ConfigEmailTemplateDocument = exports.ChangeMfaDocument = exports.BindPhoneDocument = exports.BindEmailDocument = exports.AuthorizeResourceDocument = exports.AssignRoleDocument = exports.AllowDocument = exports.AddWhitelistDocument = exports.AddUserToGroupDocument = exports.AddPolicyAssignmentsDocument = exports.AddNodeV2Document = exports.AddNodeDocument = exports.AddMemberDocument = exports.EmailScene = exports.WhitelistType = exports.UdfTargetType = exports.PolicyEffect = exports.UdfDataType = exports.UserStatus = exports.SortByEnum = exports.EmailTemplateType = exports.Operator = exports.PolicyAssignmentTargetType = exports.ResourceType = void 0;
    var ResourceType;
    (function (ResourceType) {
        ResourceType["Data"] = "DATA";
        ResourceType["Api"] = "API";
        ResourceType["Menu"] = "MENU";
        ResourceType["Ui"] = "UI";
        ResourceType["Button"] = "BUTTON";
    })(ResourceType = exports.ResourceType || (exports.ResourceType = {}));
    var PolicyAssignmentTargetType;
    (function (PolicyAssignmentTargetType) {
        PolicyAssignmentTargetType["User"] = "USER";
        PolicyAssignmentTargetType["Role"] = "ROLE";
        PolicyAssignmentTargetType["Group"] = "GROUP";
        PolicyAssignmentTargetType["Org"] = "ORG";
        PolicyAssignmentTargetType["AkSk"] = "AK_SK";
    })(PolicyAssignmentTargetType = exports.PolicyAssignmentTargetType || (exports.PolicyAssignmentTargetType = {}));
    var Operator;
    (function (Operator) {
        Operator["And"] = "AND";
        Operator["Or"] = "OR";
    })(Operator = exports.Operator || (exports.Operator = {}));
    var EmailTemplateType;
    (function (EmailTemplateType) {
        /** 重置密码确认 */
        EmailTemplateType["ResetPassword"] = "RESET_PASSWORD";
        /** 重置密码通知 */
        EmailTemplateType["PasswordResetedNotification"] = "PASSWORD_RESETED_NOTIFICATION";
        /** 修改密码验证码 */
        EmailTemplateType["ChangePassword"] = "CHANGE_PASSWORD";
        /** 注册欢迎邮件 */
        EmailTemplateType["Welcome"] = "WELCOME";
        /** 验证邮箱 */
        EmailTemplateType["VerifyEmail"] = "VERIFY_EMAIL";
        /** 修改绑定邮箱 */
        EmailTemplateType["ChangeEmail"] = "CHANGE_EMAIL";
    })(EmailTemplateType = exports.EmailTemplateType || (exports.EmailTemplateType = {}));
    var SortByEnum;
    (function (SortByEnum) {
        /** 按照创建时间降序（后创建的在前面） */
        SortByEnum["CreatedatDesc"] = "CREATEDAT_DESC";
        /** 按照创建时间升序（先创建的在前面） */
        SortByEnum["CreatedatAsc"] = "CREATEDAT_ASC";
        /** 按照更新时间降序（最近更新的在前面） */
        SortByEnum["UpdatedatDesc"] = "UPDATEDAT_DESC";
        /** 按照更新时间升序（最近更新的在后面） */
        SortByEnum["UpdatedatAsc"] = "UPDATEDAT_ASC";
    })(SortByEnum = exports.SortByEnum || (exports.SortByEnum = {}));
    var UserStatus;
    (function (UserStatus) {
        /** 已停用 */
        UserStatus["Suspended"] = "Suspended";
        /** 已离职 */
        UserStatus["Resigned"] = "Resigned";
        /** 已激活（正常状态） */
        UserStatus["Activated"] = "Activated";
        /** 已归档 */
        UserStatus["Archived"] = "Archived";
    })(UserStatus = exports.UserStatus || (exports.UserStatus = {}));
    var UdfDataType;
    (function (UdfDataType) {
        UdfDataType["String"] = "STRING";
        UdfDataType["Number"] = "NUMBER";
        UdfDataType["Datetime"] = "DATETIME";
        UdfDataType["Boolean"] = "BOOLEAN";
        UdfDataType["Object"] = "OBJECT";
        UdfDataType["Select"] = "SELECT";
    })(UdfDataType = exports.UdfDataType || (exports.UdfDataType = {}));
    var PolicyEffect;
    (function (PolicyEffect) {
        PolicyEffect["Allow"] = "ALLOW";
        PolicyEffect["Deny"] = "DENY";
    })(PolicyEffect = exports.PolicyEffect || (exports.PolicyEffect = {}));
    var UdfTargetType;
    (function (UdfTargetType) {
        UdfTargetType["Node"] = "NODE";
        UdfTargetType["Org"] = "ORG";
        UdfTargetType["User"] = "USER";
        UdfTargetType["Userpool"] = "USERPOOL";
        UdfTargetType["Role"] = "ROLE";
        UdfTargetType["Permission"] = "PERMISSION";
        UdfTargetType["Application"] = "APPLICATION";
    })(UdfTargetType = exports.UdfTargetType || (exports.UdfTargetType = {}));
    var WhitelistType;
    (function (WhitelistType) {
        WhitelistType["Username"] = "USERNAME";
        WhitelistType["Email"] = "EMAIL";
        WhitelistType["Phone"] = "PHONE";
    })(WhitelistType = exports.WhitelistType || (exports.WhitelistType = {}));
    /** 邮件使用场景 */
    var EmailScene;
    (function (EmailScene) {
        /** 发送重置密码邮件，邮件中包含验证码 */
        EmailScene["ResetPassword"] = "RESET_PASSWORD";
        // - 重置密码验证码
        EmailScene["RESET_PASSWORD_VERIFY_CODE"] = "RESET_PASSWORD_VERIFY_CODE";
        /** 发送验证邮箱的邮件 */
        EmailScene["VerifyEmail"] = "VERIFY_EMAIL";
        // - 首次邮箱登录验证
        EmailScene["FIRST_EMAIL_LOGIN_VERIFY"] = "FIRST_EMAIL_LOGIN_VERIFY";
        // - 在控制台发起验证
        EmailScene["CONSOLE_CONDUCTED_VERIFY"] = "CONSOLE_CONDUCTED_VERIFY";
        /** 发送修改邮箱邮件，邮件中包含验证码 */
        EmailScene["ChangeEmail"] = "CHANGE_EMAIL";
        // - 邮箱绑定验证码
        EmailScene["EMAIL_BIND_VERIFY_CODE"] = "EMAIL_BIND_VERIFY_CODE";
        // - 邮箱解绑验证码
        EmailScene["EMAIL_UNBIND_VERIFY_CODE"] = "EMAIL_UNBIND_VERIFY_CODE";
        /** 发送 MFA 验证邮件 */
        EmailScene["MfaVerify"] = "MFA_VERIFY";
        /** 发送邮件验证码 */
        EmailScene["VerifyCode"] = "VERIFY_CODE";
        // - 注册验证码
        EmailScene["REGISTER_VERIFY_CODE"] = "REGISTER_VERIFY_CODE";
        // - 登录验证码
        EmailScene["LOGIN_VERIFY_CODE"] = "LOGIN_VERIFY_CODE";
        // - MFA 验证
        EmailScene["MFA_VERIFY_CODE"] = "MFA_VERIFY_CODE";
        // - 信息补全验证码
        EmailScene["INFORMATION_COMPLETION_VERIFY_CODE"] = "INFORMATION_COMPLETION_VERIFY_CODE";
    })(EmailScene = exports.EmailScene || (exports.EmailScene = {}));
    exports.AddMemberDocument = "\n    mutation addMember($page: Int, $limit: Int, $sortBy: SortByEnum, $includeChildrenNodes: Boolean, $nodeId: String, $orgId: String, $nodeCode: String, $userIds: [String!]!, $isLeader: Boolean) {\n  addMember(nodeId: $nodeId, orgId: $orgId, nodeCode: $nodeCode, userIds: $userIds, isLeader: $isLeader) {\n    id\n    orgId\n    name\n    nameI18n\n    description\n    descriptionI18n\n    order\n    code\n    root\n    depth\n    path\n    createdAt\n    updatedAt\n    children\n    users(page: $page, limit: $limit, sortBy: $sortBy, includeChildrenNodes: $includeChildrenNodes) {\n      totalCount\n      list {\n        id\n        arn\n        userPoolId\n        username\n        status\n        email\n        emailVerified\n        phone\n        phoneVerified\n        unionid\n        openid\n        nickname\n        registerSource\n        photo\n        password\n        oauth\n        token\n        tokenExpiredAt\n        loginsCount\n        lastLogin\n        lastIP\n        signedUp\n        blocked\n        isDeleted\n        device\n        browser\n        company\n        name\n        givenName\n        familyName\n        middleName\n        profile\n        preferredUsername\n        website\n        gender\n        birthdate\n        zoneinfo\n        locale\n        address\n        formatted\n        streetAddress\n        locality\n        region\n        postalCode\n        city\n        province\n        country\n        createdAt\n        updatedAt\n        externalId\n        phoneCountryCode\n      }\n    }\n  }\n}\n    ";
    exports.AddNodeDocument = "\n    mutation addNode($orgId: String!, $parentNodeId: String, $name: String!, $nameI18n: String, $description: String, $descriptionI18n: String, $order: Int, $code: String) {\n  addNode(orgId: $orgId, parentNodeId: $parentNodeId, name: $name, nameI18n: $nameI18n, description: $description, descriptionI18n: $descriptionI18n, order: $order, code: $code) {\n    id\n    rootNode {\n      id\n      orgId\n      name\n      nameI18n\n      description\n      descriptionI18n\n      order\n      code\n      root\n      depth\n      path\n      createdAt\n      updatedAt\n      children\n    }\n    nodes {\n      id\n      orgId\n      name\n      nameI18n\n      description\n      descriptionI18n\n      order\n      code\n      root\n      depth\n      path\n      createdAt\n      updatedAt\n      children\n    }\n  }\n}\n    ";
    exports.AddNodeV2Document = "\n    mutation addNodeV2($orgId: String!, $parentNodeId: String, $name: String!, $nameI18n: String, $description: String, $descriptionI18n: String, $order: Int, $code: String) {\n  addNodeV2(orgId: $orgId, parentNodeId: $parentNodeId, name: $name, nameI18n: $nameI18n, description: $description, descriptionI18n: $descriptionI18n, order: $order, code: $code) {\n    id\n    orgId\n    name\n    nameI18n\n    description\n    descriptionI18n\n    order\n    code\n    root\n    depth\n    path\n    createdAt\n    updatedAt\n    children\n  }\n}\n    ";
    exports.AddPolicyAssignmentsDocument = "\n    mutation addPolicyAssignments($policies: [String!]!, $targetType: PolicyAssignmentTargetType!, $targetIdentifiers: [String!], $inheritByChildren: Boolean, $namespace: String) {\n  addPolicyAssignments(policies: $policies, targetType: $targetType, targetIdentifiers: $targetIdentifiers, inheritByChildren: $inheritByChildren, namespace: $namespace) {\n    message\n    code\n  }\n}\n    ";
    exports.AddUserToGroupDocument = "\n    mutation addUserToGroup($userIds: [String!]!, $code: String) {\n  addUserToGroup(userIds: $userIds, code: $code) {\n    message\n    code\n  }\n}\n    ";
    exports.AddWhitelistDocument = "\n    mutation addWhitelist($type: WhitelistType!, $list: [String!]!) {\n  addWhitelist(type: $type, list: $list) {\n    createdAt\n    updatedAt\n    value\n  }\n}\n    ";
    exports.AllowDocument = "\n    mutation allow($resource: String!, $action: String!, $userId: String, $userIds: [String!], $roleCode: String, $roleCodes: [String!], $namespace: String) {\n  allow(resource: $resource, action: $action, userId: $userId, userIds: $userIds, roleCode: $roleCode, roleCodes: $roleCodes, namespace: $namespace) {\n    message\n    code\n  }\n}\n    ";
    exports.AssignRoleDocument = "\n    mutation assignRole($namespace: String, $roleCode: String, $roleCodes: [String], $userIds: [String!], $groupCodes: [String!], $nodeCodes: [String!]) {\n  assignRole(namespace: $namespace, roleCode: $roleCode, roleCodes: $roleCodes, userIds: $userIds, groupCodes: $groupCodes, nodeCodes: $nodeCodes) {\n    message\n    code\n  }\n}\n    ";
    exports.AuthorizeResourceDocument = "\n    mutation authorizeResource($namespace: String, $resource: String, $resourceType: ResourceType, $opts: [AuthorizeResourceOpt]) {\n  authorizeResource(namespace: $namespace, resource: $resource, resourceType: $resourceType, opts: $opts) {\n    code\n    message\n  }\n}\n    ";
    exports.BindEmailDocument = "\n    mutation bindEmail($email: String!, $emailCode: String!) {\n  bindEmail(email: $email, emailCode: $emailCode) {\n    id\n    arn\n    userPoolId\n    status\n    username\n    email\n    emailVerified\n    phone\n    phoneVerified\n    unionid\n    openid\n    nickname\n    registerSource\n    photo\n    password\n    oauth\n    token\n    tokenExpiredAt\n    loginsCount\n    lastLogin\n    lastIP\n    signedUp\n    blocked\n    isDeleted\n    device\n    browser\n    company\n    name\n    givenName\n    familyName\n    middleName\n    profile\n    preferredUsername\n    website\n    gender\n    birthdate\n    zoneinfo\n    locale\n    address\n    formatted\n    streetAddress\n    locality\n    region\n    postalCode\n    city\n    province\n    country\n    createdAt\n    updatedAt\n    phoneCountryCode\n  }\n}\n    ";
    exports.BindPhoneDocument = "\n    mutation bindPhone($phone: String!, $phoneCode: String!, $phoneCountryCode: String) {\n  bindPhone(phone: $phone, phoneCode: $phoneCode, phoneCountryCode: $phoneCountryCode) {\n    id\n    arn\n    userPoolId\n    status\n    username\n    email\n    emailVerified\n    phone\n    phoneVerified\n    unionid\n    openid\n    nickname\n    registerSource\n    photo\n    password\n    oauth\n    token\n    tokenExpiredAt\n    loginsCount\n    lastLogin\n    lastIP\n    signedUp\n    blocked\n    isDeleted\n    device\n    browser\n    company\n    name\n    givenName\n    familyName\n    middleName\n    profile\n    preferredUsername\n    website\n    gender\n    birthdate\n    zoneinfo\n    locale\n    address\n    formatted\n    streetAddress\n    locality\n    region\n    postalCode\n    city\n    province\n    country\n    createdAt\n    updatedAt\n    phoneCountryCode\n  }\n}\n    ";
    exports.ChangeMfaDocument = "\n    mutation changeMfa($enable: Boolean, $id: String, $userId: String, $userPoolId: String, $refresh: Boolean) {\n  changeMfa(enable: $enable, id: $id, userId: $userId, userPoolId: $userPoolId, refresh: $refresh) {\n    id\n    userId\n    userPoolId\n    enable\n    secret\n  }\n}\n    ";
    exports.ConfigEmailTemplateDocument = "\n    mutation configEmailTemplate($input: ConfigEmailTemplateInput!) {\n  configEmailTemplate(input: $input) {\n    type\n    name\n    subject\n    sender\n    content\n    redirectTo\n    hasURL\n    expiresIn\n    enabled\n    isSystem\n  }\n}\n    ";
    exports.CreateFunctionDocument = "\n    mutation createFunction($input: CreateFunctionInput!) {\n  createFunction(input: $input) {\n    id\n    name\n    sourceCode\n    description\n    url\n  }\n}\n    ";
    exports.CreateGroupDocument = "\n    mutation createGroup($code: String!, $name: String!, $description: String) {\n  createGroup(code: $code, name: $name, description: $description) {\n    code\n    name\n    description\n    createdAt\n    updatedAt\n  }\n}\n    ";
    exports.CreateOrgDocument = "\n    mutation createOrg($name: String!, $code: String, $description: String, $tenantId: String) {\n  createOrg(name: $name, code: $code, description: $description, tenantId: $tenantId) {\n    id\n    rootNode {\n      id\n      orgId\n      name\n      nameI18n\n      description\n      descriptionI18n\n      order\n      code\n      root\n      depth\n      path\n      createdAt\n      updatedAt\n      children\n    }\n    nodes {\n      id\n      orgId\n      name\n      nameI18n\n      description\n      descriptionI18n\n      order\n      code\n      root\n      depth\n      path\n      createdAt\n      updatedAt\n      children\n    }\n  }\n}\n    ";
    exports.CreatePolicyDocument = "\n    mutation createPolicy($namespace: String, $code: String!, $description: String, $statements: [PolicyStatementInput!]!) {\n  createPolicy(namespace: $namespace, code: $code, description: $description, statements: $statements) {\n    namespace\n    code\n    isDefault\n    description\n    statements {\n      resource\n      actions\n      effect\n      condition {\n        param\n        operator\n        value\n      }\n    }\n    createdAt\n    updatedAt\n    assignmentsCount\n  }\n}\n    ";
    exports.CreateRoleDocument = "\n    mutation createRole($namespace: String, $code: String!, $description: String, $parent: String) {\n  createRole(namespace: $namespace, code: $code, description: $description, parent: $parent) {\n    id\n    namespace\n    code\n    arn\n    description\n    createdAt\n    updatedAt\n    parent {\n      namespace\n      code\n      arn\n      description\n      createdAt\n      updatedAt\n    }\n  }\n}\n    ";
    exports.CreateUserDocument = "\n    mutation createUser($userInfo: CreateUserInput!, $params: String, $identity: CreateUserIdentityInput, $keepPassword: Boolean, $resetPasswordOnFirstLogin: Boolean) {\n  createUser(userInfo: $userInfo, params: $params, identity: $identity, keepPassword: $keepPassword, resetPasswordOnFirstLogin: $resetPasswordOnFirstLogin) {\n    id\n    arn\n    userPoolId\n    status\n    username\n    email\n    emailVerified\n    phone\n    phoneVerified\n    unionid\n    openid\n    nickname\n    registerSource\n    photo\n    password\n    oauth\n    token\n    tokenExpiredAt\n    loginsCount\n    lastLogin\n    lastIP\n    signedUp\n    blocked\n    isDeleted\n    device\n    browser\n    company\n    name\n    givenName\n    familyName\n    middleName\n    profile\n    preferredUsername\n    website\n    gender\n    birthdate\n    zoneinfo\n    locale\n    address\n    formatted\n    streetAddress\n    locality\n    region\n    postalCode\n    city\n    province\n    country\n    createdAt\n    updatedAt\n    externalId\n    phoneCountryCode\n  }\n}\n    ";
    exports.CreateUserWithCustomDataDocument = "\n    mutation createUserWithCustomData($userInfo: CreateUserInput!, $keepPassword: Boolean, $params: String) {\n  createUser(userInfo: $userInfo, keepPassword: $keepPassword, params: $params) {\n    id\n    arn\n    userPoolId\n    status\n    username\n    email\n    emailVerified\n    phone\n    phoneVerified\n    unionid\n    openid\n    nickname\n    registerSource\n    photo\n    password\n    oauth\n    token\n    tokenExpiredAt\n    loginsCount\n    lastLogin\n    lastIP\n    signedUp\n    blocked\n    isDeleted\n    device\n    browser\n    company\n    name\n    givenName\n    familyName\n    middleName\n    profile\n    preferredUsername\n    website\n    gender\n    birthdate\n    zoneinfo\n    locale\n    address\n    formatted\n    streetAddress\n    locality\n    region\n    postalCode\n    city\n    province\n    country\n    createdAt\n    updatedAt\n    externalId\n    phoneCountryCode\n    customData {\n      key\n      value\n      dataType\n      label\n    }\n  }\n}\n    ";
    exports.CreateUserpoolDocument = "\n    mutation createUserpool($name: String!, $domain: String!, $description: String, $logo: String, $userpoolTypes: [String!]) {\n  createUserpool(name: $name, domain: $domain, description: $description, logo: $logo, userpoolTypes: $userpoolTypes) {\n    id\n    name\n    domain\n    description\n    secret\n    jwtSecret\n    userpoolTypes {\n      code\n      name\n      description\n      image\n      sdks\n    }\n    logo\n    createdAt\n    updatedAt\n    emailVerifiedDefault\n    sendWelcomeEmail\n    registerDisabled\n    appSsoEnabled\n    showWxQRCodeWhenRegisterDisabled\n    allowedOrigins\n    tokenExpiresAfter\n    isDeleted\n    frequentRegisterCheck {\n      timeInterval\n      limit\n      enabled\n    }\n    loginFailCheck {\n      timeInterval\n      limit\n      enabled\n    }\n    changePhoneStrategy {\n      verifyOldPhone\n    }\n    changeEmailStrategy {\n      verifyOldEmail\n    }\n    qrcodeLoginStrategy {\n      qrcodeExpiresAfter\n      returnFullUserInfo\n      allowExchangeUserInfoFromBrowser\n      ticketExpiresAfter\n    }\n    app2WxappLoginStrategy {\n      ticketExpriresAfter\n      ticketExchangeUserInfoNeedSecret\n    }\n    whitelist {\n      phoneEnabled\n      emailEnabled\n      usernameEnabled\n    }\n    customSMSProvider {\n      enabled\n      provider\n    }\n    packageType\n  }\n}\n    ";
    exports.DeleteFunctionDocument = "\n    mutation deleteFunction($id: String!) {\n  deleteFunction(id: $id) {\n    message\n    code\n  }\n}\n    ";
    exports.DeleteGroupsDocument = "\n    mutation deleteGroups($codeList: [String!]!) {\n  deleteGroups(codeList: $codeList) {\n    message\n    code\n  }\n}\n    ";
    exports.DeleteNodeDocument = "\n    mutation deleteNode($orgId: String!, $nodeId: String!) {\n  deleteNode(orgId: $orgId, nodeId: $nodeId) {\n    message\n    code\n  }\n}\n    ";
    exports.DeleteOrgDocument = "\n    mutation deleteOrg($id: String!) {\n  deleteOrg(id: $id) {\n    message\n    code\n  }\n}\n    ";
    exports.DeletePoliciesDocument = "\n    mutation deletePolicies($codeList: [String!]!, $namespace: String) {\n  deletePolicies(codeList: $codeList, namespace: $namespace) {\n    message\n    code\n  }\n}\n    ";
    exports.DeletePolicyDocument = "\n    mutation deletePolicy($code: String!, $namespace: String) {\n  deletePolicy(code: $code, namespace: $namespace) {\n    message\n    code\n  }\n}\n    ";
    exports.DeleteRoleDocument = "\n    mutation deleteRole($code: String!, $namespace: String) {\n  deleteRole(code: $code, namespace: $namespace) {\n    message\n    code\n  }\n}\n    ";
    exports.DeleteRolesDocument = "\n    mutation deleteRoles($codeList: [String!]!, $namespace: String) {\n  deleteRoles(codeList: $codeList, namespace: $namespace) {\n    message\n    code\n  }\n}\n    ";
    exports.DeleteUserDocument = "\n    mutation deleteUser($id: String!) {\n  deleteUser(id: $id) {\n    message\n    code\n  }\n}\n    ";
    exports.DeleteUserpoolDocument = "\n    mutation deleteUserpool {\n  deleteUserpool {\n    message\n    code\n  }\n}\n    ";
    exports.DeleteUsersDocument = "\n    mutation deleteUsers($ids: [String!]!) {\n  deleteUsers(ids: $ids) {\n    message\n    code\n  }\n}\n    ";
    exports.DisableEmailTemplateDocument = "\n    mutation disableEmailTemplate($type: EmailTemplateType!) {\n  disableEmailTemplate(type: $type) {\n    type\n    name\n    subject\n    sender\n    content\n    redirectTo\n    hasURL\n    expiresIn\n    enabled\n    isSystem\n  }\n}\n    ";
    exports.DisbalePolicyAssignmentDocument = "\n    mutation disbalePolicyAssignment($policy: String!, $targetType: PolicyAssignmentTargetType!, $targetIdentifier: String!, $namespace: String) {\n  disbalePolicyAssignment(policy: $policy, targetType: $targetType, targetIdentifier: $targetIdentifier, namespace: $namespace) {\n    message\n    code\n  }\n}\n    ";
    exports.EnableEmailTemplateDocument = "\n    mutation enableEmailTemplate($type: EmailTemplateType!) {\n  enableEmailTemplate(type: $type) {\n    type\n    name\n    subject\n    sender\n    content\n    redirectTo\n    hasURL\n    expiresIn\n    enabled\n    isSystem\n  }\n}\n    ";
    exports.EnablePolicyAssignmentDocument = "\n    mutation enablePolicyAssignment($policy: String!, $targetType: PolicyAssignmentTargetType!, $targetIdentifier: String!, $namespace: String) {\n  enablePolicyAssignment(policy: $policy, targetType: $targetType, targetIdentifier: $targetIdentifier, namespace: $namespace) {\n    message\n    code\n  }\n}\n    ";
    exports.LoginByEmailDocument = "\n    mutation loginByEmail($input: LoginByEmailInput!) {\n  loginByEmail(input: $input) {\n    id\n    arn\n    status\n    userPoolId\n    username\n    email\n    emailVerified\n    phone\n    phoneVerified\n    unionid\n    openid\n    nickname\n    registerSource\n    photo\n    password\n    oauth\n    token\n    tokenExpiredAt\n    loginsCount\n    lastLogin\n    lastIP\n    signedUp\n    blocked\n    isDeleted\n    device\n    browser\n    company\n    name\n    givenName\n    familyName\n    middleName\n    profile\n    preferredUsername\n    website\n    gender\n    birthdate\n    zoneinfo\n    locale\n    address\n    formatted\n    streetAddress\n    locality\n    region\n    postalCode\n    city\n    province\n    country\n    createdAt\n    updatedAt\n    externalId\n    phoneCountryCode\n    newlyCreated\n    phoneCountryCode\n    customData {\n      key\n      value\n      dataType\n      label\n    }\n  }\n}\n    ";
    exports.LoginByPhoneCodeDocument = "\n    mutation loginByPhoneCode($input: LoginByPhoneCodeInput!) {\n  loginByPhoneCode(input: $input) {\n    id\n    arn\n    userPoolId\n    status\n    username\n    email\n    emailVerified\n    phone\n    phoneVerified\n    unionid\n    openid\n    nickname\n    registerSource\n    photo\n    password\n    oauth\n    token\n    tokenExpiredAt\n    loginsCount\n    lastLogin\n    lastIP\n    signedUp\n    blocked\n    isDeleted\n    device\n    browser\n    company\n    name\n    givenName\n    familyName\n    middleName\n    profile\n    preferredUsername\n    website\n    gender\n    birthdate\n    zoneinfo\n    locale\n    address\n    formatted\n    streetAddress\n    locality\n    region\n    postalCode\n    city\n    province\n    country\n    createdAt\n    updatedAt\n    externalId\n    phoneCountryCode\n    newlyCreated\n    phoneCountryCode\n    customData {\n      key\n      value\n      dataType\n      label\n    }\n  }\n}\n    ";
    exports.LoginByPhonePasswordDocument = "\n    mutation loginByPhonePassword($input: LoginByPhonePasswordInput!) {\n  loginByPhonePassword(input: $input) {\n    id\n    arn\n    userPoolId\n    status\n    username\n    email\n    emailVerified\n    phone\n    phoneVerified\n    unionid\n    openid\n    nickname\n    registerSource\n    photo\n    password\n    oauth\n    token\n    tokenExpiredAt\n    loginsCount\n    lastLogin\n    lastIP\n    signedUp\n    blocked\n    isDeleted\n    device\n    browser\n    company\n    name\n    givenName\n    familyName\n    middleName\n    profile\n    preferredUsername\n    website\n    gender\n    birthdate\n    zoneinfo\n    locale\n    address\n    formatted\n    streetAddress\n    locality\n    region\n    postalCode\n    city\n    province\n    country\n    createdAt\n    updatedAt\n    externalId\n    phoneCountryCode\n    newlyCreated\n    phoneCountryCode\n    customData {\n      key\n      value\n      dataType\n      label\n    }\n  }\n}\n    ";
    exports.LoginBySubAccountDocument = "\n    mutation loginBySubAccount($account: String!, $password: String!, $captchaCode: String, $clientIp: String) {\n  loginBySubAccount(account: $account, password: $password, captchaCode: $captchaCode, clientIp: $clientIp) {\n    id\n    arn\n    status\n    userPoolId\n    username\n    email\n    emailVerified\n    phone\n    phoneVerified\n    unionid\n    openid\n    nickname\n    registerSource\n    photo\n    password\n    oauth\n    token\n    tokenExpiredAt\n    loginsCount\n    lastLogin\n    lastIP\n    signedUp\n    blocked\n    isDeleted\n    device\n    browser\n    company\n    name\n    givenName\n    familyName\n    middleName\n    profile\n    preferredUsername\n    website\n    gender\n    birthdate\n    zoneinfo\n    locale\n    address\n    formatted\n    streetAddress\n    locality\n    region\n    postalCode\n    city\n    province\n    country\n    createdAt\n    updatedAt\n    externalId\n    phoneCountryCode\n    newlyCreated\n    phoneCountryCode\n    customData {\n      key\n      value\n      dataType\n      label\n    }\n  }\n}\n    ";
    exports.LoginByUsernameDocument = "\n    mutation loginByUsername($input: LoginByUsernameInput!) {\n  loginByUsername(input: $input) {\n    id\n    arn\n    userPoolId\n    status\n    username\n    email\n    emailVerified\n    phone\n    phoneVerified\n    unionid\n    openid\n    nickname\n    registerSource\n    photo\n    password\n    oauth\n    token\n    tokenExpiredAt\n    loginsCount\n    lastLogin\n    lastIP\n    signedUp\n    blocked\n    isDeleted\n    device\n    browser\n    company\n    name\n    givenName\n    familyName\n    middleName\n    profile\n    preferredUsername\n    website\n    gender\n    birthdate\n    zoneinfo\n    locale\n    address\n    formatted\n    streetAddress\n    locality\n    region\n    postalCode\n    city\n    province\n    country\n    createdAt\n    updatedAt\n    externalId\n    phoneCountryCode\n    newlyCreated\n    phoneCountryCode\n    customData {\n      key\n      value\n      dataType\n      label\n    }\n  }\n}\n    ";
    exports.MoveMembersDocument = "\n    mutation moveMembers($userIds: [String!]!, $sourceNodeId: String!, $targetNodeId: String!) {\n  moveMembers(userIds: $userIds, sourceNodeId: $sourceNodeId, targetNodeId: $targetNodeId) {\n    code\n    message\n  }\n}\n    ";
    exports.MoveNodeDocument = "\n    mutation moveNode($orgId: String!, $nodeId: String!, $targetParentId: String!) {\n  moveNode(orgId: $orgId, nodeId: $nodeId, targetParentId: $targetParentId) {\n    id\n    rootNode {\n      id\n      orgId\n      name\n      nameI18n\n      description\n      descriptionI18n\n      order\n      code\n      root\n      depth\n      path\n      createdAt\n      updatedAt\n      children\n    }\n    nodes {\n      id\n      orgId\n      name\n      nameI18n\n      description\n      descriptionI18n\n      order\n      code\n      root\n      depth\n      path\n      createdAt\n      updatedAt\n      children\n    }\n  }\n}\n    ";
    exports.RefreshAccessTokenDocument = "\n    mutation refreshAccessToken($accessToken: String) {\n  refreshAccessToken(accessToken: $accessToken) {\n    accessToken\n    exp\n    iat\n  }\n}\n    ";
    exports.RefreshTokenDocument = "\n    mutation refreshToken($id: String) {\n  refreshToken(id: $id) {\n    token\n    iat\n    exp\n  }\n}\n    ";
    exports.RefreshUserpoolSecretDocument = "\n    mutation refreshUserpoolSecret {\n  refreshUserpoolSecret\n}\n    ";
    exports.RegisterByEmailDocument = "\n    mutation registerByEmail($input: RegisterByEmailInput!) {\n  registerByEmail(input: $input) {\n    id\n    arn\n    userPoolId\n    status\n    username\n    email\n    emailVerified\n    phone\n    phoneVerified\n    unionid\n    openid\n    nickname\n    registerSource\n    photo\n    password\n    oauth\n    token\n    tokenExpiredAt\n    loginsCount\n    lastLogin\n    lastIP\n    signedUp\n    blocked\n    isDeleted\n    device\n    browser\n    company\n    name\n    givenName\n    familyName\n    middleName\n    profile\n    preferredUsername\n    website\n    gender\n    birthdate\n    zoneinfo\n    locale\n    address\n    formatted\n    streetAddress\n    locality\n    region\n    postalCode\n    city\n    province\n    country\n    createdAt\n    updatedAt\n    externalId\n    phoneCountryCode\n  }\n}\n    ";
    exports.RegisterByPhoneCodeDocument = "\n    mutation registerByPhoneCode($input: RegisterByPhoneCodeInput!) {\n  registerByPhoneCode(input: $input) {\n    id\n    arn\n    userPoolId\n    status\n    username\n    email\n    emailVerified\n    phone\n    phoneVerified\n    unionid\n    openid\n    nickname\n    registerSource\n    photo\n    password\n    oauth\n    token\n    tokenExpiredAt\n    loginsCount\n    lastLogin\n    lastIP\n    signedUp\n    blocked\n    isDeleted\n    device\n    browser\n    company\n    name\n    givenName\n    familyName\n    middleName\n    profile\n    preferredUsername\n    website\n    gender\n    birthdate\n    zoneinfo\n    locale\n    address\n    formatted\n    streetAddress\n    locality\n    region\n    postalCode\n    city\n    province\n    country\n    createdAt\n    updatedAt\n    externalId\n    phoneCountryCode\n  }\n}\n    ";
    exports.RegisterByUsernameDocument = "\n    mutation registerByUsername($input: RegisterByUsernameInput!) {\n  registerByUsername(input: $input) {\n    id\n    arn\n    userPoolId\n    status\n    username\n    email\n    emailVerified\n    phone\n    phoneVerified\n    unionid\n    openid\n    nickname\n    registerSource\n    photo\n    password\n    oauth\n    token\n    tokenExpiredAt\n    loginsCount\n    lastLogin\n    lastIP\n    signedUp\n    blocked\n    isDeleted\n    device\n    browser\n    company\n    name\n    givenName\n    familyName\n    middleName\n    profile\n    preferredUsername\n    website\n    gender\n    birthdate\n    zoneinfo\n    locale\n    address\n    formatted\n    streetAddress\n    locality\n    region\n    postalCode\n    city\n    province\n    country\n    createdAt\n    updatedAt\n    externalId\n    phoneCountryCode\n  }\n}\n    ";
    exports.RemoveMemberDocument = "\n    mutation removeMember($page: Int, $limit: Int, $sortBy: SortByEnum, $includeChildrenNodes: Boolean, $nodeId: String, $orgId: String, $nodeCode: String, $userIds: [String!]!) {\n  removeMember(nodeId: $nodeId, orgId: $orgId, nodeCode: $nodeCode, userIds: $userIds) {\n    id\n    name\n    nameI18n\n    description\n    descriptionI18n\n    order\n    code\n    root\n    depth\n    createdAt\n    updatedAt\n    children\n    users(page: $page, limit: $limit, sortBy: $sortBy, includeChildrenNodes: $includeChildrenNodes) {\n      totalCount\n      list {\n        id\n        arn\n        userPoolId\n        status\n        username\n        email\n        emailVerified\n        phone\n        phoneVerified\n        unionid\n        openid\n        nickname\n        registerSource\n        photo\n        password\n        oauth\n        token\n        tokenExpiredAt\n        loginsCount\n        lastLogin\n        lastIP\n        signedUp\n        blocked\n        isDeleted\n        device\n        browser\n        company\n        name\n        givenName\n        familyName\n        middleName\n        profile\n        preferredUsername\n        website\n        gender\n        birthdate\n        zoneinfo\n        locale\n        address\n        formatted\n        streetAddress\n        locality\n        region\n        postalCode\n        city\n        province\n        country\n        createdAt\n        updatedAt\n        phoneCountryCode\n      }\n    }\n  }\n}\n    ";
    exports.RemovePolicyAssignmentsDocument = "\n    mutation removePolicyAssignments($policies: [String!]!, $targetType: PolicyAssignmentTargetType!, $targetIdentifiers: [String!], $namespace: String) {\n  removePolicyAssignments(policies: $policies, targetType: $targetType, targetIdentifiers: $targetIdentifiers, namespace: $namespace) {\n    message\n    code\n  }\n}\n    ";
    exports.RemoveUdfDocument = "\n    mutation removeUdf($targetType: UDFTargetType!, $key: String!) {\n  removeUdf(targetType: $targetType, key: $key) {\n    message\n    code\n  }\n}\n    ";
    exports.RemoveUdvDocument = "\n    mutation removeUdv($targetType: UDFTargetType!, $targetId: String!, $key: String!) {\n  removeUdv(targetType: $targetType, targetId: $targetId, key: $key) {\n    key\n    dataType\n    value\n    label\n  }\n}\n    ";
    exports.RemoveUserFromGroupDocument = "\n    mutation removeUserFromGroup($userIds: [String!]!, $code: String) {\n  removeUserFromGroup(userIds: $userIds, code: $code) {\n    message\n    code\n  }\n}\n    ";
    exports.RemoveWhitelistDocument = "\n    mutation removeWhitelist($type: WhitelistType!, $list: [String!]!) {\n  removeWhitelist(type: $type, list: $list) {\n    createdAt\n    updatedAt\n    value\n  }\n}\n    ";
    exports.ResetPasswordDocument = "\n    mutation resetPassword($phone: String, $phoneCountryCode: String, $email: String, $code: String!, $newPassword: String!) {\n  resetPassword(phone: $phone, phoneCountryCode: $phoneCountryCode, email: $email, code: $code, newPassword: $newPassword) {\n    message\n    code\n  }\n}\n    ";
    exports.ResetPasswordByFirstLoginTokenDocument = "\n    mutation resetPasswordByFirstLoginToken($token: String!, $password: String!) {\n  resetPasswordByFirstLoginToken(token: $token, password: $password) {\n    message\n    code\n  }\n}\n    ";
    exports.ResetPasswordByForceResetTokenDocument = "\n    mutation resetPasswordByForceResetToken($token: String!, $oldPassword: String!, $newPassword: String!) {\n  resetPasswordByForceResetToken(token: $token, oldPassword: $oldPassword, newPassword: $newPassword) {\n    message\n    code\n  }\n}\n    ";
    exports.RevokeRoleDocument = "\n    mutation revokeRole($namespace: String, $roleCode: String, $roleCodes: [String], $userIds: [String!], $groupCodes: [String!], $nodeCodes: [String!]) {\n  revokeRole(namespace: $namespace, roleCode: $roleCode, roleCodes: $roleCodes, userIds: $userIds, groupCodes: $groupCodes, nodeCodes: $nodeCodes) {\n    message\n    code\n  }\n}\n    ";
    exports.SendEmailDocument = "\n    mutation sendEmail($email: String!, $scene: EmailScene!) {\n  sendEmail(email: $email, scene: $scene) {\n    message\n    code\n  }\n}\n    ";
    exports.SendFirstLoginVerifyEmailDocument = "\n    mutation sendFirstLoginVerifyEmail($userId: String!, $appId: String!) {\n  sendFirstLoginVerifyEmail(userId: $userId, appId: $appId) {\n    message\n    code\n  }\n}\n    ";
    exports.SetMainDepartmentDocument = "\n    mutation setMainDepartment($userId: String!, $departmentId: String) {\n  setMainDepartment(userId: $userId, departmentId: $departmentId) {\n    message\n    code\n  }\n}\n    ";
    exports.SetUdfDocument = "\n    mutation setUdf($targetType: UDFTargetType!, $key: String!, $dataType: UDFDataType!, $label: String!, $options: String) {\n  setUdf(targetType: $targetType, key: $key, dataType: $dataType, label: $label, options: $options) {\n    targetType\n    dataType\n    key\n    label\n    options\n  }\n}\n    ";
    exports.SetUdfValueBatchDocument = "\n    mutation setUdfValueBatch($targetType: UDFTargetType!, $input: [SetUdfValueBatchInput!]!) {\n  setUdfValueBatch(targetType: $targetType, input: $input) {\n    code\n    message\n  }\n}\n    ";
    exports.SetUdvDocument = "\n    mutation setUdv($targetType: UDFTargetType!, $targetId: String!, $key: String!, $value: String!) {\n  setUdv(targetType: $targetType, targetId: $targetId, key: $key, value: $value) {\n    key\n    dataType\n    value\n    label\n  }\n}\n    ";
    exports.SetUdvBatchDocument = "\n    mutation setUdvBatch($targetType: UDFTargetType!, $targetId: String!, $udvList: [UserDefinedDataInput!]) {\n  setUdvBatch(targetType: $targetType, targetId: $targetId, udvList: $udvList) {\n    key\n    dataType\n    value\n    label\n  }\n}\n    ";
    exports.UnbindEmailDocument = "\n    mutation unbindEmail {\n  unbindEmail {\n    id\n    arn\n    userPoolId\n    status\n    username\n    email\n    emailVerified\n    phone\n    phoneVerified\n    unionid\n    openid\n    nickname\n    registerSource\n    photo\n    password\n    oauth\n    token\n    tokenExpiredAt\n    loginsCount\n    lastLogin\n    lastIP\n    signedUp\n    blocked\n    isDeleted\n    device\n    browser\n    company\n    name\n    givenName\n    familyName\n    middleName\n    profile\n    preferredUsername\n    website\n    gender\n    birthdate\n    zoneinfo\n    locale\n    address\n    formatted\n    streetAddress\n    locality\n    region\n    postalCode\n    city\n    province\n    country\n    createdAt\n    updatedAt\n    phoneCountryCode\n  }\n}\n    ";
    exports.UnbindPhoneDocument = "\n    mutation unbindPhone {\n  unbindPhone {\n    id\n    arn\n    userPoolId\n    status\n    username\n    email\n    emailVerified\n    phone\n    phoneVerified\n    unionid\n    openid\n    nickname\n    registerSource\n    photo\n    password\n    oauth\n    token\n    tokenExpiredAt\n    loginsCount\n    lastLogin\n    lastIP\n    signedUp\n    blocked\n    isDeleted\n    device\n    browser\n    company\n    name\n    givenName\n    familyName\n    middleName\n    profile\n    preferredUsername\n    website\n    gender\n    birthdate\n    zoneinfo\n    locale\n    address\n    formatted\n    streetAddress\n    locality\n    region\n    postalCode\n    city\n    province\n    country\n    createdAt\n    updatedAt\n    phoneCountryCode\n  }\n}\n    ";
    exports.UpdateEmailDocument = "\n    mutation updateEmail($email: String!, $emailCode: String!, $oldEmail: String, $oldEmailCode: String) {\n  updateEmail(email: $email, emailCode: $emailCode, oldEmail: $oldEmail, oldEmailCode: $oldEmailCode) {\n    id\n    arn\n    userPoolId\n    status\n    username\n    email\n    emailVerified\n    phone\n    phoneVerified\n    unionid\n    openid\n    nickname\n    registerSource\n    photo\n    password\n    oauth\n    token\n    tokenExpiredAt\n    loginsCount\n    lastLogin\n    lastIP\n    signedUp\n    blocked\n    isDeleted\n    device\n    browser\n    company\n    name\n    givenName\n    familyName\n    middleName\n    profile\n    preferredUsername\n    website\n    gender\n    birthdate\n    zoneinfo\n    locale\n    address\n    formatted\n    streetAddress\n    locality\n    region\n    postalCode\n    city\n    province\n    country\n    createdAt\n    updatedAt\n    phoneCountryCode\n  }\n}\n    ";
    exports.UpdateFunctionDocument = "\n    mutation updateFunction($input: UpdateFunctionInput!) {\n  updateFunction(input: $input) {\n    id\n    name\n    sourceCode\n    description\n    url\n  }\n}\n    ";
    exports.UpdateGroupDocument = "\n    mutation updateGroup($code: String!, $name: String, $description: String, $newCode: String) {\n  updateGroup(code: $code, name: $name, description: $description, newCode: $newCode) {\n    code\n    name\n    description\n    createdAt\n    updatedAt\n  }\n}\n    ";
    exports.UpdateNodeDocument = "\n    mutation updateNode($page: Int, $limit: Int, $sortBy: SortByEnum, $includeChildrenNodes: Boolean, $id: String!, $name: String, $code: String, $description: String) {\n  updateNode(id: $id, name: $name, code: $code, description: $description) {\n    id\n    orgId\n    name\n    nameI18n\n    description\n    descriptionI18n\n    order\n    code\n    root\n    depth\n    path\n    createdAt\n    updatedAt\n    children\n    users(page: $page, limit: $limit, sortBy: $sortBy, includeChildrenNodes: $includeChildrenNodes) {\n      totalCount\n    }\n  }\n}\n    ";
    exports.UpdatePasswordDocument = "\n    mutation updatePassword($newPassword: String!, $oldPassword: String) {\n  updatePassword(newPassword: $newPassword, oldPassword: $oldPassword) {\n    id\n    arn\n    userPoolId\n    status\n    username\n    email\n    emailVerified\n    phone\n    phoneVerified\n    unionid\n    openid\n    nickname\n    registerSource\n    photo\n    password\n    oauth\n    token\n    tokenExpiredAt\n    loginsCount\n    lastLogin\n    lastIP\n    signedUp\n    blocked\n    isDeleted\n    device\n    browser\n    company\n    name\n    givenName\n    familyName\n    middleName\n    profile\n    preferredUsername\n    website\n    gender\n    birthdate\n    zoneinfo\n    locale\n    address\n    formatted\n    streetAddress\n    locality\n    region\n    postalCode\n    city\n    province\n    country\n    createdAt\n    updatedAt\n    phoneCountryCode\n  }\n}\n    ";
    exports.UpdatePhoneDocument = "\n    mutation updatePhone($phone: String!, $phoneCode: String!, $oldPhone: String, $oldPhoneCode: String, $phoneCountryCode: String, $oldPhoneCountryCode: String) {\n  updatePhone(phone: $phone, phoneCode: $phoneCode, oldPhone: $oldPhone, oldPhoneCode: $oldPhoneCode, phoneCountryCode: $phoneCountryCode, oldPhoneCountryCode: $oldPhoneCountryCode) {\n    id\n    arn\n    userPoolId\n    status\n    username\n    email\n    emailVerified\n    phone\n    phoneVerified\n    unionid\n    openid\n    nickname\n    registerSource\n    photo\n    password\n    oauth\n    token\n    tokenExpiredAt\n    loginsCount\n    lastLogin\n    lastIP\n    signedUp\n    blocked\n    isDeleted\n    device\n    browser\n    company\n    name\n    givenName\n    familyName\n    middleName\n    profile\n    preferredUsername\n    website\n    gender\n    birthdate\n    zoneinfo\n    locale\n    address\n    formatted\n    streetAddress\n    locality\n    region\n    postalCode\n    city\n    province\n    country\n    createdAt\n    updatedAt\n    phoneCountryCode\n  }\n}\n    ";
    exports.UpdatePolicyDocument = "\n    mutation updatePolicy($namespace: String, $code: String!, $description: String, $statements: [PolicyStatementInput!], $newCode: String) {\n  updatePolicy(namespace: $namespace, code: $code, description: $description, statements: $statements, newCode: $newCode) {\n    namespace\n    code\n    description\n    statements {\n      resource\n      actions\n      effect\n      condition {\n        param\n        operator\n        value\n      }\n    }\n    createdAt\n    updatedAt\n  }\n}\n    ";
    exports.UpdateRoleDocument = "\n    mutation updateRole($code: String!, $description: String, $newCode: String, $namespace: String) {\n  updateRole(code: $code, description: $description, newCode: $newCode, namespace: $namespace) {\n    id\n    namespace\n    code\n    arn\n    description\n    createdAt\n    updatedAt\n    parent {\n      namespace\n      code\n      arn\n      description\n      createdAt\n      updatedAt\n    }\n  }\n}\n    ";
    exports.UpdateUserDocument = "\n    mutation updateUser($id: String, $input: UpdateUserInput!, $emailToken: String, $phoneToken: String) {\n  updateUser(id: $id, input: $input, emailToken: $emailToken, phoneToken: $phoneToken) {\n    id\n    arn\n    userPoolId\n    status\n    username\n    email\n    emailVerified\n    phone\n    phoneVerified\n    unionid\n    openid\n    nickname\n    registerSource\n    photo\n    password\n    oauth\n    token\n    tokenExpiredAt\n    loginsCount\n    lastLogin\n    lastIP\n    signedUp\n    blocked\n    isDeleted\n    device\n    browser\n    company\n    name\n    givenName\n    familyName\n    middleName\n    profile\n    preferredUsername\n    website\n    gender\n    birthdate\n    zoneinfo\n    locale\n    address\n    formatted\n    streetAddress\n    locality\n    region\n    postalCode\n    city\n    province\n    country\n    createdAt\n    updatedAt\n    externalId\n    phoneCountryCode\n  }\n}\n    ";
    exports.UpdateUserpoolDocument = "\n    mutation updateUserpool($input: UpdateUserpoolInput!) {\n  updateUserpool(input: $input) {\n    id\n    name\n    domain\n    description\n    secret\n    jwtSecret\n    userpoolTypes {\n      code\n      name\n      description\n      image\n      sdks\n    }\n    logo\n    createdAt\n    updatedAt\n    emailVerifiedDefault\n    sendWelcomeEmail\n    registerDisabled\n    appSsoEnabled\n    showWxQRCodeWhenRegisterDisabled\n    allowedOrigins\n    tokenExpiresAfter\n    isDeleted\n    frequentRegisterCheck {\n      timeInterval\n      limit\n      enabled\n    }\n    loginFailCheck {\n      timeInterval\n      limit\n      enabled\n    }\n    loginFailStrategy\n    loginPasswordFailCheck {\n      timeInterval\n      limit\n      enabled\n    }\n    changePhoneStrategy {\n      verifyOldPhone\n    }\n    changeEmailStrategy {\n      verifyOldEmail\n    }\n    qrcodeLoginStrategy {\n      qrcodeExpiresAfter\n      returnFullUserInfo\n      allowExchangeUserInfoFromBrowser\n      ticketExpiresAfter\n    }\n    app2WxappLoginStrategy {\n      ticketExpriresAfter\n      ticketExchangeUserInfoNeedSecret\n    }\n    whitelist {\n      phoneEnabled\n      emailEnabled\n      usernameEnabled\n    }\n    customSMSProvider {\n      enabled\n      provider\n      config\n    }\n    packageType\n    useCustomUserStore\n    loginRequireEmailVerified\n    verifyCodeLength\n    verifyCodeMaxAttempts\n  }\n}\n    ";
    exports.AccessTokenDocument = "\n    query accessToken($userPoolId: String!, $secret: String!) {\n  accessToken(userPoolId: $userPoolId, secret: $secret) {\n    accessToken\n    exp\n    iat\n  }\n}\n    ";
    exports.ArchivedUsersDocument = "\n    query archivedUsers($page: Int, $limit: Int) {\n  archivedUsers(page: $page, limit: $limit) {\n    totalCount\n    list {\n      id\n      arn\n      status\n      userPoolId\n      username\n      email\n      emailVerified\n      phone\n      phoneVerified\n      unionid\n      openid\n      nickname\n      registerSource\n      photo\n      password\n      oauth\n      token\n      tokenExpiredAt\n      loginsCount\n      lastLogin\n      lastIP\n      signedUp\n      blocked\n      isDeleted\n      device\n      browser\n      company\n      name\n      givenName\n      familyName\n      middleName\n      profile\n      preferredUsername\n      website\n      gender\n      birthdate\n      zoneinfo\n      locale\n      address\n      formatted\n      streetAddress\n      locality\n      region\n      postalCode\n      city\n      province\n      country\n      createdAt\n      updatedAt\n      externalId\n      phoneCountryCode\n    }\n  }\n}\n    ";
    exports.AuthorizedTargetsDocument = "\n    query authorizedTargets($namespace: String!, $resourceType: ResourceType!, $resource: String!, $targetType: PolicyAssignmentTargetType, $actions: AuthorizedTargetsActionsInput) {\n  authorizedTargets(namespace: $namespace, resource: $resource, resourceType: $resourceType, targetType: $targetType, actions: $actions) {\n    totalCount\n    list {\n      targetType\n      targetIdentifier\n      actions\n    }\n  }\n}\n    ";
    exports.CheckLoginStatusDocument = "\n    query checkLoginStatus($token: String) {\n  checkLoginStatus(token: $token) {\n    code\n    message\n    status\n    exp\n    iat\n    data {\n      id\n      userPoolId\n      arn\n    }\n  }\n}\n    ";
    exports.CheckPasswordStrengthDocument = "\n    query checkPasswordStrength($password: String!) {\n  checkPasswordStrength(password: $password) {\n    valid\n    message\n  }\n}\n    ";
    exports.ChildrenNodesDocument = "\n    query childrenNodes($nodeId: String!) {\n  childrenNodes(nodeId: $nodeId) {\n    id\n    orgId\n    name\n    nameI18n\n    description\n    descriptionI18n\n    order\n    code\n    root\n    depth\n    path\n    createdAt\n    updatedAt\n    children\n  }\n}\n    ";
    exports.EmailTemplatesDocument = "\n    query emailTemplates {\n  emailTemplates {\n    type\n    name\n    subject\n    sender\n    content\n    redirectTo\n    hasURL\n    expiresIn\n    enabled\n    isSystem\n  }\n}\n    ";
    exports.FindUserDocument = "\n    query findUser($email: String, $phone: String, $username: String, $externalId: String, $identity: FindUserByIdentityInput) {\n  findUser(email: $email, phone: $phone, username: $username, externalId: $externalId, identity: $identity) {\n    id\n    arn\n    userPoolId\n    status\n    username\n    email\n    emailVerified\n    phone\n    phoneVerified\n    unionid\n    openid\n    nickname\n    registerSource\n    photo\n    password\n    oauth\n    token\n    tokenExpiredAt\n    loginsCount\n    lastLogin\n    lastIP\n    signedUp\n    blocked\n    isDeleted\n    device\n    browser\n    company\n    name\n    givenName\n    familyName\n    middleName\n    profile\n    preferredUsername\n    website\n    gender\n    birthdate\n    zoneinfo\n    locale\n    address\n    formatted\n    streetAddress\n    locality\n    region\n    postalCode\n    city\n    province\n    country\n    createdAt\n    updatedAt\n    externalId\n    phoneCountryCode\n  }\n}\n    ";
    exports.FindUserWithCustomDataDocument = "\n    query findUserWithCustomData($email: String, $phone: String, $username: String, $externalId: String) {\n  findUser(email: $email, phone: $phone, username: $username, externalId: $externalId) {\n    id\n    arn\n    userPoolId\n    status\n    username\n    email\n    emailVerified\n    phone\n    phoneVerified\n    unionid\n    openid\n    nickname\n    registerSource\n    photo\n    password\n    oauth\n    token\n    tokenExpiredAt\n    loginsCount\n    lastLogin\n    lastIP\n    signedUp\n    blocked\n    isDeleted\n    device\n    browser\n    company\n    name\n    givenName\n    familyName\n    middleName\n    profile\n    preferredUsername\n    website\n    gender\n    birthdate\n    zoneinfo\n    locale\n    address\n    formatted\n    streetAddress\n    locality\n    region\n    postalCode\n    city\n    province\n    country\n    createdAt\n    updatedAt\n    externalId\n    phoneCountryCode\n    customData {\n      key\n      value\n      dataType\n      label\n    }\n  }\n}\n    ";
    exports.FunctionDocument = "\n    query function($id: String) {\n  function(id: $id) {\n    id\n    name\n    sourceCode\n    description\n    url\n  }\n}\n    ";
    exports.FunctionsDocument = "\n    query functions($page: Int, $limit: Int, $sortBy: SortByEnum) {\n  functions(page: $page, limit: $limit, sortBy: $sortBy) {\n    list {\n      id\n      name\n      sourceCode\n      description\n      url\n    }\n    totalCount\n  }\n}\n    ";
    exports.GetUserDepartmentsDocument = "\n    query getUserDepartments($id: String!, $orgId: String) {\n  user(id: $id) {\n    departments(orgId: $orgId) {\n      totalCount\n      list {\n        department {\n          id\n          orgId\n          name\n          nameI18n\n          description\n          descriptionI18n\n          order\n          code\n          root\n          depth\n          path\n          codePath\n          namePath\n          createdAt\n          updatedAt\n          children\n          isVirtualNode\n        }\n        isMainDepartment\n        joinedAt\n      }\n    }\n  }\n}\n    ";
    exports.GetUserGroupsDocument = "\n    query getUserGroups($id: String!) {\n  user(id: $id) {\n    groups {\n      totalCount\n      list {\n        code\n        name\n        description\n        createdAt\n        updatedAt\n      }\n    }\n  }\n}\n    ";
    exports.GetUserRolesDocument = "\n    query getUserRoles($id: String!, $namespace: String) {\n  user(id: $id) {\n    roles(namespace: $namespace) {\n      totalCount\n      list {\n        id\n        code\n        namespace\n        arn\n        description\n        createdAt\n        updatedAt\n        parent {\n          code\n          namespace\n          arn\n          description\n          createdAt\n          updatedAt\n        }\n      }\n    }\n  }\n}\n    ";
    exports.GroupDocument = "\n    query group($code: String!) {\n  group(code: $code) {\n    code\n    name\n    description\n    createdAt\n    updatedAt\n  }\n}\n    ";
    exports.GroupWithUsersDocument = "\n    query groupWithUsers($code: String!, $page: Int, $limit: Int) {\n  group(code: $code) {\n    users(page: $page, limit: $limit) {\n      totalCount\n      list {\n        id\n        arn\n        status\n        userPoolId\n        username\n        email\n        emailVerified\n        phone\n        phoneVerified\n        unionid\n        openid\n        nickname\n        registerSource\n        photo\n        password\n        oauth\n        token\n        tokenExpiredAt\n        loginsCount\n        lastLogin\n        lastIP\n        signedUp\n        blocked\n        isDeleted\n        device\n        browser\n        company\n        name\n        givenName\n        familyName\n        middleName\n        profile\n        preferredUsername\n        website\n        gender\n        birthdate\n        zoneinfo\n        locale\n        address\n        formatted\n        streetAddress\n        locality\n        region\n        postalCode\n        city\n        province\n        country\n        createdAt\n        updatedAt\n        externalId\n        phoneCountryCode\n      }\n    }\n  }\n}\n    ";
    exports.GroupWithUsersWithCustomDataDocument = "\n    query groupWithUsersWithCustomData($code: String!, $page: Int, $limit: Int) {\n  group(code: $code) {\n    users(page: $page, limit: $limit) {\n      totalCount\n      list {\n        id\n        arn\n        status\n        userPoolId\n        username\n        email\n        emailVerified\n        phone\n        phoneVerified\n        unionid\n        openid\n        nickname\n        registerSource\n        photo\n        password\n        oauth\n        token\n        tokenExpiredAt\n        loginsCount\n        lastLogin\n        lastIP\n        signedUp\n        blocked\n        isDeleted\n        device\n        browser\n        company\n        name\n        givenName\n        familyName\n        middleName\n        profile\n        preferredUsername\n        website\n        gender\n        birthdate\n        zoneinfo\n        locale\n        address\n        formatted\n        streetAddress\n        locality\n        region\n        postalCode\n        city\n        province\n        country\n        createdAt\n        updatedAt\n        externalId\n        phoneCountryCode\n        customData {\n          key\n          value\n          dataType\n          label\n        }\n      }\n    }\n  }\n}\n    ";
    exports.GroupsDocument = "\n    query groups($userId: String, $page: Int, $limit: Int, $sortBy: SortByEnum) {\n  groups(userId: $userId, page: $page, limit: $limit, sortBy: $sortBy) {\n    totalCount\n    list {\n      code\n      name\n      description\n      createdAt\n      updatedAt\n    }\n  }\n}\n    ";
    exports.IsActionAllowedDocument = "\n    query isActionAllowed($resource: String!, $action: String!, $userId: String!, $namespace: String) {\n  isActionAllowed(resource: $resource, action: $action, userId: $userId, namespace: $namespace)\n}\n    ";
    exports.IsActionDeniedDocument = "\n    query isActionDenied($resource: String!, $action: String!, $userId: String!) {\n  isActionDenied(resource: $resource, action: $action, userId: $userId)\n}\n    ";
    exports.IsDomainAvaliableDocument = "\n    query isDomainAvaliable($domain: String!) {\n  isDomainAvaliable(domain: $domain)\n}\n    ";
    exports.IsRootNodeDocument = "\n    query isRootNode($nodeId: String!, $orgId: String!) {\n  isRootNode(nodeId: $nodeId, orgId: $orgId)\n}\n    ";
    exports.IsUserExistsDocument = "\n    query isUserExists($email: String, $phone: String, $username: String, $externalId: String) {\n  isUserExists(email: $email, phone: $phone, username: $username, externalId: $externalId)\n}\n    ";
    exports.AuthorizedResourcesDocument = "\n    query authorizedResources($targetType: PolicyAssignmentTargetType, $targetIdentifier: String, $namespace: String, $resourceType: String) {\n  authorizedResources(targetType: $targetType, targetIdentifier: $targetIdentifier, namespace: $namespace, resourceType: $resourceType) {\n    totalCount\n    list {\n      code\n      type\n      actions\n      apiIdentifier\n    }\n  }\n}\n    ";
    exports.ListGroupAuthorizedResourcesDocument = "\n    query listGroupAuthorizedResources($code: String!, $namespace: String, $resourceType: String) {\n  group(code: $code) {\n    authorizedResources(namespace: $namespace, resourceType: $resourceType) {\n      totalCount\n      list {\n        code\n        type\n        actions\n        apiIdentifier\n      }\n    }\n  }\n}\n    ";
    exports.ListNodeByCodeAuthorizedResourcesDocument = "\n    query listNodeByCodeAuthorizedResources($orgId: String!, $code: String!, $namespace: String, $resourceType: String) {\n  nodeByCode(orgId: $orgId, code: $code) {\n    authorizedResources(namespace: $namespace, resourceType: $resourceType) {\n      totalCount\n      list {\n        code\n        type\n        actions\n        apiIdentifier\n      }\n    }\n  }\n}\n    ";
    exports.ListNodeByIdAuthorizedResourcesDocument = "\n    query listNodeByIdAuthorizedResources($id: String!, $namespace: String, $resourceType: String) {\n  nodeById(id: $id) {\n    authorizedResources(namespace: $namespace, resourceType: $resourceType) {\n      totalCount\n      list {\n        code\n        type\n        actions\n        apiIdentifier\n      }\n    }\n  }\n}\n    ";
    exports.ListRoleAuthorizedResourcesDocument = "\n    query listRoleAuthorizedResources($code: String!, $namespace: String, $resourceType: String) {\n  role(code: $code, namespace: $namespace) {\n    authorizedResources(resourceType: $resourceType) {\n      totalCount\n      list {\n        code\n        type\n        actions\n        apiIdentifier\n      }\n    }\n  }\n}\n    ";
    exports.ListUserAuthorizedResourcesDocument = "\n    query listUserAuthorizedResources($id: String!, $namespace: String, $resourceType: String) {\n  user(id: $id) {\n    authorizedResources(namespace: $namespace, resourceType: $resourceType) {\n      totalCount\n      list {\n        code\n        type\n        actions\n        apiIdentifier\n      }\n    }\n  }\n}\n    ";
    exports.NodeByCodeDocument = "\n    query nodeByCode($orgId: String!, $code: String!) {\n  nodeByCode(orgId: $orgId, code: $code) {\n    id\n    orgId\n    name\n    nameI18n\n    description\n    descriptionI18n\n    order\n    code\n    root\n    depth\n    path\n    createdAt\n    updatedAt\n    children\n  }\n}\n    ";
    exports.NodeByCodeWithMembersDocument = "\n    query nodeByCodeWithMembers($page: Int, $limit: Int, $sortBy: SortByEnum, $includeChildrenNodes: Boolean, $orgId: String!, $code: String!) {\n  nodeByCode(orgId: $orgId, code: $code) {\n    id\n    orgId\n    name\n    nameI18n\n    description\n    descriptionI18n\n    order\n    code\n    root\n    depth\n    createdAt\n    updatedAt\n    children\n    users(page: $page, limit: $limit, sortBy: $sortBy, includeChildrenNodes: $includeChildrenNodes) {\n      totalCount\n      list {\n        id\n        arn\n        userPoolId\n        status\n        username\n        email\n        emailVerified\n        phone\n        phoneVerified\n        unionid\n        openid\n        nickname\n        registerSource\n        photo\n        password\n        oauth\n        token\n        tokenExpiredAt\n        loginsCount\n        lastLogin\n        lastIP\n        signedUp\n        blocked\n        isDeleted\n        device\n        browser\n        company\n        name\n        givenName\n        familyName\n        middleName\n        profile\n        preferredUsername\n        website\n        gender\n        birthdate\n        zoneinfo\n        locale\n        address\n        formatted\n        streetAddress\n        locality\n        region\n        postalCode\n        city\n        province\n        country\n        createdAt\n        updatedAt\n        externalId\n        phoneCountryCode\n      }\n    }\n  }\n}\n    ";
    exports.NodeByIdDocument = "\n    query nodeById($id: String!) {\n  nodeById(id: $id) {\n    id\n    orgId\n    name\n    nameI18n\n    description\n    descriptionI18n\n    order\n    code\n    root\n    depth\n    path\n    createdAt\n    updatedAt\n    children\n  }\n}\n    ";
    exports.NodeByIdWithMembersDocument = "\n    query nodeByIdWithMembers($page: Int, $limit: Int, $sortBy: SortByEnum, $includeChildrenNodes: Boolean, $id: String!) {\n  nodeById(id: $id) {\n    id\n    orgId\n    name\n    nameI18n\n    description\n    descriptionI18n\n    order\n    code\n    root\n    depth\n    createdAt\n    updatedAt\n    children\n    users(page: $page, limit: $limit, sortBy: $sortBy, includeChildrenNodes: $includeChildrenNodes) {\n      totalCount\n      list {\n        id\n        arn\n        userPoolId\n        status\n        username\n        email\n        emailVerified\n        phone\n        phoneVerified\n        unionid\n        openid\n        nickname\n        registerSource\n        photo\n        password\n        oauth\n        token\n        tokenExpiredAt\n        loginsCount\n        lastLogin\n        lastIP\n        signedUp\n        blocked\n        isDeleted\n        device\n        browser\n        company\n        name\n        givenName\n        familyName\n        middleName\n        profile\n        preferredUsername\n        website\n        gender\n        birthdate\n        zoneinfo\n        locale\n        address\n        formatted\n        streetAddress\n        locality\n        region\n        postalCode\n        city\n        province\n        country\n        createdAt\n        updatedAt\n        externalId\n        phoneCountryCode\n      }\n    }\n  }\n}\n    ";
    exports.OrgDocument = "\n    query org($id: String!) {\n  org(id: $id) {\n    id\n    rootNode {\n      id\n      orgId\n      name\n      nameI18n\n      description\n      descriptionI18n\n      order\n      code\n      root\n      depth\n      path\n      createdAt\n      updatedAt\n      children\n    }\n    nodes {\n      id\n      orgId\n      name\n      nameI18n\n      description\n      descriptionI18n\n      order\n      code\n      root\n      depth\n      path\n      createdAt\n      updatedAt\n      children\n    }\n  }\n}\n    ";
    exports.OrgsDocument = "\n    query orgs($page: Int, $limit: Int, $sortBy: SortByEnum) {\n  orgs(page: $page, limit: $limit, sortBy: $sortBy) {\n    totalCount\n    list {\n      id\n      rootNode {\n        id\n        name\n        nameI18n\n        path\n        description\n        descriptionI18n\n        order\n        code\n        root\n        depth\n        createdAt\n        updatedAt\n        children\n      }\n      nodes {\n        id\n        name\n        path\n        nameI18n\n        description\n        descriptionI18n\n        order\n        code\n        root\n        depth\n        createdAt\n        updatedAt\n        children\n      }\n    }\n  }\n}\n    ";
    exports.PoliciesDocument = "\n    query policies($page: Int, $limit: Int, $namespace: String) {\n  policies(page: $page, limit: $limit, namespace: $namespace) {\n    totalCount\n    list {\n      namespace\n      code\n      description\n      createdAt\n      updatedAt\n      statements {\n        resource\n        actions\n        effect\n        condition {\n          param\n          operator\n          value\n        }\n      }\n    }\n  }\n}\n    ";
    exports.PolicyDocument = "\n    query policy($namespace: String, $code: String!) {\n  policy(code: $code, namespace: $namespace) {\n    namespace\n    code\n    isDefault\n    description\n    statements {\n      resource\n      actions\n      effect\n      condition {\n        param\n        operator\n        value\n      }\n    }\n    createdAt\n    updatedAt\n  }\n}\n    ";
    exports.PolicyAssignmentsDocument = "\n    query policyAssignments($namespace: String, $code: String, $targetType: PolicyAssignmentTargetType, $targetIdentifier: String, $page: Int, $limit: Int) {\n  policyAssignments(namespace: $namespace, code: $code, targetType: $targetType, targetIdentifier: $targetIdentifier, page: $page, limit: $limit) {\n    totalCount\n    list {\n      code\n      targetType\n      targetIdentifier\n    }\n  }\n}\n    ";
    exports.PolicyWithAssignmentsDocument = "\n    query policyWithAssignments($page: Int, $limit: Int, $code: String!) {\n  policy(code: $code) {\n    code\n    isDefault\n    description\n    statements {\n      resource\n      actions\n      effect\n    }\n    createdAt\n    updatedAt\n    assignmentsCount\n    assignments(page: $page, limit: $limit) {\n      code\n      targetType\n      targetIdentifier\n    }\n  }\n}\n    ";
    exports.PreviewEmailDocument = "\n    query previewEmail($type: EmailTemplateType!) {\n  previewEmail(type: $type)\n}\n    ";
    exports.QiniuUptokenDocument = "\n    query qiniuUptoken($type: String) {\n  qiniuUptoken(type: $type)\n}\n    ";
    exports.QueryMfaDocument = "\n    query queryMfa($id: String, $userId: String, $userPoolId: String) {\n  queryMfa(id: $id, userId: $userId, userPoolId: $userPoolId) {\n    id\n    userId\n    userPoolId\n    enable\n    secret\n  }\n}\n    ";
    exports.RoleDocument = "\n    query role($code: String!, $namespace: String) {\n  role(code: $code, namespace: $namespace) {\n    id\n    namespace\n    code\n    arn\n    description\n    createdAt\n    updatedAt\n    parent {\n      namespace\n      code\n      arn\n      description\n      createdAt\n      updatedAt\n    }\n  }\n}\n    ";
    exports.RoleWithUsersDocument = "\n    query roleWithUsers($code: String!, $namespace: String, $page: Int, $limit: Int) {\n  role(code: $code, namespace: $namespace) {\n    users(page: $page, limit: $limit) {\n      totalCount\n      list {\n        id\n        arn\n        status\n        userPoolId\n        username\n        email\n        emailVerified\n        phone\n        phoneVerified\n        unionid\n        openid\n        nickname\n        registerSource\n        photo\n        password\n        oauth\n        token\n        tokenExpiredAt\n        loginsCount\n        lastLogin\n        lastIP\n        signedUp\n        blocked\n        isDeleted\n        device\n        browser\n        company\n        name\n        givenName\n        familyName\n        middleName\n        profile\n        preferredUsername\n        website\n        gender\n        birthdate\n        zoneinfo\n        locale\n        address\n        formatted\n        streetAddress\n        locality\n        region\n        postalCode\n        city\n        province\n        country\n        createdAt\n        updatedAt\n        externalId\n        phoneCountryCode\n      }\n    }\n  }\n}\n    ";
    exports.RoleWithUsersWithCustomDataDocument = "\n    query roleWithUsersWithCustomData($code: String!, $namespace: String, $page: Int, $limit: Int) {\n  role(code: $code, namespace: $namespace) {\n    users(page: $page, limit: $limit) {\n      totalCount\n      list {\n        id\n        arn\n        status\n        userPoolId\n        username\n        email\n        emailVerified\n        phone\n        phoneVerified\n        unionid\n        openid\n        nickname\n        registerSource\n        photo\n        password\n        oauth\n        token\n        tokenExpiredAt\n        loginsCount\n        lastLogin\n        lastIP\n        signedUp\n        blocked\n        isDeleted\n        device\n        browser\n        company\n        name\n        givenName\n        familyName\n        middleName\n        profile\n        preferredUsername\n        website\n        gender\n        birthdate\n        zoneinfo\n        locale\n        address\n        formatted\n        streetAddress\n        locality\n        region\n        postalCode\n        city\n        province\n        country\n        createdAt\n        updatedAt\n        externalId\n        phoneCountryCode\n        customData {\n          key\n          value\n          dataType\n          label\n        }\n      }\n    }\n  }\n}\n    ";
    exports.RolesDocument = "\n    query roles($namespace: String, $page: Int, $limit: Int, $sortBy: SortByEnum) {\n  roles(namespace: $namespace, page: $page, limit: $limit, sortBy: $sortBy) {\n    totalCount\n    list {\n      id\n      namespace\n      code\n      arn\n      description\n      createdAt\n      updatedAt\n    }\n  }\n}\n    ";
    exports.RootNodeDocument = "\n    query rootNode($orgId: String!) {\n  rootNode(orgId: $orgId) {\n    id\n    orgId\n    name\n    nameI18n\n    description\n    descriptionI18n\n    order\n    code\n    root\n    depth\n    path\n    codePath\n    namePath\n    createdAt\n    updatedAt\n    children\n  }\n}\n    ";
    exports.SearchNodesDocument = "\n    query searchNodes($keyword: String!) {\n  searchNodes(keyword: $keyword) {\n    id\n    orgId\n    name\n    nameI18n\n    description\n    descriptionI18n\n    order\n    code\n    root\n    depth\n    path\n    codePath\n    namePath\n    createdAt\n    updatedAt\n    children\n  }\n}\n    ";
    exports.SearchUserDocument = "\n    query searchUser($query: String!, $fields: [String], $page: Int, $limit: Int, $departmentOpts: [SearchUserDepartmentOpt], $groupOpts: [SearchUserGroupOpt], $roleOpts: [SearchUserRoleOpt]) {\n  searchUser(query: $query, fields: $fields, page: $page, limit: $limit, departmentOpts: $departmentOpts, groupOpts: $groupOpts, roleOpts: $roleOpts) {\n    totalCount\n    list {\n      id\n      arn\n      userPoolId\n      status\n      username\n      email\n      emailVerified\n      phone\n      phoneVerified\n      unionid\n      openid\n      nickname\n      registerSource\n      photo\n      password\n      oauth\n      token\n      tokenExpiredAt\n      loginsCount\n      lastLogin\n      lastIP\n      signedUp\n      blocked\n      isDeleted\n      device\n      browser\n      company\n      name\n      givenName\n      familyName\n      middleName\n      profile\n      preferredUsername\n      website\n      gender\n      birthdate\n      zoneinfo\n      locale\n      address\n      formatted\n      streetAddress\n      locality\n      region\n      postalCode\n      city\n      province\n      country\n      createdAt\n      updatedAt\n      externalId\n      phoneCountryCode\n    }\n  }\n}\n    ";
    exports.SearchUserWithCustomDataDocument = "\n    query searchUserWithCustomData($query: String!, $fields: [String], $page: Int, $limit: Int, $departmentOpts: [SearchUserDepartmentOpt], $groupOpts: [SearchUserGroupOpt], $roleOpts: [SearchUserRoleOpt]) {\n  searchUser(query: $query, fields: $fields, page: $page, limit: $limit, departmentOpts: $departmentOpts, groupOpts: $groupOpts, roleOpts: $roleOpts) {\n    totalCount\n    list {\n      id\n      arn\n      userPoolId\n      status\n      username\n      email\n      emailVerified\n      phone\n      phoneVerified\n      unionid\n      openid\n      nickname\n      registerSource\n      photo\n      password\n      oauth\n      token\n      tokenExpiredAt\n      loginsCount\n      lastLogin\n      lastIP\n      signedUp\n      blocked\n      isDeleted\n      device\n      browser\n      company\n      name\n      givenName\n      familyName\n      middleName\n      profile\n      preferredUsername\n      website\n      gender\n      birthdate\n      zoneinfo\n      locale\n      address\n      formatted\n      streetAddress\n      locality\n      region\n      postalCode\n      city\n      province\n      country\n      createdAt\n      updatedAt\n      externalId\n      phoneCountryCode\n      customData {\n        key\n        value\n        dataType\n        label\n      }\n    }\n  }\n}\n    ";
    exports.TemplateCodeDocument = "\n    query templateCode {\n  templateCode\n}\n    ";
    exports.UdfDocument = "\n    query udf($targetType: UDFTargetType!) {\n  udf(targetType: $targetType) {\n    targetType\n    dataType\n    key\n    label\n    options\n  }\n}\n    ";
    exports.UdfValueBatchDocument = "\n    query udfValueBatch($targetType: UDFTargetType!, $targetIds: [String!]!) {\n  udfValueBatch(targetType: $targetType, targetIds: $targetIds) {\n    targetId\n    data {\n      key\n      dataType\n      value\n      label\n    }\n  }\n}\n    ";
    exports.UdvDocument = "\n    query udv($targetType: UDFTargetType!, $targetId: String!) {\n  udv(targetType: $targetType, targetId: $targetId) {\n    key\n    dataType\n    value\n    label\n  }\n}\n    ";
    exports.UserDocument = "\n    query user($id: String) {\n  user(id: $id) {\n    id\n    arn\n    userPoolId\n    status\n    username\n    email\n    emailVerified\n    phone\n    phoneVerified\n    identities {\n      openid\n      userIdInIdp\n      userId\n      connectionId\n      isSocial\n      provider\n      type\n      userPoolId\n      extIdpId\n    }\n    unionid\n    openid\n    nickname\n    registerSource\n    photo\n    password\n    oauth\n    token\n    tokenExpiredAt\n    loginsCount\n    lastLogin\n    lastIP\n    signedUp\n    blocked\n    isDeleted\n    device\n    browser\n    company\n    name\n    givenName\n    familyName\n    middleName\n    profile\n    preferredUsername\n    website\n    gender\n    birthdate\n    zoneinfo\n    locale\n    address\n    formatted\n    streetAddress\n    locality\n    region\n    postalCode\n    city\n    province\n    country\n    createdAt\n    updatedAt\n    externalId\n    phoneCountryCode\n    customData {\n      key\n      value\n      dataType\n      label\n    }\n  }\n}\n    ";
    exports.UserBatchDocument = "\n    query userBatch($ids: [String!]!, $type: String) {\n  userBatch(ids: $ids, type: $type) {\n    identities {\n      openid\n      userIdInIdp\n      userId\n      connectionId\n      isSocial\n      provider\n      type\n      userPoolId\n      extIdpId\n    }\n    id\n    arn\n    userPoolId\n    status\n    username\n    email\n    emailVerified\n    phone\n    phoneVerified\n    unionid\n    openid\n    nickname\n    registerSource\n    photo\n    password\n    oauth\n    token\n    tokenExpiredAt\n    loginsCount\n    lastLogin\n    lastIP\n    signedUp\n    blocked\n    isDeleted\n    device\n    browser\n    company\n    name\n    givenName\n    familyName\n    middleName\n    profile\n    preferredUsername\n    website\n    gender\n    birthdate\n    zoneinfo\n    locale\n    address\n    formatted\n    streetAddress\n    locality\n    region\n    postalCode\n    city\n    province\n    country\n    createdAt\n    updatedAt\n    externalId\n    phoneCountryCode\n  }\n}\n    ";
    exports.UserBatchWithCustomDataDocument = "\n    query userBatchWithCustomData($ids: [String!]!, $type: String) {\n  userBatch(ids: $ids, type: $type) {\n    identities {\n      openid\n      userIdInIdp\n      userId\n      connectionId\n      isSocial\n      provider\n      type\n      userPoolId\n      extIdpId\n    }\n    id\n    arn\n    userPoolId\n    status\n    username\n    email\n    emailVerified\n    phone\n    phoneVerified\n    unionid\n    openid\n    nickname\n    registerSource\n    photo\n    password\n    oauth\n    token\n    tokenExpiredAt\n    loginsCount\n    lastLogin\n    lastIP\n    signedUp\n    blocked\n    isDeleted\n    device\n    browser\n    company\n    name\n    givenName\n    familyName\n    middleName\n    profile\n    preferredUsername\n    website\n    gender\n    birthdate\n    zoneinfo\n    locale\n    address\n    formatted\n    streetAddress\n    locality\n    region\n    postalCode\n    city\n    province\n    country\n    createdAt\n    updatedAt\n    externalId\n    phoneCountryCode\n    customData {\n      key\n      value\n      dataType\n      label\n    }\n  }\n}\n    ";
    exports.UserWithCustomDataDocument = "\n    query userWithCustomData($id: String) {\n  user(id: $id) {\n    id\n    arn\n    userPoolId\n    status\n    username\n    email\n    emailVerified\n    phone\n    phoneVerified\n    identities {\n      openid\n      userIdInIdp\n      userId\n      connectionId\n      isSocial\n      provider\n      userPoolId\n      extIdpId\n    }\n    unionid\n    openid\n    nickname\n    registerSource\n    photo\n    password\n    oauth\n    token\n    tokenExpiredAt\n    loginsCount\n    lastLogin\n    lastIP\n    signedUp\n    blocked\n    isDeleted\n    device\n    browser\n    company\n    name\n    givenName\n    familyName\n    middleName\n    profile\n    preferredUsername\n    website\n    gender\n    birthdate\n    zoneinfo\n    locale\n    address\n    formatted\n    streetAddress\n    locality\n    region\n    postalCode\n    city\n    province\n    country\n    createdAt\n    updatedAt\n    externalId\n    phoneCountryCode\n    customData {\n      key\n      value\n      dataType\n      label\n    }\n  }\n}\n    ";
    exports.UserpoolDocument = "\n    query userpool {\n  userpool {\n    id\n    name\n    domain\n    description\n    secret\n    jwtSecret\n    ownerId\n    userpoolTypes {\n      code\n      name\n      description\n      image\n      sdks\n    }\n    logo\n    createdAt\n    updatedAt\n    emailVerifiedDefault\n    sendWelcomeEmail\n    registerDisabled\n    appSsoEnabled\n    showWxQRCodeWhenRegisterDisabled\n    allowedOrigins\n    tokenExpiresAfter\n    isDeleted\n    frequentRegisterCheck {\n      timeInterval\n      limit\n      enabled\n    }\n    loginFailCheck {\n      timeInterval\n      limit\n      enabled\n    }\n    loginPasswordFailCheck {\n      timeInterval\n      limit\n      enabled\n    }\n    loginFailStrategy\n    changePhoneStrategy {\n      verifyOldPhone\n    }\n    changeEmailStrategy {\n      verifyOldEmail\n    }\n    qrcodeLoginStrategy {\n      qrcodeExpiresAfter\n      returnFullUserInfo\n      allowExchangeUserInfoFromBrowser\n      ticketExpiresAfter\n    }\n    app2WxappLoginStrategy {\n      ticketExpriresAfter\n      ticketExchangeUserInfoNeedSecret\n    }\n    whitelist {\n      phoneEnabled\n      emailEnabled\n      usernameEnabled\n    }\n    customSMSProvider {\n      enabled\n      provider\n      config\n    }\n    packageType\n    useCustomUserStore\n    loginRequireEmailVerified\n    verifyCodeLength\n    verifyCodeMaxAttempts\n  }\n}\n    ";
    exports.UserpoolTypesDocument = "\n    query userpoolTypes {\n  userpoolTypes {\n    code\n    name\n    description\n    image\n    sdks\n  }\n}\n    ";
    exports.UserpoolsDocument = "\n    query userpools($page: Int, $limit: Int, $sortBy: SortByEnum) {\n  userpools(page: $page, limit: $limit, sortBy: $sortBy) {\n    totalCount\n    list {\n      id\n      name\n      domain\n      ownerId\n      description\n      secret\n      jwtSecret\n      logo\n      createdAt\n      updatedAt\n      emailVerifiedDefault\n      sendWelcomeEmail\n      registerDisabled\n      appSsoEnabled\n      showWxQRCodeWhenRegisterDisabled\n      allowedOrigins\n      tokenExpiresAfter\n      isDeleted\n      packageType\n      useCustomUserStore\n      loginRequireEmailVerified\n      verifyCodeLength\n      verifyCodeMaxAttempts\n    }\n  }\n}\n    ";
    exports.UsersDocument = "\n    query users($page: Int, $limit: Int, $sortBy: SortByEnum, $excludeUsersInOrg: Boolean) {\n  users(page: $page, limit: $limit, sortBy: $sortBy, excludeUsersInOrg: $excludeUsersInOrg) {\n    totalCount\n    list {\n      identities {\n        openid\n        userIdInIdp\n        userId\n        connectionId\n        isSocial\n        provider\n        type\n        userPoolId\n        extIdpId\n      }\n      id\n      arn\n      userPoolId\n      status\n      username\n      email\n      emailVerified\n      phone\n      phoneVerified\n      unionid\n      openid\n      nickname\n      registerSource\n      photo\n      password\n      oauth\n      token\n      tokenExpiredAt\n      loginsCount\n      lastLogin\n      lastIP\n      signedUp\n      blocked\n      isDeleted\n      device\n      browser\n      company\n      name\n      givenName\n      familyName\n      middleName\n      profile\n      preferredUsername\n      website\n      gender\n      birthdate\n      zoneinfo\n      locale\n      address\n      formatted\n      streetAddress\n      locality\n      region\n      postalCode\n      city\n      province\n      country\n      createdAt\n      updatedAt\n      externalId\n      phoneCountryCode\n    }\n  }\n}\n    ";
    exports.UsersWithCustomDataDocument = "\n    query usersWithCustomData($page: Int, $limit: Int, $sortBy: SortByEnum, $excludeUsersInOrg: Boolean) {\n  users(page: $page, limit: $limit, sortBy: $sortBy, excludeUsersInOrg: $excludeUsersInOrg) {\n    totalCount\n    list {\n      id\n      identities {\n        openid\n        userIdInIdp\n        userId\n        connectionId\n        isSocial\n        provider\n        type\n        userPoolId\n        extIdpId\n      }\n      arn\n      userPoolId\n      status\n      username\n      email\n      emailVerified\n      phone\n      phoneVerified\n      unionid\n      openid\n      nickname\n      registerSource\n      photo\n      password\n      oauth\n      token\n      tokenExpiredAt\n      loginsCount\n      lastLogin\n      lastIP\n      signedUp\n      blocked\n      isDeleted\n      device\n      browser\n      company\n      name\n      givenName\n      familyName\n      middleName\n      profile\n      preferredUsername\n      website\n      gender\n      birthdate\n      zoneinfo\n      locale\n      address\n      formatted\n      streetAddress\n      locality\n      region\n      postalCode\n      city\n      province\n      country\n      createdAt\n      updatedAt\n      externalId\n      phoneCountryCode\n      customData {\n        key\n        value\n        dataType\n        label\n      }\n    }\n  }\n}\n    ";
    exports.WhitelistDocument = "\n    query whitelist($type: WhitelistType!) {\n  whitelist(type: $type) {\n    createdAt\n    updatedAt\n    value\n  }\n}\n    ";
});
//# sourceMappingURL=graphql.v2.js.map